#! /usr/bin/perl

# ICON
#
# ------------------------------------------
# Copyright (C) 2004-2024, DWD, MPI-M, DKRZ, KIT, ETH, MeteoSwiss
# Contact information: icon-model.org
# See AUTHORS.TXT for a list of authors
# See LICENSES/ for license information
# SPDX-License-Identifier: BSD-3-Clause
# ------------------------------------------

use strict;
use warnings;

use File::Spec::Functions qw(catfile);

sub mask_nagfor_arg($;);

my ($debug, $verbose) = (0, 0);

print STDERR __FILE__, "\n"
    if ($debug);
# search PATH for occurrence of other nagfor
my $delegate;
foreach my $dir (split(/:/, $ENV{'PATH'}))
{
  my $candidate = catfile($dir, 'nagfor');
  print STDERR $candidate, "\n"
      if ($debug);
  if (-x $candidate and $candidate ne __FILE__)
    {
      $delegate = $candidate;
      last;
    }
}
die('No nagfor compiler to invoke found!', "\n")
    unless (defined($delegate));

# filter arguments for known options that need masking
my @args = @ARGV;

my %regex_replacements = (
  qr{^-march=} => '-Wc,-march='
 );
my %recombine_args = (
  '--param' => [ '-Wc', ',', 2 ]
 );
my %replacements
    = (
      '-pthread' => '-Wc,-pthread',
      '-shared' => '-Wl,-shared',
      '-mfma' => '-Wc,-mfma',
      '-no-fma' => '-Wc,-mno-fma',
      '-pipe' => '-Wc,-pipe'
     );

arg_rewrite:
for (my $i = 0; $i < @args; ++$i)
{
  my ($arg) = $args[$i];
  if (exists $recombine_args{$arg})
  {
    my ($prefix, $argSep, $numArgs) = @{$recombine_args{$arg}};
    my (@combineArgs) = @args[$i..$i+$numArgs-1];
    splice(@args, $i, $numArgs, join($argSep, $prefix, @combineArgs));
    next arg_rewrite;
  }
  foreach my $argRe (keys %regex_replacements)
  {
    if ($arg =~ m{$argRe})
    {
      my $replace = $regex_replacements{$argRe};
      $arg =~ s{$argRe}{$replace};
      $args[$i] = $arg;
      next arg_rewrite;
    }
  }
  if (exists($replacements{$arg}))
  {
    $args[$i] = $replacements{$arg};
  }
}

# invoke real compiler with masked arguments
print(STDERR '(', join(', ', $delegate, @args), ')', "\n")
    if ($debug or $verbose);

exec($delegate, @args)
    or die('exec failed', "\n");

# Local Variables:
# mode: cperl
# End:

