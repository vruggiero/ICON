diff -ur -x autom4te.cache -x .git a/modules/ucx/Makefile.in b/modules/ucx/Makefile.in
--- a/modules/ucx/Makefile.in	2022-11-08 00:16:17.010053854 +0100
+++ b/modules/ucx/Makefile.in	2022-11-08 00:41:46.441283359 +0100
@@ -295,8 +295,8 @@
 	$(top_srcdir)/src/ucp/core/ucp_version.c.in \
 	$(top_srcdir)/src/uct/api/version.h.in \
 	$(top_srcdir)/test/apps/uct_info/Makefile.in AUTHORS NEWS \
-	README compile config.guess config.sub install-sh ltmain.sh \
-	missing
+	README compile config.guess config.sub depcomp install-sh \
+	ltmain.sh missing
 DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
 distdir = $(PACKAGE)-$(VERSION)
 top_distdir = $(distdir)
diff -ur -x autom4te.cache -x .git a/src/binding/c/datatype/pack.c b/src/binding/c/datatype/pack.c
--- a/src/binding/c/datatype/pack.c	2022-11-08 00:12:26.349341285 +0100
+++ b/src/binding/c/datatype/pack.c	2022-11-08 00:38:02.824714926 +0100
@@ -80,6 +80,12 @@
     }
 #endif /* HAVE_ERROR_CHECKING */
 
+    MPI_Aint dt_size;
+    MPIR_Datatype_get_size_macro(datatype, dt_size);
+    if (dt_size == 0) {
+        goto fn_exit;
+    }
+
     /* ... body of routine ... */
     MPI_Aint position_c = *position;
     mpi_errno = MPIR_Pack_impl(inbuf, incount, datatype, outbuf, outsize, &position_c, comm_ptr);
@@ -216,6 +222,12 @@
     }
 #endif /* HAVE_ERROR_CHECKING */
 
+    MPI_Aint dt_size;
+    MPIR_Datatype_get_size_macro(datatype, dt_size);
+    if (dt_size == 0) {
+        goto fn_exit;
+    }
+
     /* ... body of routine ... */
     if (sizeof(MPI_Count) == sizeof(MPI_Aint)) {
         mpi_errno = MPIR_Pack_impl(inbuf, (MPI_Aint) incount, datatype, outbuf, (MPI_Aint) outsize,
diff -ur -x autom4te.cache -x .git a/src/binding/c/datatype/unpack.c b/src/binding/c/datatype/unpack.c
--- a/src/binding/c/datatype/unpack.c	2022-11-08 00:12:26.277339811 +0100
+++ b/src/binding/c/datatype/unpack.c	2022-11-08 00:38:02.736713129 +0100
@@ -82,6 +82,12 @@
     }
 #endif /* HAVE_ERROR_CHECKING */
 
+    MPI_Aint dt_size;
+    MPIR_Datatype_get_size_macro(datatype, dt_size);
+    if (dt_size == 0) {
+        goto fn_exit;
+    }
+
     /* ... body of routine ... */
     MPI_Aint position_c = *position;
     mpi_errno = MPIR_Unpack_impl(inbuf, insize, &position_c, outbuf, outcount, datatype, comm_ptr);
@@ -221,6 +227,12 @@
     }
 #endif /* HAVE_ERROR_CHECKING */
 
+    MPI_Aint dt_size;
+    MPIR_Datatype_get_size_macro(datatype, dt_size);
+    if (dt_size == 0) {
+        goto fn_exit;
+    }
+
     /* ... body of routine ... */
     if (sizeof(MPI_Count) == sizeof(MPI_Aint)) {
         mpi_errno = MPIR_Unpack_impl(inbuf, (MPI_Aint) insize, (MPI_Aint *) position, outbuf,
diff -ur -x autom4te.cache -x .git a/src/binding/c/datatype_api.txt b/src/binding/c/datatype_api.txt
--- a/src/binding/c/datatype_api.txt	2022-11-08 00:10:24.250840853 +0100
+++ b/src/binding/c/datatype_api.txt	2022-11-08 00:37:06.679568008 +0100
@@ -115,6 +115,13 @@
         MPIR_ERRTEST_ARGNULL(inbuf, "inbuf", mpi_errno);
     }
 }
+{ -- early_return --
+    MPI_Aint dt_size;
+    MPIR_Datatype_get_size_macro(datatype, dt_size);
+    if (dt_size == 0) {
+        goto fn_exit;
+    }
+}
 
 MPI_Pack_external:
     .desc: Packs a datatype into contiguous memory, using the external32 format
@@ -148,6 +155,13 @@
         MPIR_ERRTEST_ARGNULL(outbuf, "outbuf", mpi_errno);
     }
 }
+{ -- early_return --
+    MPI_Aint dt_size;
+    MPIR_Datatype_get_size_macro(datatype, dt_size);
+    if (dt_size == 0) {
+        goto fn_exit;
+    }
+}
 
 MPI_Unpack_external:
     .desc: Unpack a buffer (packed with MPI_Pack_external) according to a datatype into contiguous memory
diff -ur -x autom4te.cache -x .git a/src/mpi/errhan/defmsg.h b/src/mpi/errhan/defmsg.h
--- a/src/mpi/errhan/defmsg.h	2022-11-08 00:12:29.197399611 +0100
+++ b/src/mpi/errhan/defmsg.h	2022-11-08 00:38:06.108782014 +0100
@@ -366,1888 +366,1892 @@
 static const char long_gen117[]  = "Negative count";
 static const char short_gen118[] = "**ctspkt";
 static const char long_gen118[]  = "failure occurred while attempting to send CTS packet";
-static const char short_gen119[] = "**darrayblock";
-static const char long_gen119[]  = "Value of m must be positive for block(m) distribution";
-static const char short_gen120[] = "**darrayblock2";
-static const char long_gen120[]  = "m * nprocs is less than array_size and is not valid for block(m) distribution (optional arguments: {m*nprocs}, {array_size} (int))";
-static const char short_gen121[] = "**darraycyclic";
-static const char long_gen121[]  = "Value of m must be positive for a cyclic(m) distribution";
-static const char short_gen122[] = "**datarepextent";
-static const char long_gen122[]  = "Invalid extent callback";
-static const char short_gen123[] = "**datarepname";
-static const char long_gen123[]  = "Invalid datarep name";
-static const char short_gen124[] = "**datarepunsupported";
-static const char long_gen124[]  = "Unsupported datarep passed to MPI_File_set_view ";
-static const char short_gen125[] = "**datarepused";
-static const char long_gen125[]  = "The requested datarep name has already been specified to MPI_REGISTER_DATAREP";
-static const char short_gen126[] = "**detach_shar_mem";
-static const char long_gen126[]  = "unable to detach shared memory";
-static const char short_gen127[] = "**dev|pg_create";
-static const char long_gen127[]  = "unable to create a new process group";
-static const char short_gen128[] = "**dev|pg_finalize|list_not_empty";
-static const char long_gen128[]  = "process group list was not empty";
-static const char short_gen129[] = "**dev|pg_init";
-static const char long_gen129[]  = "unable to initialize the process group management module";
-static const char short_gen130[] = "**dev|pg_not_found";
-static const char long_gen130[]  = "the specified process group object could not be located";
-static const char short_gen131[] = "**dev|selfsenddeadlock";
-static const char long_gen131[]  = "DEADLOCK: attempting to send a message to the local process without a prior matching receive";
-static const char short_gen132[] = "**dev|vcrt_create";
-static const char long_gen132[]  = "failed to a create VCRT";
-static const char short_gen133[] = "**dims";
-static const char long_gen133[]  = "Invalid dimension argument";
-static const char short_gen134[] = "**dimsmany";
-static const char long_gen134[]  = "Number of dimensions is too large ";
-static const char short_gen135[] = "**dimspartition";
-static const char long_gen135[]  = "Cannot partition nodes as requested ";
-static const char short_gen136[] = "**dimszero";
-static const char long_gen136[]  = "Communicator associated with zero-dimensional cartesian topology";
-static const char short_gen137[] = "**dispunit";
-static const char long_gen137[]  = "disp_unit argument is not positive integer";
-static const char short_gen138[] = "**donepkt";
-static const char long_gen138[]  = "failure occurred while attempting to send DONE packet";
-static const char short_gen139[] = "**drconvnotsupported";
-static const char long_gen139[]  = "Read and Write datarep conversions are currently not supported by MPI-IO";
-static const char short_gen140[] = "**dtype";
-static const char long_gen140[]  = "Invalid datatype";
-static const char short_gen141[] = "**dtypecommit";
-static const char long_gen141[]  = "Datatype has not been committed ";
-static const char short_gen142[] = "**dtypemismatch";
-static const char long_gen142[]  = "Receiving data with a datatype whose signature does not match that of the sending datatype.";
-static const char short_gen143[] = "**dtypenull";
-static const char long_gen143[]  = "Null datatype";
-static const char short_gen144[] = "**dtypeperm";
-static const char long_gen144[]  = "Cannot free permanent data type ";
-static const char short_gen145[] = "**dupprocesses";
-static const char long_gen145[]  = "Local and remote groups in MPI_Intercomm_create must not contain the same processes";
-static const char short_gen146[] = "**dynamic_node_ids";
-static const char long_gen146[]  = " Node information for dynamic processes currently is not implemented";
-static const char short_gen147[] = "**eagain";
-static const char long_gen147[]  = "Operation could not be issued (EAGAIN)";
-static const char short_gen148[] = "**edgeoutrange";
-static const char long_gen148[]  = "Edge index in graph topology is out of range";
-static const char short_gen149[] = "**errhandler";
-static const char long_gen149[]  = "Invalid errhandler";
-static const char short_gen150[] = "**errhandlernull";
-static const char long_gen150[]  = "Null errhandler ";
-static const char short_gen151[] = "**errhandnotfile";
-static const char long_gen151[]  = "Error handler is not a file error handler";
-static const char short_gen152[] = "**errhandnotsession";
-static const char long_gen152[]  = "Error handler is not a session error handler";
-static const char short_gen153[] = "**errhandnotwin";
-static const char long_gen153[]  = "Error handler is not a win error handler";
-static const char short_gen154[] = "**exceeded_connect_tries";
-static const char long_gen154[]  = "Unable to establish connection to process";
-static const char short_gen155[] = "**f90typecomplexnone";
-static const char long_gen155[]  = " No complex type with the requested range and/or precision is available";
-static const char short_gen156[] = "**f90typeintnone";
-static const char long_gen156[]  = " No integer type with the requested range is available";
-static const char short_gen157[] = "**f90typerealnone";
-static const char long_gen157[]  = " No real type with the requested range and/or precision is available";
-static const char short_gen158[] = "**f90typetoomany";
-static const char long_gen158[]  = "Too many requests for unnamed, predefined f90 types";
-static const char short_gen159[] = "**fail";
-static const char long_gen159[]  = "";
-static const char short_gen160[] = "**failure_pending";
-static const char long_gen160[]  = "Request pending due to failure";
-static const char short_gen161[] = "**file";
-static const char long_gen161[]  = "Invalid MPI_File";
-static const char short_gen162[] = "**fileaccess";
-static const char long_gen162[]  = "Access denied to file";
-static const char short_gen163[] = "**fileamode";
-static const char long_gen163[]  = "Invalid amode value in MPI_File_open ";
-static const char short_gen164[] = "**fileamodediff";
-static const char long_gen164[]  = "amode must be the same on all processors";
-static const char short_gen165[] = "**fileamodeone";
-static const char long_gen165[]  = "Exactly one of MPI_MODE_RDONLY, MPI_MODE_WRONLY, or MPI_MODE_RDWR must be specified";
-static const char short_gen166[] = "**fileamoderead";
-static const char long_gen166[]  = "Cannot use MPI_MODE_CREATE or MPI_MODE_EXCL with MPI_MODE_RDONLY ";
-static const char short_gen167[] = "**fileamodeseq";
-static const char long_gen167[]  = "Cannot specify MPI_MODE_SEQUENTIAL with MPI_MODE_RDWR";
-static const char short_gen168[] = "**fileexist";
-static const char long_gen168[]  = "File exists";
-static const char short_gen169[] = "**fileinuse";
-static const char long_gen169[]  = "File in use by some process";
-static const char short_gen170[] = "**filename";
-static const char long_gen170[]  = "Invalid file name";
-static const char short_gen171[] = "**filenamedir";
-static const char long_gen171[]  = "Invalid or missing directory";
-static const char short_gen172[] = "**filenamelong";
-static const char long_gen172[]  = "Pathname too long";
-static const char short_gen173[] = "**filenoexist";
-static const char long_gen173[]  = "File does not exist";
-static const char short_gen174[] = "**filenospace";
-static const char long_gen174[]  = "Not enough space for file ";
-static const char short_gen175[] = "**fileopunsupported";
-static const char long_gen175[]  = "Unsupported file operation ";
-static const char short_gen176[] = "**filequota";
-static const char long_gen176[]  = "Quota exceeded for files";
-static const char short_gen177[] = "**filerdonly";
-static const char long_gen177[]  = "Read-only file or filesystem name";
-static const char short_gen178[] = "**flag";
-static const char long_gen178[]  = "invalid flag parameter";
-static const char short_gen179[] = "**gethostbyname";
-static const char long_gen179[]  = "gethostbyname failed";
-static const char short_gen180[] = "**getsockname";
-static const char long_gen180[]  = "getsockname failed";
-static const char short_gen181[] = "**gpu_enqueue_noncontig";
-static const char long_gen181[]  = "Non-contig datatype not supported due to missing TLS.";
-static const char short_gen182[] = "**gpu_finalize";
-static const char long_gen182[]  = " gpu_finalize failed";
-static const char short_gen183[] = "**gpu_get_buffer_info";
-static const char long_gen183[]  = " gpu_get_buffer_info failed";
-static const char short_gen184[] = "**gpu_get_dev_count";
-static const char long_gen184[]  = " gpu_get_dev_count failed";
-static const char short_gen185[] = "**gpu_init";
-static const char long_gen185[]  = " gpu_init failed";
-static const char short_gen186[] = "**gpu_ipc_handle_create";
-static const char long_gen186[]  = " gpu_ipc_handle_create failed";
-static const char short_gen187[] = "**gpu_ipc_handle_map";
-static const char long_gen187[]  = " gpu_ipc_handle_map failed";
-static const char short_gen188[] = "**gpu_ipc_handle_unmap";
-static const char long_gen188[]  = " gpu_ipc_handle_unmap failed";
-static const char short_gen189[] = "**gpu_query_ptr";
-static const char long_gen189[]  = " gpu_query_pointer_attr failed";
-static const char short_gen190[] = "**graphnnodes";
-static const char long_gen190[]  = "Number of graph nodes exceeds size of communicator.";
-static const char short_gen191[] = "**group";
-static const char long_gen191[]  = "Invalid group";
-static const char short_gen192[] = "**groupnotincomm";
-static const char long_gen192[]  = "Specified group is not within the communicator";
-static const char short_gen193[] = "**groupnull";
-static const char long_gen193[]  = "Null group";
-static const char short_gen194[] = "**groupperm";
-static const char long_gen194[]  = "Cannot free permanent group";
-static const char short_gen195[] = "**hcoll_wrong_arg";
-static const char long_gen195[]  = "Error in hcolrte api: wrong null argument";
-static const char short_gen196[] = "**iface_notfound";
-static const char long_gen196[]  = "The network interface specified in MPIR_CVAR_CH3_NETWORK_IFACE was not found.";
-static const char short_gen197[] = "**ifname_and_hostname";
-static const char long_gen197[]  = "Only one of MPIR_CVAR_CH3_INTERFACE_HOSTNAME and MPIR_CVAR_CH3_NETWORK_IFACE environment variables are allowed, but both were set.";
-static const char short_gen198[] = "**ifnameinvalid";
-static const char long_gen198[]  = "Interface name was invalid in call to inet_pton";
-static const char short_gen199[] = "**indexneg";
-static const char long_gen199[]  = "Index value in graph topology must be nonnegative";
-static const char short_gen200[] = "**indexnonmonotone";
-static const char long_gen200[]  = "Index values in graph topology must be monotone nondecreasing";
-static const char short_gen201[] = "**info";
-static const char long_gen201[]  = "Invalid MPI_Info";
-static const char short_gen202[] = "**infohexinvalid";
-static const char long_gen202[]  = "MPI_Info key value is invalid";
-static const char short_gen203[] = "**infokey";
-static const char long_gen203[]  = "Invalid key for MPI_Info ";
-static const char short_gen204[] = "**infokeyempty";
-static const char long_gen204[]  = "Empty or blank key ";
-static const char short_gen205[] = "**infokeylong";
-static const char long_gen205[]  = "Key is too long";
-static const char short_gen206[] = "**infokeynull";
-static const char long_gen206[]  = "Null key";
-static const char short_gen207[] = "**infonkey";
-static const char long_gen207[]  = "Requested nth key does not exist";
-static const char short_gen208[] = "**infonokey";
-static const char long_gen208[]  = "MPI_Info key is not defined ";
-static const char short_gen209[] = "**infonoteq";
-static const char long_gen209[]  = "MPI_Info key value are not consistent for all processes";
-static const char short_gen210[] = "**infonull";
-static const char long_gen210[]  = "Null MPI_Info ";
-static const char short_gen211[] = "**infoval";
-static const char long_gen211[]  = "Invalid MPI_Info value ";
-static const char short_gen212[] = "**infovallong";
-static const char long_gen212[]  = "Value is too long ";
-static const char short_gen213[] = "**init_buscard";
-static const char long_gen213[]  = "failed to get my business card";
-static const char short_gen214[] = "**init_progress";
-static const char long_gen214[]  = "progress_init failed";
-static const char short_gen215[] = "**init_vcrt";
-static const char long_gen215[]  = "failed to create VCRT";
-static const char short_gen216[] = "**initialized";
-static const char long_gen216[]  = "MPI not initialized. Call MPI_Init or MPI_Init_thread first";
-static const char short_gen217[] = "**inittwice";
-static const char long_gen217[]  = "Cannot call MPI_INIT or MPI_INIT_THREAD more than once";
-static const char short_gen218[] = "**instatus";
-static const char long_gen218[]  = "See the MPI_ERROR field in MPI_Status for the error code";
-static const char short_gen219[] = "**intern";
-static const char long_gen219[]  = "Internal MPI error!";
-static const char short_gen220[] = "**invalid_handle";
-static const char long_gen220[]  = "invalid handle";
-static const char short_gen221[] = "**invalid_netmod";
-static const char long_gen221[]  = "Invalid netmod specified";
-static const char short_gen222[] = "**invalid_refcount";
-static const char long_gen222[]  = "invalid reference count";
-static const char short_gen223[] = "**invalidgpustream";
-static const char long_gen223[]  = "Info hint 'type' is set, but info hint 'value' is invalid.";
-static const char short_gen224[] = "**invalidmembind";
-static const char long_gen224[]  = " Invalid bind object identifier.";
-static const char short_gen225[] = "**invalidpkt";
-static const char long_gen225[]  = " Invalid packet type";
-static const char short_gen226[] = "**io";
-static const char long_gen226[]  = "Other I/O error ";
-static const char short_gen227[] = "**ioRMWrdwr";
-static const char long_gen227[]  = "Must open file with MPI_MODE_RDWR for read-modify-write";
-static const char short_gen228[] = "**ioagnomatch";
-static const char long_gen228[]  = "No aggregators match";
-static const char short_gen229[] = "**ioamodeseq";
-static const char long_gen229[]  = "Cannot use this function when the file is opened with amode MPI_MODE_SEQUENTIAL ";
-static const char short_gen230[] = "**iobadcount";
-static const char long_gen230[]  = "Invalid count argument";
-static const char short_gen231[] = "**iobaddisp";
-static const char long_gen231[]  = "Invalid displacement argument";
-static const char short_gen232[] = "**iobadfh";
-static const char long_gen232[]  = "Invalid file handle";
-static const char short_gen233[] = "**iobadoffset";
-static const char long_gen233[]  = "Invalid offset argument";
-static const char short_gen234[] = "**iobadoverlap";
-static const char long_gen234[]  = " write voilates monotonically non-decreasing";
-static const char short_gen235[] = "**iobadsize";
-static const char long_gen235[]  = "Invalid size argument";
-static const char short_gen236[] = "**iobadwhence";
-static const char long_gen236[]  = "Invalid whence argument";
-static const char short_gen237[] = "**iodatarepnomem";
-static const char long_gen237[]  = "User must allocate memory for datarep";
-static const char short_gen238[] = "**iodispifseq";
-static const char long_gen238[]  = "disp must be set to MPI_DISPLACEMENT_CURRENT since file was opened with MPI_MODE_SEQUENTIAL";
-static const char short_gen239[] = "**ioetype";
-static const char long_gen239[]  = "Only an integral number of etypes can be accessed";
-static const char short_gen240[] = "**iofiletype";
-static const char long_gen240[]  = "Filetype must be constructed out of one or more etypes";
-static const char short_gen241[] = "**iofstypeunsupported";
-static const char long_gen241[]  = "Specified filesystem is not available";
-static const char short_gen242[] = "**ioneedrd";
-static const char long_gen242[]  = "Read access is required to this file";
-static const char short_gen243[] = "**ionegoffset";
-static const char long_gen243[]  = "Negative offset argument";
-static const char short_gen244[] = "**iopreallocrdwr";
-static const char long_gen244[]  = "Must open file with MPI_MODE_RDWR to preallocate disk space";
-static const char short_gen245[] = "**iordonly";
-static const char long_gen245[]  = "Cannot write to a file opened with amode MPI_MODE_RDONLY";
-static const char short_gen246[] = "**iorsrc";
-static const char long_gen246[]  = "Unable to read from the file as part of a strided read operation";
-static const char short_gen247[] = "**iosequnsupported";
-static const char long_gen247[]  = "MPI_MODE_SEQUENTIAL not supported on this file system";
-static const char short_gen248[] = "**iosharedfailed";
-static const char long_gen248[]  = "Could not access shared file pointer";
-static const char short_gen249[] = "**iosharedunsupported";
-static const char long_gen249[]  = "Shared file pointers not supported";
-static const char short_gen250[] = "**iosplitcoll";
-static const char long_gen250[]  = "Only one active split collective I/O operation is allowed per file handle";
-static const char short_gen251[] = "**iosplitcollnone";
-static const char long_gen251[]  = "No split collective I/O operation is active";
-static const char short_gen252[] = "**iowronly";
-static const char long_gen252[]  = "Cannot read from a file opened with amode MPI_MODE_WRONLY";
-static const char short_gen253[] = "**iowsrc";
-static const char long_gen253[]  = "Unable to read from the file as part of a strided write operation";
-static const char short_gen254[] = "**iowswc";
-static const char long_gen254[]  = "Unable to write to the file as part of a strided write operation";
-static const char short_gen255[] = "**join_portname";
-static const char long_gen255[]  = "local and remote port names are the same";
-static const char short_gen256[] = "**join_recv";
-static const char long_gen256[]  = "recv from the socket failed";
-static const char short_gen257[] = "**join_send";
-static const char long_gen257[]  = "send on the socket failed";
-static const char short_gen258[] = "**keyval";
-static const char long_gen258[]  = "Invalid keyval";
-static const char short_gen259[] = "**keyvalinvalid";
-static const char long_gen259[]  = "Attribute key was MPI_KEYVAL_INVALID";
-static const char short_gen260[] = "**keyvalobj";
-static const char long_gen260[]  = "Keyval was not defined for the supplied object";
-static const char short_gen261[] = "**listen";
-static const char long_gen261[]  = "listen failed";
-static const char short_gen262[] = "**locktype";
-static const char long_gen262[]  = "Invalid locktype argument";
-static const char short_gen263[] = "**memcpyalias";
-static const char long_gen263[]  = "memcpy arguments alias each other";
-static const char short_gen264[] = "**missinggpustream";
-static const char long_gen264[]  = "Info hint 'type' is set, but info hint 'value' is missing.";
-static const char short_gen265[] = "**mpi_abort";
-static const char long_gen265[]  = "MPI_Abort failed";
-static const char short_gen266[] = "**mpi_accumulate";
-static const char long_gen266[]  = "MPI_Accumulate failed";
-static const char short_gen267[] = "**mpi_accumulate_c";
-static const char long_gen267[]  = "MPI_Accumulate_c failed";
-static const char short_gen268[] = "**mpi_add_error_class";
-static const char long_gen268[]  = "MPI_Add_error_class failed";
-static const char short_gen269[] = "**mpi_add_error_code";
-static const char long_gen269[]  = "MPI_Add_error_code failed";
-static const char short_gen270[] = "**mpi_add_error_string";
-static const char long_gen270[]  = "MPI_Add_error_string failed";
-static const char short_gen271[] = "**mpi_allgather";
-static const char long_gen271[]  = "MPI_Allgather failed";
-static const char short_gen272[] = "**mpi_allgather_c";
-static const char long_gen272[]  = "MPI_Allgather_c failed";
-static const char short_gen273[] = "**mpi_allgather_init";
-static const char long_gen273[]  = "MPI_Allgather_init failed";
-static const char short_gen274[] = "**mpi_allgather_init_c";
-static const char long_gen274[]  = "MPI_Allgather_init_c failed";
-static const char short_gen275[] = "**mpi_allgatherv";
-static const char long_gen275[]  = "MPI_Allgatherv failed";
-static const char short_gen276[] = "**mpi_allgatherv_c";
-static const char long_gen276[]  = "MPI_Allgatherv_c failed";
-static const char short_gen277[] = "**mpi_allgatherv_init";
-static const char long_gen277[]  = "MPI_Allgatherv_init failed";
-static const char short_gen278[] = "**mpi_allgatherv_init_c";
-static const char long_gen278[]  = "MPI_Allgatherv_init_c failed";
-static const char short_gen279[] = "**mpi_alloc_mem";
-static const char long_gen279[]  = "MPI_Alloc_mem failed";
-static const char short_gen280[] = "**mpi_allreduce";
-static const char long_gen280[]  = "MPI_Allreduce failed";
-static const char short_gen281[] = "**mpi_allreduce_c";
-static const char long_gen281[]  = "MPI_Allreduce_c failed";
-static const char short_gen282[] = "**mpi_allreduce_init";
-static const char long_gen282[]  = "MPI_Allreduce_init failed";
-static const char short_gen283[] = "**mpi_allreduce_init_c";
-static const char long_gen283[]  = "MPI_Allreduce_init_c failed";
-static const char short_gen284[] = "**mpi_alltoall";
-static const char long_gen284[]  = "MPI_Alltoall failed";
-static const char short_gen285[] = "**mpi_alltoall_c";
-static const char long_gen285[]  = "MPI_Alltoall_c failed";
-static const char short_gen286[] = "**mpi_alltoall_init";
-static const char long_gen286[]  = "MPI_Alltoall_init failed";
-static const char short_gen287[] = "**mpi_alltoall_init_c";
-static const char long_gen287[]  = "MPI_Alltoall_init_c failed";
-static const char short_gen288[] = "**mpi_alltoallv";
-static const char long_gen288[]  = "MPI_Alltoallv failed";
-static const char short_gen289[] = "**mpi_alltoallv_c";
-static const char long_gen289[]  = "MPI_Alltoallv_c failed";
-static const char short_gen290[] = "**mpi_alltoallv_init";
-static const char long_gen290[]  = "MPI_Alltoallv_init failed";
-static const char short_gen291[] = "**mpi_alltoallv_init_c";
-static const char long_gen291[]  = "MPI_Alltoallv_init_c failed";
-static const char short_gen292[] = "**mpi_alltoallw";
-static const char long_gen292[]  = "MPI_Alltoallw failed";
-static const char short_gen293[] = "**mpi_alltoallw_c";
-static const char long_gen293[]  = "MPI_Alltoallw_c failed";
-static const char short_gen294[] = "**mpi_alltoallw_init";
-static const char long_gen294[]  = "MPI_Alltoallw_init failed";
-static const char short_gen295[] = "**mpi_alltoallw_init_c";
-static const char long_gen295[]  = "MPI_Alltoallw_init_c failed";
-static const char short_gen296[] = "**mpi_barrier";
-static const char long_gen296[]  = "MPI_Barrier failed";
-static const char short_gen297[] = "**mpi_barrier_init";
-static const char long_gen297[]  = "MPI_Barrier_init failed";
-static const char short_gen298[] = "**mpi_bcast";
-static const char long_gen298[]  = "MPI_Bcast failed";
-static const char short_gen299[] = "**mpi_bcast_c";
-static const char long_gen299[]  = "MPI_Bcast_c failed";
-static const char short_gen300[] = "**mpi_bcast_init";
-static const char long_gen300[]  = "MPI_Bcast_init failed";
-static const char short_gen301[] = "**mpi_bcast_init_c";
-static const char long_gen301[]  = "MPI_Bcast_init_c failed";
-static const char short_gen302[] = "**mpi_bsend";
-static const char long_gen302[]  = "MPI_Bsend failed";
-static const char short_gen303[] = "**mpi_bsend_c";
-static const char long_gen303[]  = "MPI_Bsend_c failed";
-static const char short_gen304[] = "**mpi_bsend_init";
-static const char long_gen304[]  = "MPI_Bsend_init failed";
-static const char short_gen305[] = "**mpi_bsend_init_c";
-static const char long_gen305[]  = "MPI_Bsend_init_c failed";
-static const char short_gen306[] = "**mpi_buffer_attach";
-static const char long_gen306[]  = "MPI_Buffer_attach failed";
-static const char short_gen307[] = "**mpi_buffer_attach_c";
-static const char long_gen307[]  = "MPI_Buffer_attach_c failed";
-static const char short_gen308[] = "**mpi_buffer_detach";
-static const char long_gen308[]  = "MPI_Buffer_detach failed";
-static const char short_gen309[] = "**mpi_buffer_detach_c";
-static const char long_gen309[]  = "MPI_Buffer_detach_c failed";
-static const char short_gen310[] = "**mpi_cancel";
-static const char long_gen310[]  = "MPI_Cancel failed";
-static const char short_gen311[] = "**mpi_cart_coords";
-static const char long_gen311[]  = "MPI_Cart_coords failed";
-static const char short_gen312[] = "**mpi_cart_create";
-static const char long_gen312[]  = "MPI_Cart_create failed";
-static const char short_gen313[] = "**mpi_cart_get";
-static const char long_gen313[]  = "MPI_Cart_get failed";
-static const char short_gen314[] = "**mpi_cart_map";
-static const char long_gen314[]  = "MPI_Cart_map failed";
-static const char short_gen315[] = "**mpi_cart_rank";
-static const char long_gen315[]  = "MPI_Cart_rank failed";
-static const char short_gen316[] = "**mpi_cart_shift";
-static const char long_gen316[]  = "MPI_Cart_shift failed";
-static const char short_gen317[] = "**mpi_cart_sub";
-static const char long_gen317[]  = "MPI_Cart_sub failed";
-static const char short_gen318[] = "**mpi_cartdim_get";
-static const char long_gen318[]  = "MPI_Cartdim_get failed";
-static const char short_gen319[] = "**mpi_close_port";
-static const char long_gen319[]  = "MPI_Close_port failed";
-static const char short_gen320[] = "**mpi_comm_accept";
-static const char long_gen320[]  = "MPI_Comm_accept failed";
-static const char short_gen321[] = "**mpi_comm_call_errhandler";
-static const char long_gen321[]  = "MPI_Comm_call_errhandler failed";
-static const char short_gen322[] = "**mpi_comm_compare";
-static const char long_gen322[]  = "MPI_Comm_compare failed";
-static const char short_gen323[] = "**mpi_comm_connect";
-static const char long_gen323[]  = "MPI_Comm_connect failed";
-static const char short_gen324[] = "**mpi_comm_create";
-static const char long_gen324[]  = "MPI_Comm_create failed";
-static const char short_gen325[] = "**mpi_comm_create_errhandler";
-static const char long_gen325[]  = "MPI_Comm_create_errhandler failed";
-static const char short_gen326[] = "**mpi_comm_create_from_group";
-static const char long_gen326[]  = "MPI_Comm_create_from_group failed";
-static const char short_gen327[] = "**mpi_comm_create_group";
-static const char long_gen327[]  = "MPI_Comm_create_group failed";
-static const char short_gen328[] = "**mpi_comm_create_keyval";
-static const char long_gen328[]  = "MPI_Comm_create_keyval failed";
-static const char short_gen329[] = "**mpi_comm_delete_attr";
-static const char long_gen329[]  = "MPI_Comm_delete_attr failed";
-static const char short_gen330[] = "**mpi_comm_disconnect";
-static const char long_gen330[]  = "MPI_Comm_disconnect failed";
-static const char short_gen331[] = "**mpi_comm_dup";
-static const char long_gen331[]  = "MPI_Comm_dup failed";
-static const char short_gen332[] = "**mpi_comm_dup_with_info";
-static const char long_gen332[]  = "MPI_Comm_dup_with_info failed";
-static const char short_gen333[] = "**mpi_comm_free";
-static const char long_gen333[]  = "MPI_Comm_free failed";
-static const char short_gen334[] = "**mpi_comm_free_keyval";
-static const char long_gen334[]  = "MPI_Comm_free_keyval failed";
-static const char short_gen335[] = "**mpi_comm_get_attr";
-static const char long_gen335[]  = "MPI_Comm_get_attr failed";
-static const char short_gen336[] = "**mpi_comm_get_errhandler";
-static const char long_gen336[]  = "MPI_Comm_get_errhandler failed";
-static const char short_gen337[] = "**mpi_comm_get_info";
-static const char long_gen337[]  = "MPI_Comm_get_info failed";
-static const char short_gen338[] = "**mpi_comm_get_name";
-static const char long_gen338[]  = "MPI_Comm_get_name failed";
-static const char short_gen339[] = "**mpi_comm_get_parent";
-static const char long_gen339[]  = "MPI_Comm_get_parent failed";
-static const char short_gen340[] = "**mpi_comm_group";
-static const char long_gen340[]  = "MPI_Comm_group failed";
-static const char short_gen341[] = "**mpi_comm_idup";
-static const char long_gen341[]  = "MPI_Comm_idup failed";
-static const char short_gen342[] = "**mpi_comm_idup_with_info";
-static const char long_gen342[]  = "MPI_Comm_idup_with_info failed";
-static const char short_gen343[] = "**mpi_comm_join";
-static const char long_gen343[]  = "MPI_Comm_join failed";
-static const char short_gen344[] = "**mpi_comm_rank";
-static const char long_gen344[]  = "MPI_Comm_rank failed";
-static const char short_gen345[] = "**mpi_comm_remote_group";
-static const char long_gen345[]  = "MPI_Comm_remote_group failed";
-static const char short_gen346[] = "**mpi_comm_remote_size";
-static const char long_gen346[]  = "MPI_Comm_remote_size failed";
-static const char short_gen347[] = "**mpi_comm_set_attr";
-static const char long_gen347[]  = "MPI_Comm_set_attr failed";
-static const char short_gen348[] = "**mpi_comm_set_errhandler";
-static const char long_gen348[]  = "MPI_Comm_set_errhandler failed";
-static const char short_gen349[] = "**mpi_comm_set_info";
-static const char long_gen349[]  = "MPI_Comm_set_info failed";
-static const char short_gen350[] = "**mpi_comm_set_name";
-static const char long_gen350[]  = "MPI_Comm_set_name failed";
-static const char short_gen351[] = "**mpi_comm_size";
-static const char long_gen351[]  = "MPI_Comm_size failed";
-static const char short_gen352[] = "**mpi_comm_spawn";
-static const char long_gen352[]  = "MPI_Comm_spawn failed";
-static const char short_gen353[] = "**mpi_comm_spawn_multiple";
-static const char long_gen353[]  = "MPI_Comm_spawn_multiple failed";
-static const char short_gen354[] = "**mpi_comm_split";
-static const char long_gen354[]  = "MPI_Comm_split failed";
-static const char short_gen355[] = "**mpi_comm_split_type";
-static const char long_gen355[]  = "MPI_Comm_split_type failed";
-static const char short_gen356[] = "**mpi_comm_test_inter";
-static const char long_gen356[]  = "MPI_Comm_test_inter failed";
-static const char short_gen357[] = "**mpi_compare_and_swap";
-static const char long_gen357[]  = "MPI_Compare_and_swap failed";
-static const char short_gen358[] = "**mpi_dims_create";
-static const char long_gen358[]  = "MPI_Dims_create failed";
-static const char short_gen359[] = "**mpi_dist_graph_create";
-static const char long_gen359[]  = "MPI_Dist_graph_create failed";
-static const char short_gen360[] = "**mpi_dist_graph_create_adjacent";
-static const char long_gen360[]  = "MPI_Dist_graph_create_adjacent failed";
-static const char short_gen361[] = "**mpi_dist_graph_neighbors";
-static const char long_gen361[]  = "MPI_Dist_graph_neighbors failed";
-static const char short_gen362[] = "**mpi_dist_graph_neighbors_count";
-static const char long_gen362[]  = "MPI_Dist_graph_neighbors_count failed";
-static const char short_gen363[] = "**mpi_errhandler_free";
-static const char long_gen363[]  = "MPI_Errhandler_free failed";
-static const char short_gen364[] = "**mpi_error_class";
-static const char long_gen364[]  = "MPI_Error_class failed";
-static const char short_gen365[] = "**mpi_error_string";
-static const char long_gen365[]  = "MPI_Error_string failed";
-static const char short_gen366[] = "**mpi_exscan";
-static const char long_gen366[]  = "MPI_Exscan failed";
-static const char short_gen367[] = "**mpi_exscan_c";
-static const char long_gen367[]  = "MPI_Exscan_c failed";
-static const char short_gen368[] = "**mpi_exscan_init";
-static const char long_gen368[]  = "MPI_Exscan_init failed";
-static const char short_gen369[] = "**mpi_exscan_init_c";
-static const char long_gen369[]  = "MPI_Exscan_init_c failed";
-static const char short_gen370[] = "**mpi_fetch_and_op";
-static const char long_gen370[]  = "MPI_Fetch_and_op failed";
-static const char short_gen371[] = "**mpi_file_call_errhandler";
-static const char long_gen371[]  = "MPI_File_call_errhandler failed";
-static const char short_gen372[] = "**mpi_file_create_errhandler";
-static const char long_gen372[]  = "MPI_File_create_errhandler failed";
-static const char short_gen373[] = "**mpi_file_get_errhandler";
-static const char long_gen373[]  = "MPI_File_get_errhandler failed";
-static const char short_gen374[] = "**mpi_file_set_errhandler";
-static const char long_gen374[]  = "MPI_File_set_errhandler failed";
-static const char short_gen375[] = "**mpi_finalize";
-static const char long_gen375[]  = "MPI_Finalize failed";
-static const char short_gen376[] = "**mpi_finalized";
-static const char long_gen376[]  = "MPI_Finalized failed";
-static const char short_gen377[] = "**mpi_free_mem";
-static const char long_gen377[]  = "MPI_Free_mem failed";
-static const char short_gen378[] = "**mpi_gather";
-static const char long_gen378[]  = "MPI_Gather failed";
-static const char short_gen379[] = "**mpi_gather_c";
-static const char long_gen379[]  = "MPI_Gather_c failed";
-static const char short_gen380[] = "**mpi_gather_init";
-static const char long_gen380[]  = "MPI_Gather_init failed";
-static const char short_gen381[] = "**mpi_gather_init_c";
-static const char long_gen381[]  = "MPI_Gather_init_c failed";
-static const char short_gen382[] = "**mpi_gatherv";
-static const char long_gen382[]  = "MPI_Gatherv failed";
-static const char short_gen383[] = "**mpi_gatherv_c";
-static const char long_gen383[]  = "MPI_Gatherv_c failed";
-static const char short_gen384[] = "**mpi_gatherv_init";
-static const char long_gen384[]  = "MPI_Gatherv_init failed";
-static const char short_gen385[] = "**mpi_gatherv_init_c";
-static const char long_gen385[]  = "MPI_Gatherv_init_c failed";
-static const char short_gen386[] = "**mpi_get";
-static const char long_gen386[]  = "MPI_Get failed";
-static const char short_gen387[] = "**mpi_get_accumulate";
-static const char long_gen387[]  = "MPI_Get_accumulate failed";
-static const char short_gen388[] = "**mpi_get_accumulate_c";
-static const char long_gen388[]  = "MPI_Get_accumulate_c failed";
-static const char short_gen389[] = "**mpi_get_address";
-static const char long_gen389[]  = "MPI_Get_address failed";
-static const char short_gen390[] = "**mpi_get_c";
-static const char long_gen390[]  = "MPI_Get_c failed";
-static const char short_gen391[] = "**mpi_get_count";
-static const char long_gen391[]  = "MPI_Get_count failed";
-static const char short_gen392[] = "**mpi_get_count_c";
-static const char long_gen392[]  = "MPI_Get_count_c failed";
-static const char short_gen393[] = "**mpi_get_elements";
-static const char long_gen393[]  = "MPI_Get_elements failed";
-static const char short_gen394[] = "**mpi_get_elements_c";
-static const char long_gen394[]  = "MPI_Get_elements_c failed";
-static const char short_gen395[] = "**mpi_get_elements_x";
-static const char long_gen395[]  = "MPI_Get_elements_x failed";
-static const char short_gen396[] = "**mpi_get_library_version";
-static const char long_gen396[]  = "MPI_Get_library_version failed";
-static const char short_gen397[] = "**mpi_get_processor_name";
-static const char long_gen397[]  = "MPI_Get_processor_name failed";
-static const char short_gen398[] = "**mpi_get_version";
-static const char long_gen398[]  = "MPI_Get_version failed";
-static const char short_gen399[] = "**mpi_graph_create";
-static const char long_gen399[]  = "MPI_Graph_create failed";
-static const char short_gen400[] = "**mpi_graph_get";
-static const char long_gen400[]  = "MPI_Graph_get failed";
-static const char short_gen401[] = "**mpi_graph_map";
-static const char long_gen401[]  = "MPI_Graph_map failed";
-static const char short_gen402[] = "**mpi_graph_neighbors";
-static const char long_gen402[]  = "MPI_Graph_neighbors failed";
-static const char short_gen403[] = "**mpi_graph_neighbors_count";
-static const char long_gen403[]  = "MPI_Graph_neighbors_count failed";
-static const char short_gen404[] = "**mpi_graphdims_get";
-static const char long_gen404[]  = "MPI_Graphdims_get failed";
-static const char short_gen405[] = "**mpi_grequest_complete";
-static const char long_gen405[]  = "MPI_Grequest_complete failed";
-static const char short_gen406[] = "**mpi_grequest_start";
-static const char long_gen406[]  = "MPI_Grequest_start failed";
-static const char short_gen407[] = "**mpi_group_compare";
-static const char long_gen407[]  = "MPI_Group_compare failed";
-static const char short_gen408[] = "**mpi_group_difference";
-static const char long_gen408[]  = "MPI_Group_difference failed";
-static const char short_gen409[] = "**mpi_group_excl";
-static const char long_gen409[]  = "MPI_Group_excl failed";
-static const char short_gen410[] = "**mpi_group_free";
-static const char long_gen410[]  = "MPI_Group_free failed";
-static const char short_gen411[] = "**mpi_group_from_session_pset";
-static const char long_gen411[]  = "MPI_Group_from_session_pset failed";
-static const char short_gen412[] = "**mpi_group_incl";
-static const char long_gen412[]  = "MPI_Group_incl failed";
-static const char short_gen413[] = "**mpi_group_intersection";
-static const char long_gen413[]  = "MPI_Group_intersection failed";
-static const char short_gen414[] = "**mpi_group_range_excl";
-static const char long_gen414[]  = "MPI_Group_range_excl failed";
-static const char short_gen415[] = "**mpi_group_range_incl";
-static const char long_gen415[]  = "MPI_Group_range_incl failed";
-static const char short_gen416[] = "**mpi_group_rank";
-static const char long_gen416[]  = "MPI_Group_rank failed";
-static const char short_gen417[] = "**mpi_group_size";
-static const char long_gen417[]  = "MPI_Group_size failed";
-static const char short_gen418[] = "**mpi_group_translate_ranks";
-static const char long_gen418[]  = "MPI_Group_translate_ranks failed";
-static const char short_gen419[] = "**mpi_group_union";
-static const char long_gen419[]  = "MPI_Group_union failed";
-static const char short_gen420[] = "**mpi_iallgather";
-static const char long_gen420[]  = "MPI_Iallgather failed";
-static const char short_gen421[] = "**mpi_iallgather_c";
-static const char long_gen421[]  = "MPI_Iallgather_c failed";
-static const char short_gen422[] = "**mpi_iallgatherv";
-static const char long_gen422[]  = "MPI_Iallgatherv failed";
-static const char short_gen423[] = "**mpi_iallgatherv_c";
-static const char long_gen423[]  = "MPI_Iallgatherv_c failed";
-static const char short_gen424[] = "**mpi_iallreduce";
-static const char long_gen424[]  = "MPI_Iallreduce failed";
-static const char short_gen425[] = "**mpi_iallreduce_c";
-static const char long_gen425[]  = "MPI_Iallreduce_c failed";
-static const char short_gen426[] = "**mpi_ialltoall";
-static const char long_gen426[]  = "MPI_Ialltoall failed";
-static const char short_gen427[] = "**mpi_ialltoall_c";
-static const char long_gen427[]  = "MPI_Ialltoall_c failed";
-static const char short_gen428[] = "**mpi_ialltoallv";
-static const char long_gen428[]  = "MPI_Ialltoallv failed";
-static const char short_gen429[] = "**mpi_ialltoallv_c";
-static const char long_gen429[]  = "MPI_Ialltoallv_c failed";
-static const char short_gen430[] = "**mpi_ialltoallw";
-static const char long_gen430[]  = "MPI_Ialltoallw failed";
-static const char short_gen431[] = "**mpi_ialltoallw_c";
-static const char long_gen431[]  = "MPI_Ialltoallw_c failed";
-static const char short_gen432[] = "**mpi_ibarrier";
-static const char long_gen432[]  = "MPI_Ibarrier failed";
-static const char short_gen433[] = "**mpi_ibcast";
-static const char long_gen433[]  = "MPI_Ibcast failed";
-static const char short_gen434[] = "**mpi_ibcast_c";
-static const char long_gen434[]  = "MPI_Ibcast_c failed";
-static const char short_gen435[] = "**mpi_ibsend";
-static const char long_gen435[]  = "MPI_Ibsend failed";
-static const char short_gen436[] = "**mpi_ibsend_c";
-static const char long_gen436[]  = "MPI_Ibsend_c failed";
-static const char short_gen437[] = "**mpi_iexscan";
-static const char long_gen437[]  = "MPI_Iexscan failed";
-static const char short_gen438[] = "**mpi_iexscan_c";
-static const char long_gen438[]  = "MPI_Iexscan_c failed";
-static const char short_gen439[] = "**mpi_igather";
-static const char long_gen439[]  = "MPI_Igather failed";
-static const char short_gen440[] = "**mpi_igather_c";
-static const char long_gen440[]  = "MPI_Igather_c failed";
-static const char short_gen441[] = "**mpi_igatherv";
-static const char long_gen441[]  = "MPI_Igatherv failed";
-static const char short_gen442[] = "**mpi_igatherv_c";
-static const char long_gen442[]  = "MPI_Igatherv_c failed";
-static const char short_gen443[] = "**mpi_improbe";
-static const char long_gen443[]  = "MPI_Improbe failed";
-static const char short_gen444[] = "**mpi_imrecv";
-static const char long_gen444[]  = "MPI_Imrecv failed";
-static const char short_gen445[] = "**mpi_imrecv_c";
-static const char long_gen445[]  = "MPI_Imrecv_c failed";
-static const char short_gen446[] = "**mpi_ineighbor_allgather";
-static const char long_gen446[]  = "MPI_Ineighbor_allgather failed";
-static const char short_gen447[] = "**mpi_ineighbor_allgather_c";
-static const char long_gen447[]  = "MPI_Ineighbor_allgather_c failed";
-static const char short_gen448[] = "**mpi_ineighbor_allgatherv";
-static const char long_gen448[]  = "MPI_Ineighbor_allgatherv failed";
-static const char short_gen449[] = "**mpi_ineighbor_allgatherv_c";
-static const char long_gen449[]  = "MPI_Ineighbor_allgatherv_c failed";
-static const char short_gen450[] = "**mpi_ineighbor_alltoall";
-static const char long_gen450[]  = "MPI_Ineighbor_alltoall failed";
-static const char short_gen451[] = "**mpi_ineighbor_alltoall_c";
-static const char long_gen451[]  = "MPI_Ineighbor_alltoall_c failed";
-static const char short_gen452[] = "**mpi_ineighbor_alltoallv";
-static const char long_gen452[]  = "MPI_Ineighbor_alltoallv failed";
-static const char short_gen453[] = "**mpi_ineighbor_alltoallv_c";
-static const char long_gen453[]  = "MPI_Ineighbor_alltoallv_c failed";
-static const char short_gen454[] = "**mpi_ineighbor_alltoallw";
-static const char long_gen454[]  = "MPI_Ineighbor_alltoallw failed";
-static const char short_gen455[] = "**mpi_ineighbor_alltoallw_c";
-static const char long_gen455[]  = "MPI_Ineighbor_alltoallw_c failed";
-static const char short_gen456[] = "**mpi_info_create";
-static const char long_gen456[]  = "MPI_Info_create failed";
-static const char short_gen457[] = "**mpi_info_create_env";
-static const char long_gen457[]  = "MPI_Info_create_env failed";
-static const char short_gen458[] = "**mpi_info_delete";
-static const char long_gen458[]  = "MPI_Info_delete failed";
-static const char short_gen459[] = "**mpi_info_dup";
-static const char long_gen459[]  = "MPI_Info_dup failed";
-static const char short_gen460[] = "**mpi_info_free";
-static const char long_gen460[]  = "MPI_Info_free failed";
-static const char short_gen461[] = "**mpi_info_get";
-static const char long_gen461[]  = "MPI_Info_get failed";
-static const char short_gen462[] = "**mpi_info_get_nkeys";
-static const char long_gen462[]  = "MPI_Info_get_nkeys failed";
-static const char short_gen463[] = "**mpi_info_get_nthkey";
-static const char long_gen463[]  = "MPI_Info_get_nthkey failed";
-static const char short_gen464[] = "**mpi_info_get_string";
-static const char long_gen464[]  = "MPI_Info_get_string failed";
-static const char short_gen465[] = "**mpi_info_get_valuelen";
-static const char long_gen465[]  = "MPI_Info_get_valuelen failed";
-static const char short_gen466[] = "**mpi_info_set";
-static const char long_gen466[]  = "MPI_Info_set failed";
-static const char short_gen467[] = "**mpi_init";
-static const char long_gen467[]  = "MPI_Init failed";
-static const char short_gen468[] = "**mpi_init_thread";
-static const char long_gen468[]  = "MPI_Init_thread failed";
-static const char short_gen469[] = "**mpi_initialized";
-static const char long_gen469[]  = "MPI_Initialized failed";
-static const char short_gen470[] = "**mpi_intercomm_create";
-static const char long_gen470[]  = "MPI_Intercomm_create failed";
-static const char short_gen471[] = "**mpi_intercomm_create_from_groups";
-static const char long_gen471[]  = "MPI_Intercomm_create_from_groups failed";
-static const char short_gen472[] = "**mpi_intercomm_merge";
-static const char long_gen472[]  = "MPI_Intercomm_merge failed";
-static const char short_gen473[] = "**mpi_iprobe";
-static const char long_gen473[]  = "MPI_Iprobe failed";
-static const char short_gen474[] = "**mpi_irecv";
-static const char long_gen474[]  = "MPI_Irecv failed";
-static const char short_gen475[] = "**mpi_irecv_c";
-static const char long_gen475[]  = "MPI_Irecv_c failed";
-static const char short_gen476[] = "**mpi_ireduce";
-static const char long_gen476[]  = "MPI_Ireduce failed";
-static const char short_gen477[] = "**mpi_ireduce_c";
-static const char long_gen477[]  = "MPI_Ireduce_c failed";
-static const char short_gen478[] = "**mpi_ireduce_scatter";
-static const char long_gen478[]  = "MPI_Ireduce_scatter failed";
-static const char short_gen479[] = "**mpi_ireduce_scatter_block";
-static const char long_gen479[]  = "MPI_Ireduce_scatter_block failed";
-static const char short_gen480[] = "**mpi_ireduce_scatter_block_c";
-static const char long_gen480[]  = "MPI_Ireduce_scatter_block_c failed";
-static const char short_gen481[] = "**mpi_ireduce_scatter_c";
-static const char long_gen481[]  = "MPI_Ireduce_scatter_c failed";
-static const char short_gen482[] = "**mpi_irsend";
-static const char long_gen482[]  = "MPI_Irsend failed";
-static const char short_gen483[] = "**mpi_irsend_c";
-static const char long_gen483[]  = "MPI_Irsend_c failed";
-static const char short_gen484[] = "**mpi_is_thread_main";
-static const char long_gen484[]  = "MPI_Is_thread_main failed";
-static const char short_gen485[] = "**mpi_iscan";
-static const char long_gen485[]  = "MPI_Iscan failed";
-static const char short_gen486[] = "**mpi_iscan_c";
-static const char long_gen486[]  = "MPI_Iscan_c failed";
-static const char short_gen487[] = "**mpi_iscatter";
-static const char long_gen487[]  = "MPI_Iscatter failed";
-static const char short_gen488[] = "**mpi_iscatter_c";
-static const char long_gen488[]  = "MPI_Iscatter_c failed";
-static const char short_gen489[] = "**mpi_iscatterv";
-static const char long_gen489[]  = "MPI_Iscatterv failed";
-static const char short_gen490[] = "**mpi_iscatterv_c";
-static const char long_gen490[]  = "MPI_Iscatterv_c failed";
-static const char short_gen491[] = "**mpi_isend";
-static const char long_gen491[]  = "MPI_Isend failed";
-static const char short_gen492[] = "**mpi_isend_c";
-static const char long_gen492[]  = "MPI_Isend_c failed";
-static const char short_gen493[] = "**mpi_isendrecv";
-static const char long_gen493[]  = "MPI_Isendrecv failed";
-static const char short_gen494[] = "**mpi_isendrecv_c";
-static const char long_gen494[]  = "MPI_Isendrecv_c failed";
-static const char short_gen495[] = "**mpi_isendrecv_replace";
-static const char long_gen495[]  = "MPI_Isendrecv_replace failed";
-static const char short_gen496[] = "**mpi_isendrecv_replace_c";
-static const char long_gen496[]  = "MPI_Isendrecv_replace_c failed";
-static const char short_gen497[] = "**mpi_issend";
-static const char long_gen497[]  = "MPI_Issend failed";
-static const char short_gen498[] = "**mpi_issend_c";
-static const char long_gen498[]  = "MPI_Issend_c failed";
-static const char short_gen499[] = "**mpi_lookup_name";
-static const char long_gen499[]  = "MPI_Lookup_name failed";
-static const char short_gen500[] = "**mpi_mprobe";
-static const char long_gen500[]  = "MPI_Mprobe failed";
-static const char short_gen501[] = "**mpi_mrecv";
-static const char long_gen501[]  = "MPI_Mrecv failed";
-static const char short_gen502[] = "**mpi_mrecv_c";
-static const char long_gen502[]  = "MPI_Mrecv_c failed";
-static const char short_gen503[] = "**mpi_neighbor_allgather";
-static const char long_gen503[]  = "MPI_Neighbor_allgather failed";
-static const char short_gen504[] = "**mpi_neighbor_allgather_c";
-static const char long_gen504[]  = "MPI_Neighbor_allgather_c failed";
-static const char short_gen505[] = "**mpi_neighbor_allgather_init";
-static const char long_gen505[]  = "MPI_Neighbor_allgather_init failed";
-static const char short_gen506[] = "**mpi_neighbor_allgather_init_c";
-static const char long_gen506[]  = "MPI_Neighbor_allgather_init_c failed";
-static const char short_gen507[] = "**mpi_neighbor_allgatherv";
-static const char long_gen507[]  = "MPI_Neighbor_allgatherv failed";
-static const char short_gen508[] = "**mpi_neighbor_allgatherv_c";
-static const char long_gen508[]  = "MPI_Neighbor_allgatherv_c failed";
-static const char short_gen509[] = "**mpi_neighbor_allgatherv_init";
-static const char long_gen509[]  = "MPI_Neighbor_allgatherv_init failed";
-static const char short_gen510[] = "**mpi_neighbor_allgatherv_init_c";
-static const char long_gen510[]  = "MPI_Neighbor_allgatherv_init_c failed";
-static const char short_gen511[] = "**mpi_neighbor_alltoall";
-static const char long_gen511[]  = "MPI_Neighbor_alltoall failed";
-static const char short_gen512[] = "**mpi_neighbor_alltoall_c";
-static const char long_gen512[]  = "MPI_Neighbor_alltoall_c failed";
-static const char short_gen513[] = "**mpi_neighbor_alltoall_init";
-static const char long_gen513[]  = "MPI_Neighbor_alltoall_init failed";
-static const char short_gen514[] = "**mpi_neighbor_alltoall_init_c";
-static const char long_gen514[]  = "MPI_Neighbor_alltoall_init_c failed";
-static const char short_gen515[] = "**mpi_neighbor_alltoallv";
-static const char long_gen515[]  = "MPI_Neighbor_alltoallv failed";
-static const char short_gen516[] = "**mpi_neighbor_alltoallv_c";
-static const char long_gen516[]  = "MPI_Neighbor_alltoallv_c failed";
-static const char short_gen517[] = "**mpi_neighbor_alltoallv_init";
-static const char long_gen517[]  = "MPI_Neighbor_alltoallv_init failed";
-static const char short_gen518[] = "**mpi_neighbor_alltoallv_init_c";
-static const char long_gen518[]  = "MPI_Neighbor_alltoallv_init_c failed";
-static const char short_gen519[] = "**mpi_neighbor_alltoallw";
-static const char long_gen519[]  = "MPI_Neighbor_alltoallw failed";
-static const char short_gen520[] = "**mpi_neighbor_alltoallw_c";
-static const char long_gen520[]  = "MPI_Neighbor_alltoallw_c failed";
-static const char short_gen521[] = "**mpi_neighbor_alltoallw_init";
-static const char long_gen521[]  = "MPI_Neighbor_alltoallw_init failed";
-static const char short_gen522[] = "**mpi_neighbor_alltoallw_init_c";
-static const char long_gen522[]  = "MPI_Neighbor_alltoallw_init_c failed";
-static const char short_gen523[] = "**mpi_op_commutative";
-static const char long_gen523[]  = "MPI_Op_commutative failed";
-static const char short_gen524[] = "**mpi_op_create";
-static const char long_gen524[]  = "MPI_Op_create failed";
-static const char short_gen525[] = "**mpi_op_create_c";
-static const char long_gen525[]  = "MPI_Op_create_c failed";
-static const char short_gen526[] = "**mpi_op_free";
-static const char long_gen526[]  = "MPI_Op_free failed";
-static const char short_gen527[] = "**mpi_open_port";
-static const char long_gen527[]  = "MPI_Open_port failed";
-static const char short_gen528[] = "**mpi_pack";
-static const char long_gen528[]  = "MPI_Pack failed";
-static const char short_gen529[] = "**mpi_pack_c";
-static const char long_gen529[]  = "MPI_Pack_c failed";
-static const char short_gen530[] = "**mpi_pack_external";
-static const char long_gen530[]  = "MPI_Pack_external failed";
-static const char short_gen531[] = "**mpi_pack_external_c";
-static const char long_gen531[]  = "MPI_Pack_external_c failed";
-static const char short_gen532[] = "**mpi_pack_external_size";
-static const char long_gen532[]  = "MPI_Pack_external_size failed";
-static const char short_gen533[] = "**mpi_pack_external_size_c";
-static const char long_gen533[]  = "MPI_Pack_external_size_c failed";
-static const char short_gen534[] = "**mpi_pack_size";
-static const char long_gen534[]  = "MPI_Pack_size failed";
-static const char short_gen535[] = "**mpi_pack_size_c";
-static const char long_gen535[]  = "MPI_Pack_size_c failed";
-static const char short_gen536[] = "**mpi_parrived";
-static const char long_gen536[]  = "MPI_Parrived failed";
-static const char short_gen537[] = "**mpi_pready";
-static const char long_gen537[]  = "MPI_Pready failed";
-static const char short_gen538[] = "**mpi_pready_list";
-static const char long_gen538[]  = "MPI_Pready_list failed";
-static const char short_gen539[] = "**mpi_pready_range";
-static const char long_gen539[]  = "MPI_Pready_range failed";
-static const char short_gen540[] = "**mpi_precv_init";
-static const char long_gen540[]  = "MPI_Precv_init failed";
-static const char short_gen541[] = "**mpi_probe";
-static const char long_gen541[]  = "MPI_Probe failed";
-static const char short_gen542[] = "**mpi_psend_init";
-static const char long_gen542[]  = "MPI_Psend_init failed";
-static const char short_gen543[] = "**mpi_publish_name";
-static const char long_gen543[]  = "MPI_Publish_name failed";
-static const char short_gen544[] = "**mpi_put";
-static const char long_gen544[]  = "MPI_Put failed";
-static const char short_gen545[] = "**mpi_put_c";
-static const char long_gen545[]  = "MPI_Put_c failed";
-static const char short_gen546[] = "**mpi_query_thread";
-static const char long_gen546[]  = "MPI_Query_thread failed";
-static const char short_gen547[] = "**mpi_raccumulate";
-static const char long_gen547[]  = "MPI_Raccumulate failed";
-static const char short_gen548[] = "**mpi_raccumulate_c";
-static const char long_gen548[]  = "MPI_Raccumulate_c failed";
-static const char short_gen549[] = "**mpi_recv";
-static const char long_gen549[]  = "MPI_Recv failed";
-static const char short_gen550[] = "**mpi_recv_c";
-static const char long_gen550[]  = "MPI_Recv_c failed";
-static const char short_gen551[] = "**mpi_recv_init";
-static const char long_gen551[]  = "MPI_Recv_init failed";
-static const char short_gen552[] = "**mpi_recv_init_c";
-static const char long_gen552[]  = "MPI_Recv_init_c failed";
-static const char short_gen553[] = "**mpi_reduce";
-static const char long_gen553[]  = "MPI_Reduce failed";
-static const char short_gen554[] = "**mpi_reduce_c";
-static const char long_gen554[]  = "MPI_Reduce_c failed";
-static const char short_gen555[] = "**mpi_reduce_init";
-static const char long_gen555[]  = "MPI_Reduce_init failed";
-static const char short_gen556[] = "**mpi_reduce_init_c";
-static const char long_gen556[]  = "MPI_Reduce_init_c failed";
-static const char short_gen557[] = "**mpi_reduce_local";
-static const char long_gen557[]  = "MPI_Reduce_local failed";
-static const char short_gen558[] = "**mpi_reduce_local_c";
-static const char long_gen558[]  = "MPI_Reduce_local_c failed";
-static const char short_gen559[] = "**mpi_reduce_scatter";
-static const char long_gen559[]  = "MPI_Reduce_scatter failed";
-static const char short_gen560[] = "**mpi_reduce_scatter_block";
-static const char long_gen560[]  = "MPI_Reduce_scatter_block failed";
-static const char short_gen561[] = "**mpi_reduce_scatter_block_c";
-static const char long_gen561[]  = "MPI_Reduce_scatter_block_c failed";
-static const char short_gen562[] = "**mpi_reduce_scatter_block_init";
-static const char long_gen562[]  = "MPI_Reduce_scatter_block_init failed";
-static const char short_gen563[] = "**mpi_reduce_scatter_block_init_c";
-static const char long_gen563[]  = "MPI_Reduce_scatter_block_init_c failed";
-static const char short_gen564[] = "**mpi_reduce_scatter_c";
-static const char long_gen564[]  = "MPI_Reduce_scatter_c failed";
-static const char short_gen565[] = "**mpi_reduce_scatter_init";
-static const char long_gen565[]  = "MPI_Reduce_scatter_init failed";
-static const char short_gen566[] = "**mpi_reduce_scatter_init_c";
-static const char long_gen566[]  = "MPI_Reduce_scatter_init_c failed";
-static const char short_gen567[] = "**mpi_request_free";
-static const char long_gen567[]  = "MPI_Request_free failed";
-static const char short_gen568[] = "**mpi_request_get_status";
-static const char long_gen568[]  = "MPI_Request_get_status failed";
-static const char short_gen569[] = "**mpi_rget";
-static const char long_gen569[]  = "MPI_Rget failed";
-static const char short_gen570[] = "**mpi_rget_accumulate";
-static const char long_gen570[]  = "MPI_Rget_accumulate failed";
-static const char short_gen571[] = "**mpi_rget_accumulate_c";
-static const char long_gen571[]  = "MPI_Rget_accumulate_c failed";
-static const char short_gen572[] = "**mpi_rget_c";
-static const char long_gen572[]  = "MPI_Rget_c failed";
-static const char short_gen573[] = "**mpi_rput";
-static const char long_gen573[]  = "MPI_Rput failed";
-static const char short_gen574[] = "**mpi_rput_c";
-static const char long_gen574[]  = "MPI_Rput_c failed";
-static const char short_gen575[] = "**mpi_rsend";
-static const char long_gen575[]  = "MPI_Rsend failed";
-static const char short_gen576[] = "**mpi_rsend_c";
-static const char long_gen576[]  = "MPI_Rsend_c failed";
-static const char short_gen577[] = "**mpi_rsend_init";
-static const char long_gen577[]  = "MPI_Rsend_init failed";
-static const char short_gen578[] = "**mpi_rsend_init_c";
-static const char long_gen578[]  = "MPI_Rsend_init_c failed";
-static const char short_gen579[] = "**mpi_scan";
-static const char long_gen579[]  = "MPI_Scan failed";
-static const char short_gen580[] = "**mpi_scan_c";
-static const char long_gen580[]  = "MPI_Scan_c failed";
-static const char short_gen581[] = "**mpi_scan_init";
-static const char long_gen581[]  = "MPI_Scan_init failed";
-static const char short_gen582[] = "**mpi_scan_init_c";
-static const char long_gen582[]  = "MPI_Scan_init_c failed";
-static const char short_gen583[] = "**mpi_scatter";
-static const char long_gen583[]  = "MPI_Scatter failed";
-static const char short_gen584[] = "**mpi_scatter_c";
-static const char long_gen584[]  = "MPI_Scatter_c failed";
-static const char short_gen585[] = "**mpi_scatter_init";
-static const char long_gen585[]  = "MPI_Scatter_init failed";
-static const char short_gen586[] = "**mpi_scatter_init_c";
-static const char long_gen586[]  = "MPI_Scatter_init_c failed";
-static const char short_gen587[] = "**mpi_scatterv";
-static const char long_gen587[]  = "MPI_Scatterv failed";
-static const char short_gen588[] = "**mpi_scatterv_c";
-static const char long_gen588[]  = "MPI_Scatterv_c failed";
-static const char short_gen589[] = "**mpi_scatterv_init";
-static const char long_gen589[]  = "MPI_Scatterv_init failed";
-static const char short_gen590[] = "**mpi_scatterv_init_c";
-static const char long_gen590[]  = "MPI_Scatterv_init_c failed";
-static const char short_gen591[] = "**mpi_send";
-static const char long_gen591[]  = "MPI_Send failed";
-static const char short_gen592[] = "**mpi_send_c";
-static const char long_gen592[]  = "MPI_Send_c failed";
-static const char short_gen593[] = "**mpi_send_init";
-static const char long_gen593[]  = "MPI_Send_init failed";
-static const char short_gen594[] = "**mpi_send_init_c";
-static const char long_gen594[]  = "MPI_Send_init_c failed";
-static const char short_gen595[] = "**mpi_sendrecv";
-static const char long_gen595[]  = "MPI_Sendrecv failed";
-static const char short_gen596[] = "**mpi_sendrecv_c";
-static const char long_gen596[]  = "MPI_Sendrecv_c failed";
-static const char short_gen597[] = "**mpi_sendrecv_replace";
-static const char long_gen597[]  = "MPI_Sendrecv_replace failed";
-static const char short_gen598[] = "**mpi_sendrecv_replace_c";
-static const char long_gen598[]  = "MPI_Sendrecv_replace_c failed";
-static const char short_gen599[] = "**mpi_session_call_errhandler";
-static const char long_gen599[]  = "MPI_Session_call_errhandler failed";
-static const char short_gen600[] = "**mpi_session_create_errhandler";
-static const char long_gen600[]  = "MPI_Session_create_errhandler failed";
-static const char short_gen601[] = "**mpi_session_finalize";
-static const char long_gen601[]  = "MPI_Session_finalize failed";
-static const char short_gen602[] = "**mpi_session_get_errhandler";
-static const char long_gen602[]  = "MPI_Session_get_errhandler failed";
-static const char short_gen603[] = "**mpi_session_get_info";
-static const char long_gen603[]  = "MPI_Session_get_info failed";
-static const char short_gen604[] = "**mpi_session_get_nth_pset";
-static const char long_gen604[]  = "MPI_Session_get_nth_pset failed";
-static const char short_gen605[] = "**mpi_session_get_num_psets";
-static const char long_gen605[]  = "MPI_Session_get_num_psets failed";
-static const char short_gen606[] = "**mpi_session_get_pset_info";
-static const char long_gen606[]  = "MPI_Session_get_pset_info failed";
-static const char short_gen607[] = "**mpi_session_init";
-static const char long_gen607[]  = "MPI_Session_init failed";
-static const char short_gen608[] = "**mpi_session_set_errhandler";
-static const char long_gen608[]  = "MPI_Session_set_errhandler failed";
-static const char short_gen609[] = "**mpi_ssend";
-static const char long_gen609[]  = "MPI_Ssend failed";
-static const char short_gen610[] = "**mpi_ssend_c";
-static const char long_gen610[]  = "MPI_Ssend_c failed";
-static const char short_gen611[] = "**mpi_ssend_init";
-static const char long_gen611[]  = "MPI_Ssend_init failed";
-static const char short_gen612[] = "**mpi_ssend_init_c";
-static const char long_gen612[]  = "MPI_Ssend_init_c failed";
-static const char short_gen613[] = "**mpi_start";
-static const char long_gen613[]  = "MPI_Start failed";
-static const char short_gen614[] = "**mpi_startall";
-static const char long_gen614[]  = "MPI_Startall failed";
-static const char short_gen615[] = "**mpi_status_set_cancelled";
-static const char long_gen615[]  = "MPI_Status_set_cancelled failed";
-static const char short_gen616[] = "**mpi_status_set_elements";
-static const char long_gen616[]  = "MPI_Status_set_elements failed";
-static const char short_gen617[] = "**mpi_status_set_elements_c";
-static const char long_gen617[]  = "MPI_Status_set_elements_c failed";
-static const char short_gen618[] = "**mpi_status_set_elements_x";
-static const char long_gen618[]  = "MPI_Status_set_elements_x failed";
-static const char short_gen619[] = "**mpi_test";
-static const char long_gen619[]  = "MPI_Test failed";
-static const char short_gen620[] = "**mpi_test_cancelled";
-static const char long_gen620[]  = "MPI_Test_cancelled failed";
-static const char short_gen621[] = "**mpi_testall";
-static const char long_gen621[]  = "MPI_Testall failed";
-static const char short_gen622[] = "**mpi_testany";
-static const char long_gen622[]  = "MPI_Testany failed";
-static const char short_gen623[] = "**mpi_testsome";
-static const char long_gen623[]  = "MPI_Testsome failed";
-static const char short_gen624[] = "**mpi_topo_test";
-static const char long_gen624[]  = "MPI_Topo_test failed";
-static const char short_gen625[] = "**mpi_type_commit";
-static const char long_gen625[]  = "MPI_Type_commit failed";
-static const char short_gen626[] = "**mpi_type_contiguous";
-static const char long_gen626[]  = "MPI_Type_contiguous failed";
-static const char short_gen627[] = "**mpi_type_contiguous_c";
-static const char long_gen627[]  = "MPI_Type_contiguous_c failed";
-static const char short_gen628[] = "**mpi_type_create_darray";
-static const char long_gen628[]  = "MPI_Type_create_darray failed";
-static const char short_gen629[] = "**mpi_type_create_darray_c";
-static const char long_gen629[]  = "MPI_Type_create_darray_c failed";
-static const char short_gen630[] = "**mpi_type_create_f90_complex";
-static const char long_gen630[]  = "MPI_Type_create_f90_complex failed";
-static const char short_gen631[] = "**mpi_type_create_f90_int";
-static const char long_gen631[]  = "MPI_Type_create_f90_int failed";
-static const char short_gen632[] = "**mpi_type_create_f90_real";
-static const char long_gen632[]  = "MPI_Type_create_f90_real failed";
-static const char short_gen633[] = "**mpi_type_create_hindexed";
-static const char long_gen633[]  = "MPI_Type_create_hindexed failed";
-static const char short_gen634[] = "**mpi_type_create_hindexed_block";
-static const char long_gen634[]  = "MPI_Type_create_hindexed_block failed";
-static const char short_gen635[] = "**mpi_type_create_hindexed_block_c";
-static const char long_gen635[]  = "MPI_Type_create_hindexed_block_c failed";
-static const char short_gen636[] = "**mpi_type_create_hindexed_c";
-static const char long_gen636[]  = "MPI_Type_create_hindexed_c failed";
-static const char short_gen637[] = "**mpi_type_create_hvector";
-static const char long_gen637[]  = "MPI_Type_create_hvector failed";
-static const char short_gen638[] = "**mpi_type_create_hvector_c";
-static const char long_gen638[]  = "MPI_Type_create_hvector_c failed";
-static const char short_gen639[] = "**mpi_type_create_indexed_block";
-static const char long_gen639[]  = "MPI_Type_create_indexed_block failed";
-static const char short_gen640[] = "**mpi_type_create_indexed_block_c";
-static const char long_gen640[]  = "MPI_Type_create_indexed_block_c failed";
-static const char short_gen641[] = "**mpi_type_create_keyval";
-static const char long_gen641[]  = "MPI_Type_create_keyval failed";
-static const char short_gen642[] = "**mpi_type_create_resized";
-static const char long_gen642[]  = "MPI_Type_create_resized failed";
-static const char short_gen643[] = "**mpi_type_create_resized_c";
-static const char long_gen643[]  = "MPI_Type_create_resized_c failed";
-static const char short_gen644[] = "**mpi_type_create_struct";
-static const char long_gen644[]  = "MPI_Type_create_struct failed";
-static const char short_gen645[] = "**mpi_type_create_struct_c";
-static const char long_gen645[]  = "MPI_Type_create_struct_c failed";
-static const char short_gen646[] = "**mpi_type_create_subarray";
-static const char long_gen646[]  = "MPI_Type_create_subarray failed";
-static const char short_gen647[] = "**mpi_type_create_subarray_c";
-static const char long_gen647[]  = "MPI_Type_create_subarray_c failed";
-static const char short_gen648[] = "**mpi_type_delete_attr";
-static const char long_gen648[]  = "MPI_Type_delete_attr failed";
-static const char short_gen649[] = "**mpi_type_dup";
-static const char long_gen649[]  = "MPI_Type_dup failed";
-static const char short_gen650[] = "**mpi_type_extent";
-static const char long_gen650[]  = "MPI_Type_extent failed";
-static const char short_gen651[] = "**mpi_type_free";
-static const char long_gen651[]  = "MPI_Type_free failed";
-static const char short_gen652[] = "**mpi_type_free_keyval";
-static const char long_gen652[]  = "MPI_Type_free_keyval failed";
-static const char short_gen653[] = "**mpi_type_get_attr";
-static const char long_gen653[]  = "MPI_Type_get_attr failed";
-static const char short_gen654[] = "**mpi_type_get_contents";
-static const char long_gen654[]  = "MPI_Type_get_contents failed";
-static const char short_gen655[] = "**mpi_type_get_contents_c";
-static const char long_gen655[]  = "MPI_Type_get_contents_c failed";
-static const char short_gen656[] = "**mpi_type_get_envelope";
-static const char long_gen656[]  = "MPI_Type_get_envelope failed";
-static const char short_gen657[] = "**mpi_type_get_envelope_c";
-static const char long_gen657[]  = "MPI_Type_get_envelope_c failed";
-static const char short_gen658[] = "**mpi_type_get_extent";
-static const char long_gen658[]  = "MPI_Type_get_extent failed";
-static const char short_gen659[] = "**mpi_type_get_extent_c";
-static const char long_gen659[]  = "MPI_Type_get_extent_c failed";
-static const char short_gen660[] = "**mpi_type_get_extent_x";
-static const char long_gen660[]  = "MPI_Type_get_extent_x failed";
-static const char short_gen661[] = "**mpi_type_get_name";
-static const char long_gen661[]  = "MPI_Type_get_name failed";
-static const char short_gen662[] = "**mpi_type_get_true_extent";
-static const char long_gen662[]  = "MPI_Type_get_true_extent failed";
-static const char short_gen663[] = "**mpi_type_get_true_extent_c";
-static const char long_gen663[]  = "MPI_Type_get_true_extent_c failed";
-static const char short_gen664[] = "**mpi_type_get_true_extent_x";
-static const char long_gen664[]  = "MPI_Type_get_true_extent_x failed";
-static const char short_gen665[] = "**mpi_type_indexed";
-static const char long_gen665[]  = "MPI_Type_indexed failed";
-static const char short_gen666[] = "**mpi_type_indexed_c";
-static const char long_gen666[]  = "MPI_Type_indexed_c failed";
-static const char short_gen667[] = "**mpi_type_lb";
-static const char long_gen667[]  = "MPI_Type_lb failed";
-static const char short_gen668[] = "**mpi_type_match_size";
-static const char long_gen668[]  = "MPI_Type_match_size failed";
-static const char short_gen669[] = "**mpi_type_set_attr";
-static const char long_gen669[]  = "MPI_Type_set_attr failed";
-static const char short_gen670[] = "**mpi_type_set_name";
-static const char long_gen670[]  = "MPI_Type_set_name failed";
-static const char short_gen671[] = "**mpi_type_size";
-static const char long_gen671[]  = "MPI_Type_size failed";
-static const char short_gen672[] = "**mpi_type_size_c";
-static const char long_gen672[]  = "MPI_Type_size_c failed";
-static const char short_gen673[] = "**mpi_type_size_x";
-static const char long_gen673[]  = "MPI_Type_size_x failed";
-static const char short_gen674[] = "**mpi_type_ub";
-static const char long_gen674[]  = "MPI_Type_ub failed";
-static const char short_gen675[] = "**mpi_type_vector";
-static const char long_gen675[]  = "MPI_Type_vector failed";
-static const char short_gen676[] = "**mpi_type_vector_c";
-static const char long_gen676[]  = "MPI_Type_vector_c failed";
-static const char short_gen677[] = "**mpi_unpack";
-static const char long_gen677[]  = "MPI_Unpack failed";
-static const char short_gen678[] = "**mpi_unpack_c";
-static const char long_gen678[]  = "MPI_Unpack_c failed";
-static const char short_gen679[] = "**mpi_unpack_external";
-static const char long_gen679[]  = "MPI_Unpack_external failed";
-static const char short_gen680[] = "**mpi_unpack_external_c";
-static const char long_gen680[]  = "MPI_Unpack_external_c failed";
-static const char short_gen681[] = "**mpi_unpublish_name";
-static const char long_gen681[]  = "MPI_Unpublish_name failed";
-static const char short_gen682[] = "**mpi_wait";
-static const char long_gen682[]  = "MPI_Wait failed";
-static const char short_gen683[] = "**mpi_waitall";
-static const char long_gen683[]  = "MPI_Waitall failed";
-static const char short_gen684[] = "**mpi_waitany";
-static const char long_gen684[]  = "MPI_Waitany failed";
-static const char short_gen685[] = "**mpi_waitsome";
-static const char long_gen685[]  = "MPI_Waitsome failed";
-static const char short_gen686[] = "**mpi_win_allocate";
-static const char long_gen686[]  = "MPI_Win_allocate failed";
-static const char short_gen687[] = "**mpi_win_allocate_c";
-static const char long_gen687[]  = "MPI_Win_allocate_c failed";
-static const char short_gen688[] = "**mpi_win_allocate_shared";
-static const char long_gen688[]  = "MPI_Win_allocate_shared failed";
-static const char short_gen689[] = "**mpi_win_allocate_shared_c";
-static const char long_gen689[]  = "MPI_Win_allocate_shared_c failed";
-static const char short_gen690[] = "**mpi_win_attach";
-static const char long_gen690[]  = "MPI_Win_attach failed";
-static const char short_gen691[] = "**mpi_win_call_errhandler";
-static const char long_gen691[]  = "MPI_Win_call_errhandler failed";
-static const char short_gen692[] = "**mpi_win_complete";
-static const char long_gen692[]  = "MPI_Win_complete failed";
-static const char short_gen693[] = "**mpi_win_create";
-static const char long_gen693[]  = "MPI_Win_create failed";
-static const char short_gen694[] = "**mpi_win_create_c";
-static const char long_gen694[]  = "MPI_Win_create_c failed";
-static const char short_gen695[] = "**mpi_win_create_dynamic";
-static const char long_gen695[]  = "MPI_Win_create_dynamic failed";
-static const char short_gen696[] = "**mpi_win_create_errhandler";
-static const char long_gen696[]  = "MPI_Win_create_errhandler failed";
-static const char short_gen697[] = "**mpi_win_create_keyval";
-static const char long_gen697[]  = "MPI_Win_create_keyval failed";
-static const char short_gen698[] = "**mpi_win_delete_attr";
-static const char long_gen698[]  = "MPI_Win_delete_attr failed";
-static const char short_gen699[] = "**mpi_win_detach";
-static const char long_gen699[]  = "MPI_Win_detach failed";
-static const char short_gen700[] = "**mpi_win_fence";
-static const char long_gen700[]  = "MPI_Win_fence failed";
-static const char short_gen701[] = "**mpi_win_flush";
-static const char long_gen701[]  = "MPI_Win_flush failed";
-static const char short_gen702[] = "**mpi_win_flush_all";
-static const char long_gen702[]  = "MPI_Win_flush_all failed";
-static const char short_gen703[] = "**mpi_win_flush_local";
-static const char long_gen703[]  = "MPI_Win_flush_local failed";
-static const char short_gen704[] = "**mpi_win_flush_local_all";
-static const char long_gen704[]  = "MPI_Win_flush_local_all failed";
-static const char short_gen705[] = "**mpi_win_free";
-static const char long_gen705[]  = "MPI_Win_free failed";
-static const char short_gen706[] = "**mpi_win_free_keyval";
-static const char long_gen706[]  = "MPI_Win_free_keyval failed";
-static const char short_gen707[] = "**mpi_win_get_attr";
-static const char long_gen707[]  = "MPI_Win_get_attr failed";
-static const char short_gen708[] = "**mpi_win_get_errhandler";
-static const char long_gen708[]  = "MPI_Win_get_errhandler failed";
-static const char short_gen709[] = "**mpi_win_get_group";
-static const char long_gen709[]  = "MPI_Win_get_group failed";
-static const char short_gen710[] = "**mpi_win_get_info";
-static const char long_gen710[]  = "MPI_Win_get_info failed";
-static const char short_gen711[] = "**mpi_win_get_name";
-static const char long_gen711[]  = "MPI_Win_get_name failed";
-static const char short_gen712[] = "**mpi_win_lock";
-static const char long_gen712[]  = "MPI_Win_lock failed";
-static const char short_gen713[] = "**mpi_win_lock_all";
-static const char long_gen713[]  = "MPI_Win_lock_all failed";
-static const char short_gen714[] = "**mpi_win_post";
-static const char long_gen714[]  = "MPI_Win_post failed";
-static const char short_gen715[] = "**mpi_win_set_attr";
-static const char long_gen715[]  = "MPI_Win_set_attr failed";
-static const char short_gen716[] = "**mpi_win_set_errhandler";
-static const char long_gen716[]  = "MPI_Win_set_errhandler failed";
-static const char short_gen717[] = "**mpi_win_set_info";
-static const char long_gen717[]  = "MPI_Win_set_info failed";
-static const char short_gen718[] = "**mpi_win_set_name";
-static const char long_gen718[]  = "MPI_Win_set_name failed";
-static const char short_gen719[] = "**mpi_win_shared_query";
-static const char long_gen719[]  = "MPI_Win_shared_query failed";
-static const char short_gen720[] = "**mpi_win_shared_query_c";
-static const char long_gen720[]  = "MPI_Win_shared_query_c failed";
-static const char short_gen721[] = "**mpi_win_start";
-static const char long_gen721[]  = "MPI_Win_start failed";
-static const char short_gen722[] = "**mpi_win_sync";
-static const char long_gen722[]  = "MPI_Win_sync failed";
-static const char short_gen723[] = "**mpi_win_test";
-static const char long_gen723[]  = "MPI_Win_test failed";
-static const char short_gen724[] = "**mpi_win_unlock";
-static const char long_gen724[]  = "MPI_Win_unlock failed";
-static const char short_gen725[] = "**mpi_win_unlock_all";
-static const char long_gen725[]  = "MPI_Win_unlock_all failed";
-static const char short_gen726[] = "**mpi_win_wait";
-static const char long_gen726[]  = "MPI_Win_wait failed";
-static const char short_gen727[] = "**mpix_allreduce_enqueue";
-static const char long_gen727[]  = "MPIX_Allreduce_enqueue failed";
-static const char short_gen728[] = "**mpix_allreduce_enqueue_c";
-static const char long_gen728[]  = "MPIX_Allreduce_enqueue_c failed";
-static const char short_gen729[] = "**mpix_comm_agree";
-static const char long_gen729[]  = "MPIX_Comm_agree failed";
-static const char short_gen730[] = "**mpix_comm_failure_ack";
-static const char long_gen730[]  = "MPIX_Comm_failure_ack failed";
-static const char short_gen731[] = "**mpix_comm_failure_get_acked";
-static const char long_gen731[]  = "MPIX_Comm_failure_get_acked failed";
-static const char short_gen732[] = "**mpix_comm_get_failed";
-static const char long_gen732[]  = "MPIX_Comm_get_failed failed";
-static const char short_gen733[] = "**mpix_comm_get_stream";
-static const char long_gen733[]  = "MPIX_Comm_get_stream failed";
-static const char short_gen734[] = "**mpix_comm_revoke";
-static const char long_gen734[]  = "MPIX_Comm_revoke failed";
-static const char short_gen735[] = "**mpix_comm_shrink";
-static const char long_gen735[]  = "MPIX_Comm_shrink failed";
-static const char short_gen736[] = "**mpix_delete_error_class";
-static const char long_gen736[]  = "MPIX_Delete_error_class failed";
-static const char short_gen737[] = "**mpix_delete_error_code";
-static const char long_gen737[]  = "MPIX_Delete_error_code failed";
-static const char short_gen738[] = "**mpix_delete_error_string";
-static const char long_gen738[]  = "MPIX_Delete_error_string failed";
-static const char short_gen739[] = "**mpix_gpu_query_support";
-static const char long_gen739[]  = "MPIX_GPU_query_support failed";
-static const char short_gen740[] = "**mpix_grequest_class_allocate";
-static const char long_gen740[]  = "MPIX_Grequest_class_allocate failed";
-static const char short_gen741[] = "**mpix_grequest_class_create";
-static const char long_gen741[]  = "MPIX_Grequest_class_create failed";
-static const char short_gen742[] = "**mpix_grequest_start";
-static const char long_gen742[]  = "MPIX_Grequest_start failed";
-static const char short_gen743[] = "**mpix_info_set_hex";
-static const char long_gen743[]  = "MPIX_Info_set_hex failed";
-static const char short_gen744[] = "**mpix_irecv_enqueue";
-static const char long_gen744[]  = "MPIX_Irecv_enqueue failed";
-static const char short_gen745[] = "**mpix_irecv_enqueue_c";
-static const char long_gen745[]  = "MPIX_Irecv_enqueue_c failed";
-static const char short_gen746[] = "**mpix_isend_enqueue";
-static const char long_gen746[]  = "MPIX_Isend_enqueue failed";
-static const char short_gen747[] = "**mpix_isend_enqueue_c";
-static const char long_gen747[]  = "MPIX_Isend_enqueue_c failed";
-static const char short_gen748[] = "**mpix_recv_enqueue";
-static const char long_gen748[]  = "MPIX_Recv_enqueue failed";
-static const char short_gen749[] = "**mpix_recv_enqueue_c";
-static const char long_gen749[]  = "MPIX_Recv_enqueue_c failed";
-static const char short_gen750[] = "**mpix_send_enqueue";
-static const char long_gen750[]  = "MPIX_Send_enqueue failed";
-static const char short_gen751[] = "**mpix_send_enqueue_c";
-static const char long_gen751[]  = "MPIX_Send_enqueue_c failed";
-static const char short_gen752[] = "**mpix_start_progress_thread";
-static const char long_gen752[]  = "MPIX_Start_progress_thread failed";
-static const char short_gen753[] = "**mpix_stop_progress_thread";
-static const char long_gen753[]  = "MPIX_Stop_progress_thread failed";
-static const char short_gen754[] = "**mpix_stream_comm_create";
-static const char long_gen754[]  = "MPIX_Stream_comm_create failed";
-static const char short_gen755[] = "**mpix_stream_comm_create_multiplex";
-static const char long_gen755[]  = "MPIX_Stream_comm_create_multiplex failed";
-static const char short_gen756[] = "**mpix_stream_create";
-static const char long_gen756[]  = "MPIX_Stream_create failed";
-static const char short_gen757[] = "**mpix_stream_free";
-static const char long_gen757[]  = "MPIX_Stream_free failed";
-static const char short_gen758[] = "**mpix_stream_irecv";
-static const char long_gen758[]  = "MPIX_Stream_irecv failed";
-static const char short_gen759[] = "**mpix_stream_irecv_c";
-static const char long_gen759[]  = "MPIX_Stream_irecv_c failed";
-static const char short_gen760[] = "**mpix_stream_isend";
-static const char long_gen760[]  = "MPIX_Stream_isend failed";
-static const char short_gen761[] = "**mpix_stream_isend_c";
-static const char long_gen761[]  = "MPIX_Stream_isend_c failed";
-static const char short_gen762[] = "**mpix_stream_progress";
-static const char long_gen762[]  = "MPIX_Stream_progress failed";
-static const char short_gen763[] = "**mpix_stream_recv";
-static const char long_gen763[]  = "MPIX_Stream_recv failed";
-static const char short_gen764[] = "**mpix_stream_recv_c";
-static const char long_gen764[]  = "MPIX_Stream_recv_c failed";
-static const char short_gen765[] = "**mpix_stream_send";
-static const char long_gen765[]  = "MPIX_Stream_send failed";
-static const char short_gen766[] = "**mpix_stream_send_c";
-static const char long_gen766[]  = "MPIX_Stream_send_c failed";
-static const char short_gen767[] = "**mpix_type_iov";
-static const char long_gen767[]  = "MPIX_Type_iov failed";
-static const char short_gen768[] = "**mpix_type_iov_len";
-static const char long_gen768[]  = "MPIX_Type_iov_len failed";
-static const char short_gen769[] = "**mpix_wait_enqueue";
-static const char long_gen769[]  = "MPIX_Wait_enqueue failed";
-static const char short_gen770[] = "**mpix_waitall_enqueue";
-static const char long_gen770[]  = "MPIX_Waitall_enqueue failed";
-static const char short_gen771[] = "**mpl_gavl_create";
-static const char long_gen771[]  = " mpl_gavl_create failed";
-static const char short_gen772[] = "**mpl_gavl_delete_range";
-static const char long_gen772[]  = " mpl_gavl_delete_range failed";
-static const char short_gen773[] = "**mpl_gavl_delete_start_addr";
-static const char long_gen773[]  = " mpl_gavl_delete_start_addr failed";
-static const char short_gen774[] = "**mpl_gavl_insert";
-static const char long_gen774[]  = " mpl_gavl_insert failed";
-static const char short_gen775[] = "**mpl_gavl_search";
-static const char long_gen775[]  = " mpl_gavl_search failed";
-static const char short_gen776[] = "**msgnotreq";
-static const char long_gen776[]  = " Invalid MPI_Request (MPI_Message passed)";
-static const char short_gen777[] = "**namepubfile";
-static const char long_gen777[]  = "Unable to publish service name";
-static const char short_gen778[] = "**namepubnotfound";
-static const char long_gen778[]  = "Lookup failed for service name";
-static const char short_gen779[] = "**namepubnotpub";
-static const char long_gen779[]  = "Publish failed for service name";
-static const char short_gen780[] = "**namepubnotunpub";
-static const char long_gen780[]  = "Failed to unpublish service name";
-static const char short_gen781[] = "**nameservice";
-static const char long_gen781[]  = "Invalid service name (see MPI_Publish_name)";
-static const char short_gen782[] = "**need_get_contents_c";
-static const char long_gen782[]  = "use MPI_Type_get_contents_c to query large count datatype";
-static const char short_gen783[] = "**need_get_envelope_c";
-static const char long_gen783[]  = "use MPI_Type_get_envelope_c to query large count datatype";
-static const char short_gen784[] = "**netloc_endpoint_mismatch";
-static const char long_gen784[]  = "Netloc topology does not contain the node";
-static const char short_gen785[] = "**netloc_topo_load";
-static const char long_gen785[]  = "Error loading netloc topology";
-static const char short_gen786[] = "**noConnInfoToString";
-static const char long_gen786[]  = "No ConnInfoToString routine defined for this process group";
-static const char short_gen787[] = "**noerrclasses";
-static const char long_gen787[]  = "No more user-defined error classes";
-static const char short_gen788[] = "**noerrcodes";
-static const char long_gen788[]  = "No more user-defined error codes";
-static const char short_gen789[] = "**nofence";
-static const char long_gen789[]  = " invalid Gentran fence";
-static const char short_gen790[] = "**nomem";
-static const char long_gen790[]  = "Out of memory";
-static const char short_gen791[] = "**nomem2";
-static const char long_gen791[]  = "Unable to allocate memory (probably out of memory)";
-static const char short_gen792[] = "**nomembind";
-static const char long_gen792[]  = " hwloc_set_area_membind() is not available";
-static const char short_gen793[] = "**nomemreq";
-static const char long_gen793[]  = "failure occurred while allocating memory for a request object";
-static const char short_gen794[] = "**nonamepub";
-static const char long_gen794[]  = "No name publishing service available";
-static const char short_gen795[] = "**nosupport";
-static const char long_gen795[]  = " Algorithm selected is not supported. Please choose another algorithm";
-static const char short_gen796[] = "**notcarttopo";
-static const char long_gen796[]  = "No Cartesian topology associated with this communicator";
-static const char short_gen797[] = "**notcstatignore";
-static const char long_gen797[]  = "MPI_STATUS_IGNORE cannot be passed to MPI_Status_c2f()";
-static const char short_gen798[] = "**notdistgraphtopo";
-static const char long_gen798[]  = "No Distributed Graph topology associated with this communicator";
-static const char short_gen799[] = "**notfstatignore";
-static const char long_gen799[]  = "MPI_STATUS_IGNORE cannot be passed to MPI_Status_f2c()";
-static const char short_gen800[] = "**notgenreq";
-static const char long_gen800[]  = "Attempt to complete a request with MPI_GREQUEST_COMPLETE that was not started with MPI_GREQUEST_START";
-static const char short_gen801[] = "**notgpustream";
-static const char long_gen801[]  = "The communicator does not have a local gpu stream attached.";
-static const char short_gen802[] = "**notgraphtopo";
-static const char long_gen802[]  = "No Graph topology associated with this communicator";
-static const char short_gen803[] = "**notimpl";
-static const char long_gen803[]  = "Function not implemented";
-static const char short_gen804[] = "**notopology";
-static const char long_gen804[]  = "No topology associated with this communicator";
-static const char short_gen805[] = "**notsame";
-static const char long_gen805[]  = "Inconsistent arguments to collective routine ";
-static const char short_gen806[] = "**null_buff_ptr";
-static const char long_gen806[]  = "Error in hcolrte api: buffer pointer is NULL for non DTE_ZERO INLINE data representation";
-static const char short_gen807[] = "**nullptr";
-static const char long_gen807[]  = "Null pointer";
-static const char short_gen808[] = "**nullptrtype";
-static const char long_gen808[]  = "Null pointer";
-static const char short_gen809[] = "**nullvertex";
-static const char long_gen809[]  = "  Gentran vertex is NULL";
-static const char short_gen810[] = "**ofi_num_nics";
-static const char long_gen810[]  = "OFI has a different number of nics available on different notes";
-static const char short_gen811[] = "**ofi_provider_mismatch";
-static const char long_gen811[]  = "OFI Provider name does not match configure-time provider name";
-static const char short_gen812[] = "**ofid_alias";
-static const char long_gen812[]  = "OFI cq alias failed";
-static const char short_gen813[] = "**ofid_avclose";
-static const char long_gen813[]  = "OFI av close failed";
-static const char short_gen814[] = "**ofid_avlookup";
-static const char long_gen814[]  = "OFI get address vector lookup failed";
-static const char short_gen815[] = "**ofid_avmap";
-static const char long_gen815[]  = "OFI get address vector map failed";
-static const char short_gen816[] = "**ofid_avopen";
-static const char long_gen816[]  = "OFI address vector open failed";
-static const char short_gen817[] = "**ofid_avsync";
-static const char long_gen817[]  = "OFI get address vector sync failed";
-static const char short_gen818[] = "**ofid_bind";
-static const char long_gen818[]  = "OFI resource bind failure";
-static const char short_gen819[] = "**ofid_cancel";
-static const char long_gen819[]  = "OFI cancel failed";
-static const char short_gen820[] = "**ofid_cntr_wait";
-static const char long_gen820[]  = "OFI Counter wait failed";
-static const char short_gen821[] = "**ofid_cqclose";
-static const char long_gen821[]  = "OFI cq close failed";
-static const char short_gen822[] = "**ofid_ctrlcancel";
-static const char long_gen822[]  = "OFI Control cancel failed";
-static const char short_gen823[] = "**ofid_domainclose";
-static const char long_gen823[]  = "OFI domain close failed";
-static const char short_gen824[] = "**ofid_ep";
-static const char long_gen824[]  = "OFI endpoint open failed";
-static const char short_gen825[] = "**ofid_ep_enable";
-static const char long_gen825[]  = "OFI EP enable failure";
-static const char short_gen826[] = "**ofid_epclose";
-static const char long_gen826[]  = "OFI endpoint close failed";
-static const char short_gen827[] = "**ofid_epsync";
-static const char long_gen827[]  = "OFI synchronization failed";
-static const char short_gen828[] = "**ofid_fabric";
-static const char long_gen828[]  = "OFI fi_fabric failure";
-static const char short_gen829[] = "**ofid_getinfo";
-static const char long_gen829[]  = "OFI fi_getinfo() failure";
-static const char short_gen830[] = "**ofid_getname";
-static const char long_gen830[]  = "OFI get endpoint name failed";
-static const char short_gen831[] = "**ofid_getopt";
-static const char long_gen831[]  = "OFI getopt failed";
-static const char short_gen832[] = "**ofid_inject";
-static const char long_gen832[]  = "OFI inject failed";
-static const char short_gen833[] = "**ofid_mr_key";
-static const char long_gen833[]  = "OFI MR key invalid";
-static const char short_gen834[] = "**ofid_mr_reg";
-static const char long_gen834[]  = "OFI memory registration failed";
-static const char short_gen835[] = "**ofid_mr_unreg";
-static const char long_gen835[]  = "OFI memory deregistration failed";
-static const char short_gen836[] = "**ofid_opencq";
-static const char long_gen836[]  = "OFI event queue create failure";
-static const char short_gen837[] = "**ofid_openct";
-static const char long_gen837[]  = "OFI event counter create failure";
-static const char short_gen838[] = "**ofid_opendomain";
-static const char long_gen838[]  = "OFI fi_open domain failure";
-static const char short_gen839[] = "**ofid_peek";
-static const char long_gen839[]  = "OFI peek failed";
-static const char short_gen840[] = "**ofid_pmi";
-static const char long_gen840[]  = "PMI_Init() failure";
-static const char short_gen841[] = "**ofid_poll";
-static const char long_gen841[]  = "OFI poll failed";
-static const char short_gen842[] = "**ofid_prepost";
-static const char long_gen842[]  = "OFI preposting receives failed";
-static const char short_gen843[] = "**ofid_rdma_atomicto";
-static const char long_gen843[]  = "OFI rdma atomicto failed";
-static const char short_gen844[] = "**ofid_rdma_cswap";
-static const char long_gen844[]  = "OFI rdma cswap failed";
-static const char short_gen845[] = "**ofid_rdma_inject_write";
-static const char long_gen845[]  = "OFI rdma write immediatefailed";
-static const char short_gen846[] = "**ofid_rdma_readfrom";
-static const char long_gen846[]  = "OFI rdma read failed";
-static const char short_gen847[] = "**ofid_rdma_write";
-static const char long_gen847[]  = "OFI rdma write failed";
-static const char short_gen848[] = "**ofid_send";
-static const char long_gen848[]  = "OFI send failed";
-static const char short_gen849[] = "**ofid_sendv";
-static const char long_gen849[]  = "OFI send failed";
-static const char short_gen850[] = "**ofid_setopt";
-static const char long_gen850[]  = "OFI setopt failed";
-static const char short_gen851[] = "**ofid_tinject";
-static const char long_gen851[]  = "OFI tagged inject failed";
-static const char short_gen852[] = "**ofid_trecv";
-static const char long_gen852[]  = "OFI tagged recv failed";
-static const char short_gen853[] = "**ofid_trecvsync";
-static const char long_gen853[]  = "OFI tagged recv sync failed";
-static const char short_gen854[] = "**ofid_tsend";
-static const char long_gen854[]  = "OFI tagged send failed";
-static const char short_gen855[] = "**ofid_tsendsync";
-static const char long_gen855[]  = "OFI tagged send sync failed";
-static const char short_gen856[] = "**op";
-static const char long_gen856[]  = "Invalid MPI_Op";
-static const char short_gen857[] = "**openportfailed";
-static const char long_gen857[]  = "Unable to establish a port";
-static const char short_gen858[] = "**opnotallowed";
-static const char long_gen858[]  = "MPI_Op operation is not allowed in this routine";
-static const char short_gen859[] = "**opnotpredefined";
-static const char long_gen859[]  = "only predefined ops are valid";
-static const char short_gen860[] = "**opnull";
-static const char long_gen860[]  = "Null MPI_Op";
-static const char short_gen861[] = "**opundefined";
-static const char long_gen861[]  = "MPI_Op operation not defined for this datatype ";
-static const char short_gen862[] = "**oremote_fail";
-static const char long_gen862[]  = "open failed on a remote node";
-static const char short_gen863[] = "**other";
-static const char long_gen863[]  = "Other MPI error";
-static const char short_gen864[] = "**outofstream";
-static const char long_gen864[]  = "No streams available. Use MPIR_CVAR_CH4_RESERVE_VCIS to reserve the number of streams can be allocated.";
-static const char short_gen865[] = "**parse_thread_affinity";
-static const char long_gen865[]  = "Failed to parse async thread affinity string";
-static const char short_gen866[] = "**partitioninvalid";
-static const char long_gen866[]  = " Invalid partition";
-static const char short_gen867[] = "**pending";
-static const char long_gen867[]  = "Pending request (no error)";
-static const char short_gen868[] = "**permattr";
-static const char long_gen868[]  = "Cannot set permanent attribute";
-static const char short_gen869[] = "**permop";
-static const char long_gen869[]  = "Cannot free permanent MPI_Op ";
-static const char short_gen870[] = "**pglookup";
-static const char long_gen870[]  = "unable to find the process group structure";
-static const char short_gen871[] = "**pmi2_info_getjobattr";
-static const char long_gen871[]  = " PMI2_Info_GetJobAttr failed";
-static const char short_gen872[] = "**pmi_barrier";
-static const char long_gen872[]  = "PMI_Barrier failed";
-static const char short_gen873[] = "**pmi_get_appnum";
-static const char long_gen873[]  = "PMI_Get_appnum failed";
-static const char short_gen874[] = "**pmi_get_rank";
-static const char long_gen874[]  = "PMI_Get_rank failed";
-static const char short_gen875[] = "**pmi_get_size";
-static const char long_gen875[]  = "PMI_Get_size failed";
-static const char short_gen876[] = "**pmi_get_universe_size";
-static const char long_gen876[]  = "PMI_Get_universe_size failed";
-static const char short_gen877[] = "**pmi_getjobattr";
-static const char long_gen877[]  = " PMI2 GetJobAttr failed";
-static const char short_gen878[] = "**pmi_getnodeattr";
-static const char long_gen878[]  = " PMI2 GetNodeAttr failed";
-static const char short_gen879[] = "**pmi_init";
-static const char long_gen879[]  = "PMI_Init failed";
-static const char short_gen880[] = "**pmi_job_getid";
-static const char long_gen880[]  = "PMI2_Job_GetId failed";
-static const char short_gen881[] = "**pmi_kvs_commit";
-static const char long_gen881[]  = "PMI_KVS_Commit failed";
-static const char short_gen882[] = "**pmi_kvs_get";
-static const char long_gen882[]  = "PMI_KVS_Get failed";
-static const char short_gen883[] = "**pmi_kvs_get_key_length_max";
-static const char long_gen883[]  = "PMI_KVS_Get_key_length_max failed";
-static const char short_gen884[] = "**pmi_kvs_get_my_name";
-static const char long_gen884[]  = "PMI_KVS_Get_my_name failed";
-static const char short_gen885[] = "**pmi_kvs_get_name_length_max";
-static const char long_gen885[]  = "PMI_KVS_Get_name_length_max failed";
-static const char short_gen886[] = "**pmi_kvs_get_value_length_max";
-static const char long_gen886[]  = "PMI_KVS_Get_value_length_max failed";
-static const char short_gen887[] = "**pmi_kvs_put";
-static const char long_gen887[]  = "PMI_KVS_Put failed";
-static const char short_gen888[] = "**pmi_kvsfence";
-static const char long_gen888[]  = " PMI2 KVS_Fence failed";
-static const char short_gen889[] = "**pmi_kvsget";
-static const char long_gen889[]  = " PMI2 KVS_Get failed";
-static const char short_gen890[] = "**pmi_kvsput";
-static const char long_gen890[]  = " PMI2 KVS_Put failed";
-static const char short_gen891[] = "**pmi_putnodeattr";
-static const char long_gen891[]  = " PMI2 PutNodeAttr failed";
-static const char short_gen892[] = "**pmi_spawn_multiple";
-static const char long_gen892[]  = "PMI_Spawn_multiple failed";
-static const char short_gen893[] = "**pmix_commit";
-static const char long_gen893[]  = "PMIx_Commit failed";
-static const char short_gen894[] = "**pmix_fence";
-static const char long_gen894[]  = "PMIx_Fence failed";
-static const char short_gen895[] = "**pmix_get";
-static const char long_gen895[]  = "PMIx_Get failed";
-static const char short_gen896[] = "**pmix_init";
-static const char long_gen896[]  = "PMIX_Init failed";
-static const char short_gen897[] = "**pmix_put";
-static const char long_gen897[]  = "PMIx_Put failed";
-static const char short_gen898[] = "**pmix_resolve_nodes";
-static const char long_gen898[]  = " PMIx_Resolve_nodes failed";
-static const char short_gen899[] = "**pmix_resolve_peers";
-static const char long_gen899[]  = " PMIx_Resolve_peers failed";
-static const char short_gen900[] = "**poll";
-static const char long_gen900[]  = "poll of socket fds failed";
-static const char short_gen901[] = "**port";
-static const char long_gen901[]  = "Invalid port";
-static const char short_gen902[] = "**portexist";
-static const char long_gen902[]  = "Named port does not exist";
-static const char short_gen903[] = "**predeferrclass";
-static const char long_gen903[]  = "Predefined error class given";
-static const char short_gen904[] = "**predeferrcode";
-static const char long_gen904[]  = "Predefined error code given";
-static const char short_gen905[] = "**proc_failed";
-static const char long_gen905[]  = "Process failed";
-static const char short_gen906[] = "**procnamefailed";
-static const char long_gen906[]  = "Failed to get processor name";
-static const char short_gen907[] = "**progress_sock_wait";
-static const char long_gen907[]  = "sock_wait failed";
-static const char short_gen908[] = "**progresshookstoomany";
-static const char long_gen908[]  = " too many progress hooks are registered";
-static const char short_gen909[] = "**psetinvalidn";
-static const char long_gen909[]  = "Invalid pset number";
-static const char short_gen910[] = "**psetinvalidname";
-static const char long_gen910[]  = "Invalid pset name";
-static const char short_gen911[] = "**pthread_mutex";
-static const char long_gen911[]  = "pthread mutex routine failed";
-static const char short_gen912[] = "**putenv";
-static const char long_gen912[]  = "putenv failed";
-static const char short_gen913[] = "**qmpi_invalid_name";
-static const char long_gen913[]  = " tool name is invalid";
-static const char short_gen914[] = "**rangedup";
-static const char long_gen914[]  = "The range array specifies duplicate entries";
-static const char short_gen915[] = "**rangeendinvalid";
-static const char long_gen915[]  = "Some element of a range array is either negative or too large";
-static const char short_gen916[] = "**rangestartinvalid";
-static const char long_gen916[]  = "Some element of a range array is either negative or too large";
-static const char short_gen917[] = "**rank";
-static const char long_gen917[]  = "Invalid rank";
-static const char short_gen918[] = "**rankarray";
-static const char long_gen918[]  = "Invalid rank in rank array";
-static const char short_gen919[] = "**rankdup";
-static const char long_gen919[]  = "Duplicate ranks in rank array ";
-static const char short_gen920[] = "**ranklocal";
-static const char long_gen920[]  = "Error specifying local_leader ";
-static const char short_gen921[] = "**rankremote";
-static const char long_gen921[]  = "Error specifying remote_leader ";
-static const char short_gen922[] = "**ranksdistinct";
-static const char long_gen922[]  = "Local and remote leaders must be different processes";
-static const char short_gen923[] = "**read";
-static const char long_gen923[]  = "read from socket failed";
-static const char short_gen924[] = "**recvbuf_inplace";
-static const char long_gen924[]  = "recvbuf cannot be MPI_IN_PLACE";
-static const char short_gen925[] = "**remove_shar_mem";
-static const char long_gen925[]  = "unable to remove shared memory";
-static const char short_gen926[] = "**reqnotmsg";
-static const char long_gen926[]  = " Invalid MPI_Message (MPI_Request passed)";
-static const char short_gen927[] = "**request";
-static const char long_gen927[]  = "Invalid MPI_Request";
-static const char short_gen928[] = "**request_invalid_kind";
-static const char long_gen928[]  = "The supplied request was invalid";
-static const char short_gen929[] = "**requestinvalidparrived";
-static const char long_gen929[]  = " Invalid or inactive partitioned receive request passed to MPI_Parrived.";
-static const char short_gen930[] = "**requestinvalidpready";
-static const char long_gen930[]  = " Invalid or inactive partitioned send request passed to MPI_Pready, MPI_Pready_range or MPI_Pready_list.";
-static const char short_gen931[] = "**requestinvalidstart";
-static const char long_gen931[]  = "Request is neither persistent nor partitioned in MPI_Start or MPI_Startall.";
-static const char short_gen932[] = "**requestnull";
-static const char long_gen932[]  = "Null MPI_Request ";
-static const char short_gen933[] = "**requestpartactive";
-static const char long_gen933[]  = "Partitioned request passed to MPI_Start or MPI_Startall is already active.";
-static const char short_gen934[] = "**requestpersistactive";
-static const char long_gen934[]  = "Persistent request passed to MPI_Start or MPI_Startall is already active.";
-static const char short_gen935[] = "**revoked";
-static const char long_gen935[]  = "Communication object revoked";
-static const char short_gen936[] = "**rmaattach";
-static const char long_gen936[]  = "Memory cannot be attached";
-static const char short_gen937[] = "**rmaconflict";
-static const char long_gen937[]  = "Conflicting accesses to window ";
-static const char short_gen938[] = "**rmadisp";
-static const char long_gen938[]  = "Invalid displacement argument in RMA call ";
-static const char short_gen939[] = "**rmaflavor";
-static const char long_gen939[]  = "Incorrect window flavor";
-static const char short_gen940[] = "**rmarange";
-static const char long_gen940[]  = "Target memory is not contained within the window";
-static const char short_gen941[] = "**rmashared";
-static const char long_gen941[]  = "Memory cannot be shared";
-static const char short_gen942[] = "**rmasize";
-static const char long_gen942[]  = "Invalid size argument in RMA call";
-static const char short_gen943[] = "**rmasync";
-static const char long_gen943[]  = "Wrong synchronization of RMA calls ";
-static const char short_gen944[] = "**rmatypenotatomic";
-static const char long_gen944[]  = " Datatype not permitted for atomic operations";
-static const char short_gen945[] = "**root";
-static const char long_gen945[]  = "Invalid root";
-static const char short_gen946[] = "**rsendnomatch";
-static const char long_gen946[]  = "Ready send had no matching receive ";
-static const char short_gen947[] = "**rtspkt";
-static const char long_gen947[]  = "failure occurred while attempting to send RTS packet";
-static const char short_gen948[] = "**sem_destroy";
-static const char long_gen948[]  = "sem_destroy() failed";
-static const char short_gen949[] = "**sem_init";
-static const char long_gen949[]  = "sem_init() failed";
-static const char short_gen950[] = "**sem_post";
-static const char long_gen950[]  = "sem_post() failed";
-static const char short_gen951[] = "**sem_wait";
-static const char long_gen951[]  = "sem_wait() failed";
-static const char short_gen952[] = "**sendbuf_inplace";
-static const char long_gen952[]  = "sendbuf cannot be MPI_IN_PLACE";
-static const char short_gen953[] = "**servicename";
-static const char long_gen953[]  = "Attempt to lookup an unknown service name ";
-static const char short_gen954[] = "**session";
-static const char long_gen954[]  = "Invalid MPI_Session handle";
-static const char short_gen955[] = "**sessionnull";
-static const char long_gen955[]  = " NULL MPI_Session";
-static const char short_gen956[] = "**set_thread_affinity";
-static const char long_gen956[]  = "Failed to set the async thread affinity";
-static const char short_gen957[] = "**signal";
-static const char long_gen957[]  = "signal() failed";
-static const char short_gen958[] = "**snprintf";
-static const char long_gen958[]  = "snprintf returned an invalid number";
-static const char short_gen959[] = "**sock_accept";
-static const char long_gen959[]  = "accept of socket fd failed";
-static const char short_gen960[] = "**sock_closed";
-static const char long_gen960[]  = "socket closed";
-static const char short_gen961[] = "**sock_connect";
-static const char long_gen961[]  = "connect failed";
-static const char short_gen962[] = "**sock_create";
-static const char long_gen962[]  = "unable to create a socket";
-static const char short_gen963[] = "**sock_gethost";
-static const char long_gen963[]  = "gethostname failed";
-static const char short_gen964[] = "**sock_post_close";
-static const char long_gen964[]  = "posting a close of the socket failed";
-static const char short_gen965[] = "**sockaddrfailed";
-static const char long_gen965[]  = " MPL_get_sockaddr failed";
-static const char short_gen966[] = "**sock|badbuf";
-static const char long_gen966[]  = "the supplied buffer contains invalid memory";
-static const char short_gen967[] = "**sock|badhandle";
-static const char long_gen967[]  = "sock contains an invalid handle";
-static const char short_gen968[] = "**sock|badhdbuf";
-static const char long_gen968[]  = "a memory fault occurred while accessing the host description string";
-static const char short_gen969[] = "**sock|badhdlen";
-static const char long_gen969[]  = "host description string to small to store description";
-static const char short_gen970[] = "**sock|badhdmax";
-static const char long_gen970[]  = "the length of the host description string must be non-negative";
-static const char short_gen971[] = "**sock|badiovn";
-static const char long_gen971[]  = "size of iov is invalid";
-static const char short_gen972[] = "**sock|badlen";
-static const char long_gen972[]  = "bad length parameter(s)";
-static const char short_gen973[] = "**sock|badport";
-static const char long_gen973[]  = "port number is out of range";
-static const char short_gen974[] = "**sock|badsock";
-static const char long_gen974[]  = "supplied sock is corrupt";
-static const char short_gen975[] = "**sock|closing";
-static const char long_gen975[]  = "sock is in the process of being closed locally";
-static const char short_gen976[] = "**sock|closing_already";
-static const char long_gen976[]  = "a close operation is already posted";
-static const char short_gen977[] = "**sock|connclosed";
-static const char long_gen977[]  = "connection closed by peer";
-static const char short_gen978[] = "**sock|connfailed";
-static const char long_gen978[]  = "connection failure";
-static const char short_gen979[] = "**sock|connrefused";
-static const char long_gen979[]  = "connection refused";
-static const char short_gen980[] = "**sock|listener_bad_sock";
-static const char long_gen980[]  = "supplied sock is not a listener";
-static const char short_gen981[] = "**sock|listener_bad_state";
-static const char long_gen981[]  = "supplied listener sock is in a bad state";
-static const char short_gen982[] = "**sock|listener_read";
-static const char long_gen982[]  = "read operation not allowed on a listener";
-static const char short_gen983[] = "**sock|listener_write";
-static const char long_gen983[]  = "write operation not allowed on a listener";
-static const char short_gen984[] = "**sock|nosock";
-static const char long_gen984[]  = "no new sock was available to accept";
-static const char short_gen985[] = "**sock|notconnected";
-static const char long_gen985[]  = "sock is not connected";
-static const char short_gen986[] = "**sock|oserror";
-static const char long_gen986[]  = "unexpected operating system error";
-static const char short_gen987[] = "**sock|osnomem";
-static const char long_gen987[]  = "operating system routine failed due to lack of memory";
-static const char short_gen988[] = "**sock|poll|accept";
-static const char long_gen988[]  = "accept failed to acquire a new socket";
-static const char short_gen989[] = "**sock|poll|bind";
-static const char long_gen989[]  = "unable to bind socket to port";
-static const char short_gen990[] = "**sock|poll|eqfail";
-static const char long_gen990[]  = "fatal error: failed to enqueue an event; event was lost";
-static const char short_gen991[] = "**sock|poll|eqmalloc";
-static const char long_gen991[]  = "MPL_malloc failed to allocate memory for an event queue structure";
-static const char short_gen992[] = "**sock|poll|listen";
-static const char long_gen992[]  = "listen() failed";
-static const char short_gen993[] = "**sock|poll|nodelay";
-static const char long_gen993[]  = "unable to set TCP no delay attribute on socket";
-static const char short_gen994[] = "**sock|poll|nonblock";
-static const char long_gen994[]  = "unable to set socket to nonblocking";
-static const char short_gen995[] = "**sock|poll|pipe";
-static const char long_gen995[]  = "unable to allocate pipe to wakeup a blocking poll()";
-static const char short_gen996[] = "**sock|poll|pipenonblock";
-static const char long_gen996[]  = "unable to set wakeup pipe to nonblocking";
-static const char short_gen997[] = "**sock|poll|reuseaddr";
-static const char long_gen997[]  = "unable to set reuseaddr attribute on socket";
-static const char short_gen998[] = "**sock|poll|setrcvbufsz";
-static const char long_gen998[]  = " unable to set the receive socket buffer size";
-static const char short_gen999[] = "**sock|poll|setsndbufsz";
-static const char long_gen999[]  = " unable to set the send socket buffer size";
-static const char short_gen1000[] = "**sock|poll|socket";
-static const char long_gen1000[]  = "unable to obtain new socket";
-static const char short_gen1001[] = "**sock|poll|unhandledstate";
-static const char long_gen1001[]  = "encountered an unexpected state";
-static const char short_gen1002[] = "**sock|poll|unhandledtype";
-static const char long_gen1002[]  = "encountered an unexpected sock type";
-static const char short_gen1003[] = "**sock|reads";
-static const char long_gen1003[]  = "attempt to perform multiple simultaneous reads";
-static const char short_gen1004[] = "**sock|setalloc";
-static const char long_gen1004[]  = "unable to allocate a new sock set object";
-static const char short_gen1005[] = "**sock|sockalloc";
-static const char long_gen1005[]  = "unable to allocate a new sock object";
-static const char short_gen1006[] = "**sock|uninit";
-static const char long_gen1006[]  = "Sock library has not been initialized";
-static const char short_gen1007[] = "**sock|writes";
-static const char long_gen1007[]  = "attempt to perform multiple simultaneous writes";
-static const char short_gen1008[] = "**spawn";
-static const char long_gen1008[]  = "Error in spawn call";
-static const char short_gen1009[] = "**splittype";
-static const char long_gen1009[]  = "Invalid split_type argument";
-static const char short_gen1010[] = "**storageorder";
-static const char long_gen1010[]  = "Invalid storage order";
-static const char short_gen1011[] = "**streamcomm_dstidx";
-static const char long_gen1011[]  = "The destination stream index exceeds the number of streams.";
-static const char short_gen1012[] = "**streamcomm_notmult";
-static const char long_gen1012[]  = "The communicator is not a multiplex stream communicator.";
-static const char short_gen1013[] = "**streamcomm_srcidx";
-static const char long_gen1013[]  = "The source stream index exceeds the number of streams.";
-static const char short_gen1014[] = "**stride";
-static const char long_gen1014[]  = "Range does not terminate";
-static const char short_gen1015[] = "**stridezero";
-static const char long_gen1015[]  = "Zero stride is invalid";
-static const char short_gen1016[] = "**success";
-static const char long_gen1016[]  = "No MPI error";
-static const char short_gen1017[] = "**tag";
-static const char long_gen1017[]  = "Invalid tag";
-static const char short_gen1018[] = "**tcp_cleanup_fail";
-static const char long_gen1018[]  = "Error while cleaning up failed connection";
-static const char short_gen1019[] = "**thread_level";
-static const char long_gen1019[]  = " Invalid thread level";
-static const char short_gen1020[] = "**timeout";
-static const char long_gen1020[]  = "Operation timed out";
-static const char short_gen1021[] = "**tmpvc_connect_fail";
-static const char long_gen1021[]  = "Failure during connection protocol";
-static const char short_gen1022[] = "**too_big_for_input";
-static const char long_gen1022[]  = "The input is too big for internal routines";
-static const char short_gen1023[] = "**toomanycomm";
-static const char long_gen1023[]  = "Too many communicators";
-static const char short_gen1024[] = "**toomanycommfrag";
-static const char long_gen1024[]  = " Cannot allocate context ID because of fragmentation";
-static const char short_gen1025[] = "**toomanynbc";
-static const char long_gen1025[]  = " too many outstanding nonblocking collectives detected";
-static const char short_gen1026[] = "**topology";
-static const char long_gen1026[]  = "Invalid topology";
-static const char short_gen1027[] = "**topotoolarge";
-static const char long_gen1027[]  = "Topology size is greater than communicator size";
-static const char short_gen1028[] = "**treetype";
-static const char long_gen1028[]  = " Invalid tree type used for initializing Tree algorithms";
-static const char short_gen1029[] = "**truncate";
-static const char long_gen1029[]  = "Message truncated";
-static const char short_gen1030[] = "**typeinitbadmem";
-static const char long_gen1030[]  = "builtin datatype handle references invalid memory";
-static const char short_gen1031[] = "**typematchnoclass";
-static const char long_gen1031[]  = "The value of typeclass is not one of MPI_TYPECLASS_REAL, MPI_TYPECLASS_INTEGER, or MPI_TYPECLASS_COMPLEX";
-static const char short_gen1032[] = "**typematchsize";
-static const char long_gen1032[]  = "No MPI datatype available for the given typeclass and size";
-static const char short_gen1033[] = "**typenotpredefined";
-static const char long_gen1033[]  = " Datatype must be predefined";
-static const char short_gen1034[] = "**ucx_nm_notsupported";
-static const char long_gen1034[]  = "The function is currently not supported with ucx netmod";
-static const char short_gen1035[] = "**ucx_nm_rq_error";
-static const char long_gen1035[]  = " return failed request in UCX netmod";
-static const char short_gen1036[] = "**ucx_nm_status";
-static const char long_gen1036[]  = " ucx function returned with failed status";
-static const char short_gen1037[] = "**unknown";
-static const char long_gen1037[]  = "Unknown error.  Please file a bug report.";
-static const char short_gen1038[] = "**unknowngpid";
-static const char long_gen1038[]  = "Internal MPI error: Unknown gpid";
-static const char short_gen1039[] = "**unsupporteddatarep";
-static const char long_gen1039[]  = "Only native data representation currently supported";
-static const char short_gen1040[] = "**unweightedboth";
-static const char long_gen1040[]  = "Must specify MPI_UNWEIGHTED for both or neither weight arguments";
-static const char short_gen1041[] = "**user";
-static const char long_gen1041[]  = "user defined function returned an error code";
-static const char short_gen1042[] = "**vc_in_error_state";
-static const char long_gen1042[]  = "Connection is in error state";
-static const char short_gen1043[] = "**win";
-static const char long_gen1043[]  = "Invalid MPI_Win";
-static const char short_gen1044[] = "**winInvalidOp";
-static const char long_gen1044[]  = " Invalid RMA operation";
-static const char short_gen1045[] = "**windows_mutex";
-static const char long_gen1045[]  = "Windows mutex routine failed";
-static const char short_gen1046[] = "**winflavor";
-static const char long_gen1046[]  = " Window flavor is not compatible with the given operation";
-static const char short_gen1047[] = "**winnoprogress";
-static const char long_gen1047[]  = " Detected an error while in progress wait for RMA messages";
-static const char short_gen1048[] = "**winnull";
-static const char long_gen1048[]  = "Null MPI_Win";
-static const char short_gen1049[] = "**write";
-static const char long_gen1049[]  = "write failed";
-static const char short_gen1050[] = "**writev";
-static const char long_gen1050[]  = "writev failed";
-static const char short_gen1051[] = "**xpmem_attach";
-static const char long_gen1051[]  = " xpmem_attach failed";
-static const char short_gen1052[] = "**xpmem_get";
-static const char long_gen1052[]  = " xpmem_get failed";
-static const char short_gen1053[] = "**xpmem_make";
-static const char long_gen1053[]  = " xpmem_make failed";
-static const char short_gen1054[] = "**xpmem_release";
-static const char long_gen1054[]  = " xpmem_release failed";
-static const char short_gen1055[] = "**xpmem_remove";
-static const char long_gen1055[]  = " xpmem_remove failed";
-static const char short_gen1056[] = "**xpmem_segid";
-static const char long_gen1056[]  = " xpmem remote segid is unset";
-static const char short_gen1057[] = "**xpmem_segtree_init";
-static const char long_gen1057[]  = " xpmem_segtree_init failed";
-static const char short_gen1058[] = "**yaksa";
-static const char long_gen1058[]  = "Yaksa library returned an error";
+static const char short_gen119[] = "**cvar_val";
+static const char long_gen119[]  = "Invalid CVAR value";
+static const char short_gen120[] = "**darrayblock";
+static const char long_gen120[]  = "Value of m must be positive for block(m) distribution";
+static const char short_gen121[] = "**darrayblock2";
+static const char long_gen121[]  = "m * nprocs is less than array_size and is not valid for block(m) distribution (optional arguments: {m*nprocs}, {array_size} (int))";
+static const char short_gen122[] = "**darraycyclic";
+static const char long_gen122[]  = "Value of m must be positive for a cyclic(m) distribution";
+static const char short_gen123[] = "**datarepextent";
+static const char long_gen123[]  = "Invalid extent callback";
+static const char short_gen124[] = "**datarepname";
+static const char long_gen124[]  = "Invalid datarep name";
+static const char short_gen125[] = "**datarepunsupported";
+static const char long_gen125[]  = "Unsupported datarep passed to MPI_File_set_view ";
+static const char short_gen126[] = "**datarepused";
+static const char long_gen126[]  = "The requested datarep name has already been specified to MPI_REGISTER_DATAREP";
+static const char short_gen127[] = "**detach_shar_mem";
+static const char long_gen127[]  = "unable to detach shared memory";
+static const char short_gen128[] = "**dev|pg_create";
+static const char long_gen128[]  = "unable to create a new process group";
+static const char short_gen129[] = "**dev|pg_finalize|list_not_empty";
+static const char long_gen129[]  = "process group list was not empty";
+static const char short_gen130[] = "**dev|pg_init";
+static const char long_gen130[]  = "unable to initialize the process group management module";
+static const char short_gen131[] = "**dev|pg_not_found";
+static const char long_gen131[]  = "the specified process group object could not be located";
+static const char short_gen132[] = "**dev|selfsenddeadlock";
+static const char long_gen132[]  = "DEADLOCK: attempting to send a message to the local process without a prior matching receive";
+static const char short_gen133[] = "**dev|vcrt_create";
+static const char long_gen133[]  = "failed to a create VCRT";
+static const char short_gen134[] = "**dims";
+static const char long_gen134[]  = "Invalid dimension argument";
+static const char short_gen135[] = "**dimsmany";
+static const char long_gen135[]  = "Number of dimensions is too large ";
+static const char short_gen136[] = "**dimspartition";
+static const char long_gen136[]  = "Cannot partition nodes as requested ";
+static const char short_gen137[] = "**dimszero";
+static const char long_gen137[]  = "Communicator associated with zero-dimensional cartesian topology";
+static const char short_gen138[] = "**dispunit";
+static const char long_gen138[]  = "disp_unit argument is not positive integer";
+static const char short_gen139[] = "**donepkt";
+static const char long_gen139[]  = "failure occurred while attempting to send DONE packet";
+static const char short_gen140[] = "**drconvnotsupported";
+static const char long_gen140[]  = "Read and Write datarep conversions are currently not supported by MPI-IO";
+static const char short_gen141[] = "**dtype";
+static const char long_gen141[]  = "Invalid datatype";
+static const char short_gen142[] = "**dtypecommit";
+static const char long_gen142[]  = "Datatype has not been committed ";
+static const char short_gen143[] = "**dtypemismatch";
+static const char long_gen143[]  = "Receiving data with a datatype whose signature does not match that of the sending datatype.";
+static const char short_gen144[] = "**dtypenull";
+static const char long_gen144[]  = "Null datatype";
+static const char short_gen145[] = "**dtypeperm";
+static const char long_gen145[]  = "Cannot free permanent data type ";
+static const char short_gen146[] = "**dupprocesses";
+static const char long_gen146[]  = "Local and remote groups in MPI_Intercomm_create must not contain the same processes";
+static const char short_gen147[] = "**dynamic_node_ids";
+static const char long_gen147[]  = " Node information for dynamic processes currently is not implemented";
+static const char short_gen148[] = "**eagain";
+static const char long_gen148[]  = "Operation could not be issued (EAGAIN)";
+static const char short_gen149[] = "**edgeoutrange";
+static const char long_gen149[]  = "Edge index in graph topology is out of range";
+static const char short_gen150[] = "**envvarparse";
+static const char long_gen150[]  = "Unable to parse environment variable";
+static const char short_gen151[] = "**errhandler";
+static const char long_gen151[]  = "Invalid errhandler";
+static const char short_gen152[] = "**errhandlernull";
+static const char long_gen152[]  = "Null errhandler ";
+static const char short_gen153[] = "**errhandnotfile";
+static const char long_gen153[]  = "Error handler is not a file error handler";
+static const char short_gen154[] = "**errhandnotsession";
+static const char long_gen154[]  = "Error handler is not a session error handler";
+static const char short_gen155[] = "**errhandnotwin";
+static const char long_gen155[]  = "Error handler is not a win error handler";
+static const char short_gen156[] = "**exceeded_connect_tries";
+static const char long_gen156[]  = "Unable to establish connection to process";
+static const char short_gen157[] = "**f90typecomplexnone";
+static const char long_gen157[]  = " No complex type with the requested range and/or precision is available";
+static const char short_gen158[] = "**f90typeintnone";
+static const char long_gen158[]  = " No integer type with the requested range is available";
+static const char short_gen159[] = "**f90typerealnone";
+static const char long_gen159[]  = " No real type with the requested range and/or precision is available";
+static const char short_gen160[] = "**f90typetoomany";
+static const char long_gen160[]  = "Too many requests for unnamed, predefined f90 types";
+static const char short_gen161[] = "**fail";
+static const char long_gen161[]  = "";
+static const char short_gen162[] = "**failure_pending";
+static const char long_gen162[]  = "Request pending due to failure";
+static const char short_gen163[] = "**file";
+static const char long_gen163[]  = "Invalid MPI_File";
+static const char short_gen164[] = "**fileaccess";
+static const char long_gen164[]  = "Access denied to file";
+static const char short_gen165[] = "**fileamode";
+static const char long_gen165[]  = "Invalid amode value in MPI_File_open ";
+static const char short_gen166[] = "**fileamodediff";
+static const char long_gen166[]  = "amode must be the same on all processors";
+static const char short_gen167[] = "**fileamodeone";
+static const char long_gen167[]  = "Exactly one of MPI_MODE_RDONLY, MPI_MODE_WRONLY, or MPI_MODE_RDWR must be specified";
+static const char short_gen168[] = "**fileamoderead";
+static const char long_gen168[]  = "Cannot use MPI_MODE_CREATE or MPI_MODE_EXCL with MPI_MODE_RDONLY ";
+static const char short_gen169[] = "**fileamodeseq";
+static const char long_gen169[]  = "Cannot specify MPI_MODE_SEQUENTIAL with MPI_MODE_RDWR";
+static const char short_gen170[] = "**fileexist";
+static const char long_gen170[]  = "File exists";
+static const char short_gen171[] = "**fileinuse";
+static const char long_gen171[]  = "File in use by some process";
+static const char short_gen172[] = "**filename";
+static const char long_gen172[]  = "Invalid file name";
+static const char short_gen173[] = "**filenamedir";
+static const char long_gen173[]  = "Invalid or missing directory";
+static const char short_gen174[] = "**filenamelong";
+static const char long_gen174[]  = "Pathname too long";
+static const char short_gen175[] = "**filenoexist";
+static const char long_gen175[]  = "File does not exist";
+static const char short_gen176[] = "**filenospace";
+static const char long_gen176[]  = "Not enough space for file ";
+static const char short_gen177[] = "**fileopunsupported";
+static const char long_gen177[]  = "Unsupported file operation ";
+static const char short_gen178[] = "**filequota";
+static const char long_gen178[]  = "Quota exceeded for files";
+static const char short_gen179[] = "**filerdonly";
+static const char long_gen179[]  = "Read-only file or filesystem name";
+static const char short_gen180[] = "**flag";
+static const char long_gen180[]  = "invalid flag parameter";
+static const char short_gen181[] = "**gethostbyname";
+static const char long_gen181[]  = "gethostbyname failed";
+static const char short_gen182[] = "**getsockname";
+static const char long_gen182[]  = "getsockname failed";
+static const char short_gen183[] = "**gpu_enqueue_noncontig";
+static const char long_gen183[]  = "Non-contig datatype not supported due to missing TLS.";
+static const char short_gen184[] = "**gpu_finalize";
+static const char long_gen184[]  = " gpu_finalize failed";
+static const char short_gen185[] = "**gpu_get_buffer_info";
+static const char long_gen185[]  = " gpu_get_buffer_info failed";
+static const char short_gen186[] = "**gpu_get_dev_count";
+static const char long_gen186[]  = " gpu_get_dev_count failed";
+static const char short_gen187[] = "**gpu_init";
+static const char long_gen187[]  = " gpu_init failed";
+static const char short_gen188[] = "**gpu_ipc_handle_create";
+static const char long_gen188[]  = " gpu_ipc_handle_create failed";
+static const char short_gen189[] = "**gpu_ipc_handle_map";
+static const char long_gen189[]  = " gpu_ipc_handle_map failed";
+static const char short_gen190[] = "**gpu_ipc_handle_unmap";
+static const char long_gen190[]  = " gpu_ipc_handle_unmap failed";
+static const char short_gen191[] = "**gpu_query_ptr";
+static const char long_gen191[]  = " gpu_query_pointer_attr failed";
+static const char short_gen192[] = "**graphnnodes";
+static const char long_gen192[]  = "Number of graph nodes exceeds size of communicator.";
+static const char short_gen193[] = "**group";
+static const char long_gen193[]  = "Invalid group";
+static const char short_gen194[] = "**groupnotincomm";
+static const char long_gen194[]  = "Specified group is not within the communicator";
+static const char short_gen195[] = "**groupnull";
+static const char long_gen195[]  = "Null group";
+static const char short_gen196[] = "**groupperm";
+static const char long_gen196[]  = "Cannot free permanent group";
+static const char short_gen197[] = "**hcoll_wrong_arg";
+static const char long_gen197[]  = "Error in hcolrte api: wrong null argument";
+static const char short_gen198[] = "**iface_notfound";
+static const char long_gen198[]  = "The network interface specified in MPIR_CVAR_CH3_NETWORK_IFACE was not found.";
+static const char short_gen199[] = "**ifname_and_hostname";
+static const char long_gen199[]  = "Only one of MPIR_CVAR_CH3_INTERFACE_HOSTNAME and MPIR_CVAR_CH3_NETWORK_IFACE environment variables are allowed, but both were set.";
+static const char short_gen200[] = "**ifnameinvalid";
+static const char long_gen200[]  = "Interface name was invalid in call to inet_pton";
+static const char short_gen201[] = "**indexneg";
+static const char long_gen201[]  = "Index value in graph topology must be nonnegative";
+static const char short_gen202[] = "**indexnonmonotone";
+static const char long_gen202[]  = "Index values in graph topology must be monotone nondecreasing";
+static const char short_gen203[] = "**info";
+static const char long_gen203[]  = "Invalid MPI_Info";
+static const char short_gen204[] = "**infohexinvalid";
+static const char long_gen204[]  = "MPI_Info key value is invalid";
+static const char short_gen205[] = "**infokey";
+static const char long_gen205[]  = "Invalid key for MPI_Info ";
+static const char short_gen206[] = "**infokeyempty";
+static const char long_gen206[]  = "Empty or blank key ";
+static const char short_gen207[] = "**infokeylong";
+static const char long_gen207[]  = "Key is too long";
+static const char short_gen208[] = "**infokeynull";
+static const char long_gen208[]  = "Null key";
+static const char short_gen209[] = "**infonkey";
+static const char long_gen209[]  = "Requested nth key does not exist";
+static const char short_gen210[] = "**infonokey";
+static const char long_gen210[]  = "MPI_Info key is not defined ";
+static const char short_gen211[] = "**infonoteq";
+static const char long_gen211[]  = "MPI_Info key value are not consistent for all processes";
+static const char short_gen212[] = "**infonull";
+static const char long_gen212[]  = "Null MPI_Info ";
+static const char short_gen213[] = "**infoval";
+static const char long_gen213[]  = "Invalid MPI_Info value ";
+static const char short_gen214[] = "**infovallong";
+static const char long_gen214[]  = "Value is too long ";
+static const char short_gen215[] = "**init_buscard";
+static const char long_gen215[]  = "failed to get my business card";
+static const char short_gen216[] = "**init_progress";
+static const char long_gen216[]  = "progress_init failed";
+static const char short_gen217[] = "**init_vcrt";
+static const char long_gen217[]  = "failed to create VCRT";
+static const char short_gen218[] = "**initialized";
+static const char long_gen218[]  = "MPI not initialized. Call MPI_Init or MPI_Init_thread first";
+static const char short_gen219[] = "**inittwice";
+static const char long_gen219[]  = "Cannot call MPI_INIT or MPI_INIT_THREAD more than once";
+static const char short_gen220[] = "**instatus";
+static const char long_gen220[]  = "See the MPI_ERROR field in MPI_Status for the error code";
+static const char short_gen221[] = "**intern";
+static const char long_gen221[]  = "Internal MPI error!";
+static const char short_gen222[] = "**invalid_handle";
+static const char long_gen222[]  = "invalid handle";
+static const char short_gen223[] = "**invalid_netmod";
+static const char long_gen223[]  = "Invalid netmod specified";
+static const char short_gen224[] = "**invalid_refcount";
+static const char long_gen224[]  = "invalid reference count";
+static const char short_gen225[] = "**invalidgpustream";
+static const char long_gen225[]  = "Info hint 'type' is set, but info hint 'value' is invalid.";
+static const char short_gen226[] = "**invalidmembind";
+static const char long_gen226[]  = " Invalid bind object identifier.";
+static const char short_gen227[] = "**invalidpkt";
+static const char long_gen227[]  = " Invalid packet type";
+static const char short_gen228[] = "**io";
+static const char long_gen228[]  = "Other I/O error ";
+static const char short_gen229[] = "**ioRMWrdwr";
+static const char long_gen229[]  = "Must open file with MPI_MODE_RDWR for read-modify-write";
+static const char short_gen230[] = "**ioagnomatch";
+static const char long_gen230[]  = "No aggregators match";
+static const char short_gen231[] = "**ioamodeseq";
+static const char long_gen231[]  = "Cannot use this function when the file is opened with amode MPI_MODE_SEQUENTIAL ";
+static const char short_gen232[] = "**iobadcount";
+static const char long_gen232[]  = "Invalid count argument";
+static const char short_gen233[] = "**iobaddisp";
+static const char long_gen233[]  = "Invalid displacement argument";
+static const char short_gen234[] = "**iobadfh";
+static const char long_gen234[]  = "Invalid file handle";
+static const char short_gen235[] = "**iobadoffset";
+static const char long_gen235[]  = "Invalid offset argument";
+static const char short_gen236[] = "**iobadoverlap";
+static const char long_gen236[]  = " write voilates monotonically non-decreasing";
+static const char short_gen237[] = "**iobadsize";
+static const char long_gen237[]  = "Invalid size argument";
+static const char short_gen238[] = "**iobadwhence";
+static const char long_gen238[]  = "Invalid whence argument";
+static const char short_gen239[] = "**iodatarepnomem";
+static const char long_gen239[]  = "User must allocate memory for datarep";
+static const char short_gen240[] = "**iodispifseq";
+static const char long_gen240[]  = "disp must be set to MPI_DISPLACEMENT_CURRENT since file was opened with MPI_MODE_SEQUENTIAL";
+static const char short_gen241[] = "**ioetype";
+static const char long_gen241[]  = "Only an integral number of etypes can be accessed";
+static const char short_gen242[] = "**iofiletype";
+static const char long_gen242[]  = "Filetype must be constructed out of one or more etypes";
+static const char short_gen243[] = "**iofstypeunsupported";
+static const char long_gen243[]  = "Specified filesystem is not available";
+static const char short_gen244[] = "**ioneedrd";
+static const char long_gen244[]  = "Read access is required to this file";
+static const char short_gen245[] = "**ionegoffset";
+static const char long_gen245[]  = "Negative offset argument";
+static const char short_gen246[] = "**iopreallocrdwr";
+static const char long_gen246[]  = "Must open file with MPI_MODE_RDWR to preallocate disk space";
+static const char short_gen247[] = "**iordonly";
+static const char long_gen247[]  = "Cannot write to a file opened with amode MPI_MODE_RDONLY";
+static const char short_gen248[] = "**iorsrc";
+static const char long_gen248[]  = "Unable to read from the file as part of a strided read operation";
+static const char short_gen249[] = "**iosequnsupported";
+static const char long_gen249[]  = "MPI_MODE_SEQUENTIAL not supported on this file system";
+static const char short_gen250[] = "**iosharedfailed";
+static const char long_gen250[]  = "Could not access shared file pointer";
+static const char short_gen251[] = "**iosharedunsupported";
+static const char long_gen251[]  = "Shared file pointers not supported";
+static const char short_gen252[] = "**iosplitcoll";
+static const char long_gen252[]  = "Only one active split collective I/O operation is allowed per file handle";
+static const char short_gen253[] = "**iosplitcollnone";
+static const char long_gen253[]  = "No split collective I/O operation is active";
+static const char short_gen254[] = "**iowronly";
+static const char long_gen254[]  = "Cannot read from a file opened with amode MPI_MODE_WRONLY";
+static const char short_gen255[] = "**iowsrc";
+static const char long_gen255[]  = "Unable to read from the file as part of a strided write operation";
+static const char short_gen256[] = "**iowswc";
+static const char long_gen256[]  = "Unable to write to the file as part of a strided write operation";
+static const char short_gen257[] = "**join_portname";
+static const char long_gen257[]  = "local and remote port names are the same";
+static const char short_gen258[] = "**join_recv";
+static const char long_gen258[]  = "recv from the socket failed";
+static const char short_gen259[] = "**join_send";
+static const char long_gen259[]  = "send on the socket failed";
+static const char short_gen260[] = "**keyval";
+static const char long_gen260[]  = "Invalid keyval";
+static const char short_gen261[] = "**keyvalinvalid";
+static const char long_gen261[]  = "Attribute key was MPI_KEYVAL_INVALID";
+static const char short_gen262[] = "**keyvalobj";
+static const char long_gen262[]  = "Keyval was not defined for the supplied object";
+static const char short_gen263[] = "**listen";
+static const char long_gen263[]  = "listen failed";
+static const char short_gen264[] = "**locktype";
+static const char long_gen264[]  = "Invalid locktype argument";
+static const char short_gen265[] = "**memcpyalias";
+static const char long_gen265[]  = "memcpy arguments alias each other";
+static const char short_gen266[] = "**missinggpustream";
+static const char long_gen266[]  = "Info hint 'type' is set, but info hint 'value' is missing.";
+static const char short_gen267[] = "**mpi_abort";
+static const char long_gen267[]  = "MPI_Abort failed";
+static const char short_gen268[] = "**mpi_accumulate";
+static const char long_gen268[]  = "MPI_Accumulate failed";
+static const char short_gen269[] = "**mpi_accumulate_c";
+static const char long_gen269[]  = "MPI_Accumulate_c failed";
+static const char short_gen270[] = "**mpi_add_error_class";
+static const char long_gen270[]  = "MPI_Add_error_class failed";
+static const char short_gen271[] = "**mpi_add_error_code";
+static const char long_gen271[]  = "MPI_Add_error_code failed";
+static const char short_gen272[] = "**mpi_add_error_string";
+static const char long_gen272[]  = "MPI_Add_error_string failed";
+static const char short_gen273[] = "**mpi_allgather";
+static const char long_gen273[]  = "MPI_Allgather failed";
+static const char short_gen274[] = "**mpi_allgather_c";
+static const char long_gen274[]  = "MPI_Allgather_c failed";
+static const char short_gen275[] = "**mpi_allgather_init";
+static const char long_gen275[]  = "MPI_Allgather_init failed";
+static const char short_gen276[] = "**mpi_allgather_init_c";
+static const char long_gen276[]  = "MPI_Allgather_init_c failed";
+static const char short_gen277[] = "**mpi_allgatherv";
+static const char long_gen277[]  = "MPI_Allgatherv failed";
+static const char short_gen278[] = "**mpi_allgatherv_c";
+static const char long_gen278[]  = "MPI_Allgatherv_c failed";
+static const char short_gen279[] = "**mpi_allgatherv_init";
+static const char long_gen279[]  = "MPI_Allgatherv_init failed";
+static const char short_gen280[] = "**mpi_allgatherv_init_c";
+static const char long_gen280[]  = "MPI_Allgatherv_init_c failed";
+static const char short_gen281[] = "**mpi_alloc_mem";
+static const char long_gen281[]  = "MPI_Alloc_mem failed";
+static const char short_gen282[] = "**mpi_allreduce";
+static const char long_gen282[]  = "MPI_Allreduce failed";
+static const char short_gen283[] = "**mpi_allreduce_c";
+static const char long_gen283[]  = "MPI_Allreduce_c failed";
+static const char short_gen284[] = "**mpi_allreduce_init";
+static const char long_gen284[]  = "MPI_Allreduce_init failed";
+static const char short_gen285[] = "**mpi_allreduce_init_c";
+static const char long_gen285[]  = "MPI_Allreduce_init_c failed";
+static const char short_gen286[] = "**mpi_alltoall";
+static const char long_gen286[]  = "MPI_Alltoall failed";
+static const char short_gen287[] = "**mpi_alltoall_c";
+static const char long_gen287[]  = "MPI_Alltoall_c failed";
+static const char short_gen288[] = "**mpi_alltoall_init";
+static const char long_gen288[]  = "MPI_Alltoall_init failed";
+static const char short_gen289[] = "**mpi_alltoall_init_c";
+static const char long_gen289[]  = "MPI_Alltoall_init_c failed";
+static const char short_gen290[] = "**mpi_alltoallv";
+static const char long_gen290[]  = "MPI_Alltoallv failed";
+static const char short_gen291[] = "**mpi_alltoallv_c";
+static const char long_gen291[]  = "MPI_Alltoallv_c failed";
+static const char short_gen292[] = "**mpi_alltoallv_init";
+static const char long_gen292[]  = "MPI_Alltoallv_init failed";
+static const char short_gen293[] = "**mpi_alltoallv_init_c";
+static const char long_gen293[]  = "MPI_Alltoallv_init_c failed";
+static const char short_gen294[] = "**mpi_alltoallw";
+static const char long_gen294[]  = "MPI_Alltoallw failed";
+static const char short_gen295[] = "**mpi_alltoallw_c";
+static const char long_gen295[]  = "MPI_Alltoallw_c failed";
+static const char short_gen296[] = "**mpi_alltoallw_init";
+static const char long_gen296[]  = "MPI_Alltoallw_init failed";
+static const char short_gen297[] = "**mpi_alltoallw_init_c";
+static const char long_gen297[]  = "MPI_Alltoallw_init_c failed";
+static const char short_gen298[] = "**mpi_barrier";
+static const char long_gen298[]  = "MPI_Barrier failed";
+static const char short_gen299[] = "**mpi_barrier_init";
+static const char long_gen299[]  = "MPI_Barrier_init failed";
+static const char short_gen300[] = "**mpi_bcast";
+static const char long_gen300[]  = "MPI_Bcast failed";
+static const char short_gen301[] = "**mpi_bcast_c";
+static const char long_gen301[]  = "MPI_Bcast_c failed";
+static const char short_gen302[] = "**mpi_bcast_init";
+static const char long_gen302[]  = "MPI_Bcast_init failed";
+static const char short_gen303[] = "**mpi_bcast_init_c";
+static const char long_gen303[]  = "MPI_Bcast_init_c failed";
+static const char short_gen304[] = "**mpi_bsend";
+static const char long_gen304[]  = "MPI_Bsend failed";
+static const char short_gen305[] = "**mpi_bsend_c";
+static const char long_gen305[]  = "MPI_Bsend_c failed";
+static const char short_gen306[] = "**mpi_bsend_init";
+static const char long_gen306[]  = "MPI_Bsend_init failed";
+static const char short_gen307[] = "**mpi_bsend_init_c";
+static const char long_gen307[]  = "MPI_Bsend_init_c failed";
+static const char short_gen308[] = "**mpi_buffer_attach";
+static const char long_gen308[]  = "MPI_Buffer_attach failed";
+static const char short_gen309[] = "**mpi_buffer_attach_c";
+static const char long_gen309[]  = "MPI_Buffer_attach_c failed";
+static const char short_gen310[] = "**mpi_buffer_detach";
+static const char long_gen310[]  = "MPI_Buffer_detach failed";
+static const char short_gen311[] = "**mpi_buffer_detach_c";
+static const char long_gen311[]  = "MPI_Buffer_detach_c failed";
+static const char short_gen312[] = "**mpi_cancel";
+static const char long_gen312[]  = "MPI_Cancel failed";
+static const char short_gen313[] = "**mpi_cart_coords";
+static const char long_gen313[]  = "MPI_Cart_coords failed";
+static const char short_gen314[] = "**mpi_cart_create";
+static const char long_gen314[]  = "MPI_Cart_create failed";
+static const char short_gen315[] = "**mpi_cart_get";
+static const char long_gen315[]  = "MPI_Cart_get failed";
+static const char short_gen316[] = "**mpi_cart_map";
+static const char long_gen316[]  = "MPI_Cart_map failed";
+static const char short_gen317[] = "**mpi_cart_rank";
+static const char long_gen317[]  = "MPI_Cart_rank failed";
+static const char short_gen318[] = "**mpi_cart_shift";
+static const char long_gen318[]  = "MPI_Cart_shift failed";
+static const char short_gen319[] = "**mpi_cart_sub";
+static const char long_gen319[]  = "MPI_Cart_sub failed";
+static const char short_gen320[] = "**mpi_cartdim_get";
+static const char long_gen320[]  = "MPI_Cartdim_get failed";
+static const char short_gen321[] = "**mpi_close_port";
+static const char long_gen321[]  = "MPI_Close_port failed";
+static const char short_gen322[] = "**mpi_comm_accept";
+static const char long_gen322[]  = "MPI_Comm_accept failed";
+static const char short_gen323[] = "**mpi_comm_call_errhandler";
+static const char long_gen323[]  = "MPI_Comm_call_errhandler failed";
+static const char short_gen324[] = "**mpi_comm_compare";
+static const char long_gen324[]  = "MPI_Comm_compare failed";
+static const char short_gen325[] = "**mpi_comm_connect";
+static const char long_gen325[]  = "MPI_Comm_connect failed";
+static const char short_gen326[] = "**mpi_comm_create";
+static const char long_gen326[]  = "MPI_Comm_create failed";
+static const char short_gen327[] = "**mpi_comm_create_errhandler";
+static const char long_gen327[]  = "MPI_Comm_create_errhandler failed";
+static const char short_gen328[] = "**mpi_comm_create_from_group";
+static const char long_gen328[]  = "MPI_Comm_create_from_group failed";
+static const char short_gen329[] = "**mpi_comm_create_group";
+static const char long_gen329[]  = "MPI_Comm_create_group failed";
+static const char short_gen330[] = "**mpi_comm_create_keyval";
+static const char long_gen330[]  = "MPI_Comm_create_keyval failed";
+static const char short_gen331[] = "**mpi_comm_delete_attr";
+static const char long_gen331[]  = "MPI_Comm_delete_attr failed";
+static const char short_gen332[] = "**mpi_comm_disconnect";
+static const char long_gen332[]  = "MPI_Comm_disconnect failed";
+static const char short_gen333[] = "**mpi_comm_dup";
+static const char long_gen333[]  = "MPI_Comm_dup failed";
+static const char short_gen334[] = "**mpi_comm_dup_with_info";
+static const char long_gen334[]  = "MPI_Comm_dup_with_info failed";
+static const char short_gen335[] = "**mpi_comm_free";
+static const char long_gen335[]  = "MPI_Comm_free failed";
+static const char short_gen336[] = "**mpi_comm_free_keyval";
+static const char long_gen336[]  = "MPI_Comm_free_keyval failed";
+static const char short_gen337[] = "**mpi_comm_get_attr";
+static const char long_gen337[]  = "MPI_Comm_get_attr failed";
+static const char short_gen338[] = "**mpi_comm_get_errhandler";
+static const char long_gen338[]  = "MPI_Comm_get_errhandler failed";
+static const char short_gen339[] = "**mpi_comm_get_info";
+static const char long_gen339[]  = "MPI_Comm_get_info failed";
+static const char short_gen340[] = "**mpi_comm_get_name";
+static const char long_gen340[]  = "MPI_Comm_get_name failed";
+static const char short_gen341[] = "**mpi_comm_get_parent";
+static const char long_gen341[]  = "MPI_Comm_get_parent failed";
+static const char short_gen342[] = "**mpi_comm_group";
+static const char long_gen342[]  = "MPI_Comm_group failed";
+static const char short_gen343[] = "**mpi_comm_idup";
+static const char long_gen343[]  = "MPI_Comm_idup failed";
+static const char short_gen344[] = "**mpi_comm_idup_with_info";
+static const char long_gen344[]  = "MPI_Comm_idup_with_info failed";
+static const char short_gen345[] = "**mpi_comm_join";
+static const char long_gen345[]  = "MPI_Comm_join failed";
+static const char short_gen346[] = "**mpi_comm_rank";
+static const char long_gen346[]  = "MPI_Comm_rank failed";
+static const char short_gen347[] = "**mpi_comm_remote_group";
+static const char long_gen347[]  = "MPI_Comm_remote_group failed";
+static const char short_gen348[] = "**mpi_comm_remote_size";
+static const char long_gen348[]  = "MPI_Comm_remote_size failed";
+static const char short_gen349[] = "**mpi_comm_set_attr";
+static const char long_gen349[]  = "MPI_Comm_set_attr failed";
+static const char short_gen350[] = "**mpi_comm_set_errhandler";
+static const char long_gen350[]  = "MPI_Comm_set_errhandler failed";
+static const char short_gen351[] = "**mpi_comm_set_info";
+static const char long_gen351[]  = "MPI_Comm_set_info failed";
+static const char short_gen352[] = "**mpi_comm_set_name";
+static const char long_gen352[]  = "MPI_Comm_set_name failed";
+static const char short_gen353[] = "**mpi_comm_size";
+static const char long_gen353[]  = "MPI_Comm_size failed";
+static const char short_gen354[] = "**mpi_comm_spawn";
+static const char long_gen354[]  = "MPI_Comm_spawn failed";
+static const char short_gen355[] = "**mpi_comm_spawn_multiple";
+static const char long_gen355[]  = "MPI_Comm_spawn_multiple failed";
+static const char short_gen356[] = "**mpi_comm_split";
+static const char long_gen356[]  = "MPI_Comm_split failed";
+static const char short_gen357[] = "**mpi_comm_split_type";
+static const char long_gen357[]  = "MPI_Comm_split_type failed";
+static const char short_gen358[] = "**mpi_comm_test_inter";
+static const char long_gen358[]  = "MPI_Comm_test_inter failed";
+static const char short_gen359[] = "**mpi_compare_and_swap";
+static const char long_gen359[]  = "MPI_Compare_and_swap failed";
+static const char short_gen360[] = "**mpi_dims_create";
+static const char long_gen360[]  = "MPI_Dims_create failed";
+static const char short_gen361[] = "**mpi_dist_graph_create";
+static const char long_gen361[]  = "MPI_Dist_graph_create failed";
+static const char short_gen362[] = "**mpi_dist_graph_create_adjacent";
+static const char long_gen362[]  = "MPI_Dist_graph_create_adjacent failed";
+static const char short_gen363[] = "**mpi_dist_graph_neighbors";
+static const char long_gen363[]  = "MPI_Dist_graph_neighbors failed";
+static const char short_gen364[] = "**mpi_dist_graph_neighbors_count";
+static const char long_gen364[]  = "MPI_Dist_graph_neighbors_count failed";
+static const char short_gen365[] = "**mpi_errhandler_free";
+static const char long_gen365[]  = "MPI_Errhandler_free failed";
+static const char short_gen366[] = "**mpi_error_class";
+static const char long_gen366[]  = "MPI_Error_class failed";
+static const char short_gen367[] = "**mpi_error_string";
+static const char long_gen367[]  = "MPI_Error_string failed";
+static const char short_gen368[] = "**mpi_exscan";
+static const char long_gen368[]  = "MPI_Exscan failed";
+static const char short_gen369[] = "**mpi_exscan_c";
+static const char long_gen369[]  = "MPI_Exscan_c failed";
+static const char short_gen370[] = "**mpi_exscan_init";
+static const char long_gen370[]  = "MPI_Exscan_init failed";
+static const char short_gen371[] = "**mpi_exscan_init_c";
+static const char long_gen371[]  = "MPI_Exscan_init_c failed";
+static const char short_gen372[] = "**mpi_fetch_and_op";
+static const char long_gen372[]  = "MPI_Fetch_and_op failed";
+static const char short_gen373[] = "**mpi_file_call_errhandler";
+static const char long_gen373[]  = "MPI_File_call_errhandler failed";
+static const char short_gen374[] = "**mpi_file_create_errhandler";
+static const char long_gen374[]  = "MPI_File_create_errhandler failed";
+static const char short_gen375[] = "**mpi_file_get_errhandler";
+static const char long_gen375[]  = "MPI_File_get_errhandler failed";
+static const char short_gen376[] = "**mpi_file_set_errhandler";
+static const char long_gen376[]  = "MPI_File_set_errhandler failed";
+static const char short_gen377[] = "**mpi_finalize";
+static const char long_gen377[]  = "MPI_Finalize failed";
+static const char short_gen378[] = "**mpi_finalized";
+static const char long_gen378[]  = "MPI_Finalized failed";
+static const char short_gen379[] = "**mpi_free_mem";
+static const char long_gen379[]  = "MPI_Free_mem failed";
+static const char short_gen380[] = "**mpi_gather";
+static const char long_gen380[]  = "MPI_Gather failed";
+static const char short_gen381[] = "**mpi_gather_c";
+static const char long_gen381[]  = "MPI_Gather_c failed";
+static const char short_gen382[] = "**mpi_gather_init";
+static const char long_gen382[]  = "MPI_Gather_init failed";
+static const char short_gen383[] = "**mpi_gather_init_c";
+static const char long_gen383[]  = "MPI_Gather_init_c failed";
+static const char short_gen384[] = "**mpi_gatherv";
+static const char long_gen384[]  = "MPI_Gatherv failed";
+static const char short_gen385[] = "**mpi_gatherv_c";
+static const char long_gen385[]  = "MPI_Gatherv_c failed";
+static const char short_gen386[] = "**mpi_gatherv_init";
+static const char long_gen386[]  = "MPI_Gatherv_init failed";
+static const char short_gen387[] = "**mpi_gatherv_init_c";
+static const char long_gen387[]  = "MPI_Gatherv_init_c failed";
+static const char short_gen388[] = "**mpi_get";
+static const char long_gen388[]  = "MPI_Get failed";
+static const char short_gen389[] = "**mpi_get_accumulate";
+static const char long_gen389[]  = "MPI_Get_accumulate failed";
+static const char short_gen390[] = "**mpi_get_accumulate_c";
+static const char long_gen390[]  = "MPI_Get_accumulate_c failed";
+static const char short_gen391[] = "**mpi_get_address";
+static const char long_gen391[]  = "MPI_Get_address failed";
+static const char short_gen392[] = "**mpi_get_c";
+static const char long_gen392[]  = "MPI_Get_c failed";
+static const char short_gen393[] = "**mpi_get_count";
+static const char long_gen393[]  = "MPI_Get_count failed";
+static const char short_gen394[] = "**mpi_get_count_c";
+static const char long_gen394[]  = "MPI_Get_count_c failed";
+static const char short_gen395[] = "**mpi_get_elements";
+static const char long_gen395[]  = "MPI_Get_elements failed";
+static const char short_gen396[] = "**mpi_get_elements_c";
+static const char long_gen396[]  = "MPI_Get_elements_c failed";
+static const char short_gen397[] = "**mpi_get_elements_x";
+static const char long_gen397[]  = "MPI_Get_elements_x failed";
+static const char short_gen398[] = "**mpi_get_library_version";
+static const char long_gen398[]  = "MPI_Get_library_version failed";
+static const char short_gen399[] = "**mpi_get_processor_name";
+static const char long_gen399[]  = "MPI_Get_processor_name failed";
+static const char short_gen400[] = "**mpi_get_version";
+static const char long_gen400[]  = "MPI_Get_version failed";
+static const char short_gen401[] = "**mpi_graph_create";
+static const char long_gen401[]  = "MPI_Graph_create failed";
+static const char short_gen402[] = "**mpi_graph_get";
+static const char long_gen402[]  = "MPI_Graph_get failed";
+static const char short_gen403[] = "**mpi_graph_map";
+static const char long_gen403[]  = "MPI_Graph_map failed";
+static const char short_gen404[] = "**mpi_graph_neighbors";
+static const char long_gen404[]  = "MPI_Graph_neighbors failed";
+static const char short_gen405[] = "**mpi_graph_neighbors_count";
+static const char long_gen405[]  = "MPI_Graph_neighbors_count failed";
+static const char short_gen406[] = "**mpi_graphdims_get";
+static const char long_gen406[]  = "MPI_Graphdims_get failed";
+static const char short_gen407[] = "**mpi_grequest_complete";
+static const char long_gen407[]  = "MPI_Grequest_complete failed";
+static const char short_gen408[] = "**mpi_grequest_start";
+static const char long_gen408[]  = "MPI_Grequest_start failed";
+static const char short_gen409[] = "**mpi_group_compare";
+static const char long_gen409[]  = "MPI_Group_compare failed";
+static const char short_gen410[] = "**mpi_group_difference";
+static const char long_gen410[]  = "MPI_Group_difference failed";
+static const char short_gen411[] = "**mpi_group_excl";
+static const char long_gen411[]  = "MPI_Group_excl failed";
+static const char short_gen412[] = "**mpi_group_free";
+static const char long_gen412[]  = "MPI_Group_free failed";
+static const char short_gen413[] = "**mpi_group_from_session_pset";
+static const char long_gen413[]  = "MPI_Group_from_session_pset failed";
+static const char short_gen414[] = "**mpi_group_incl";
+static const char long_gen414[]  = "MPI_Group_incl failed";
+static const char short_gen415[] = "**mpi_group_intersection";
+static const char long_gen415[]  = "MPI_Group_intersection failed";
+static const char short_gen416[] = "**mpi_group_range_excl";
+static const char long_gen416[]  = "MPI_Group_range_excl failed";
+static const char short_gen417[] = "**mpi_group_range_incl";
+static const char long_gen417[]  = "MPI_Group_range_incl failed";
+static const char short_gen418[] = "**mpi_group_rank";
+static const char long_gen418[]  = "MPI_Group_rank failed";
+static const char short_gen419[] = "**mpi_group_size";
+static const char long_gen419[]  = "MPI_Group_size failed";
+static const char short_gen420[] = "**mpi_group_translate_ranks";
+static const char long_gen420[]  = "MPI_Group_translate_ranks failed";
+static const char short_gen421[] = "**mpi_group_union";
+static const char long_gen421[]  = "MPI_Group_union failed";
+static const char short_gen422[] = "**mpi_iallgather";
+static const char long_gen422[]  = "MPI_Iallgather failed";
+static const char short_gen423[] = "**mpi_iallgather_c";
+static const char long_gen423[]  = "MPI_Iallgather_c failed";
+static const char short_gen424[] = "**mpi_iallgatherv";
+static const char long_gen424[]  = "MPI_Iallgatherv failed";
+static const char short_gen425[] = "**mpi_iallgatherv_c";
+static const char long_gen425[]  = "MPI_Iallgatherv_c failed";
+static const char short_gen426[] = "**mpi_iallreduce";
+static const char long_gen426[]  = "MPI_Iallreduce failed";
+static const char short_gen427[] = "**mpi_iallreduce_c";
+static const char long_gen427[]  = "MPI_Iallreduce_c failed";
+static const char short_gen428[] = "**mpi_ialltoall";
+static const char long_gen428[]  = "MPI_Ialltoall failed";
+static const char short_gen429[] = "**mpi_ialltoall_c";
+static const char long_gen429[]  = "MPI_Ialltoall_c failed";
+static const char short_gen430[] = "**mpi_ialltoallv";
+static const char long_gen430[]  = "MPI_Ialltoallv failed";
+static const char short_gen431[] = "**mpi_ialltoallv_c";
+static const char long_gen431[]  = "MPI_Ialltoallv_c failed";
+static const char short_gen432[] = "**mpi_ialltoallw";
+static const char long_gen432[]  = "MPI_Ialltoallw failed";
+static const char short_gen433[] = "**mpi_ialltoallw_c";
+static const char long_gen433[]  = "MPI_Ialltoallw_c failed";
+static const char short_gen434[] = "**mpi_ibarrier";
+static const char long_gen434[]  = "MPI_Ibarrier failed";
+static const char short_gen435[] = "**mpi_ibcast";
+static const char long_gen435[]  = "MPI_Ibcast failed";
+static const char short_gen436[] = "**mpi_ibcast_c";
+static const char long_gen436[]  = "MPI_Ibcast_c failed";
+static const char short_gen437[] = "**mpi_ibsend";
+static const char long_gen437[]  = "MPI_Ibsend failed";
+static const char short_gen438[] = "**mpi_ibsend_c";
+static const char long_gen438[]  = "MPI_Ibsend_c failed";
+static const char short_gen439[] = "**mpi_iexscan";
+static const char long_gen439[]  = "MPI_Iexscan failed";
+static const char short_gen440[] = "**mpi_iexscan_c";
+static const char long_gen440[]  = "MPI_Iexscan_c failed";
+static const char short_gen441[] = "**mpi_igather";
+static const char long_gen441[]  = "MPI_Igather failed";
+static const char short_gen442[] = "**mpi_igather_c";
+static const char long_gen442[]  = "MPI_Igather_c failed";
+static const char short_gen443[] = "**mpi_igatherv";
+static const char long_gen443[]  = "MPI_Igatherv failed";
+static const char short_gen444[] = "**mpi_igatherv_c";
+static const char long_gen444[]  = "MPI_Igatherv_c failed";
+static const char short_gen445[] = "**mpi_improbe";
+static const char long_gen445[]  = "MPI_Improbe failed";
+static const char short_gen446[] = "**mpi_imrecv";
+static const char long_gen446[]  = "MPI_Imrecv failed";
+static const char short_gen447[] = "**mpi_imrecv_c";
+static const char long_gen447[]  = "MPI_Imrecv_c failed";
+static const char short_gen448[] = "**mpi_ineighbor_allgather";
+static const char long_gen448[]  = "MPI_Ineighbor_allgather failed";
+static const char short_gen449[] = "**mpi_ineighbor_allgather_c";
+static const char long_gen449[]  = "MPI_Ineighbor_allgather_c failed";
+static const char short_gen450[] = "**mpi_ineighbor_allgatherv";
+static const char long_gen450[]  = "MPI_Ineighbor_allgatherv failed";
+static const char short_gen451[] = "**mpi_ineighbor_allgatherv_c";
+static const char long_gen451[]  = "MPI_Ineighbor_allgatherv_c failed";
+static const char short_gen452[] = "**mpi_ineighbor_alltoall";
+static const char long_gen452[]  = "MPI_Ineighbor_alltoall failed";
+static const char short_gen453[] = "**mpi_ineighbor_alltoall_c";
+static const char long_gen453[]  = "MPI_Ineighbor_alltoall_c failed";
+static const char short_gen454[] = "**mpi_ineighbor_alltoallv";
+static const char long_gen454[]  = "MPI_Ineighbor_alltoallv failed";
+static const char short_gen455[] = "**mpi_ineighbor_alltoallv_c";
+static const char long_gen455[]  = "MPI_Ineighbor_alltoallv_c failed";
+static const char short_gen456[] = "**mpi_ineighbor_alltoallw";
+static const char long_gen456[]  = "MPI_Ineighbor_alltoallw failed";
+static const char short_gen457[] = "**mpi_ineighbor_alltoallw_c";
+static const char long_gen457[]  = "MPI_Ineighbor_alltoallw_c failed";
+static const char short_gen458[] = "**mpi_info_create";
+static const char long_gen458[]  = "MPI_Info_create failed";
+static const char short_gen459[] = "**mpi_info_create_env";
+static const char long_gen459[]  = "MPI_Info_create_env failed";
+static const char short_gen460[] = "**mpi_info_delete";
+static const char long_gen460[]  = "MPI_Info_delete failed";
+static const char short_gen461[] = "**mpi_info_dup";
+static const char long_gen461[]  = "MPI_Info_dup failed";
+static const char short_gen462[] = "**mpi_info_free";
+static const char long_gen462[]  = "MPI_Info_free failed";
+static const char short_gen463[] = "**mpi_info_get";
+static const char long_gen463[]  = "MPI_Info_get failed";
+static const char short_gen464[] = "**mpi_info_get_nkeys";
+static const char long_gen464[]  = "MPI_Info_get_nkeys failed";
+static const char short_gen465[] = "**mpi_info_get_nthkey";
+static const char long_gen465[]  = "MPI_Info_get_nthkey failed";
+static const char short_gen466[] = "**mpi_info_get_string";
+static const char long_gen466[]  = "MPI_Info_get_string failed";
+static const char short_gen467[] = "**mpi_info_get_valuelen";
+static const char long_gen467[]  = "MPI_Info_get_valuelen failed";
+static const char short_gen468[] = "**mpi_info_set";
+static const char long_gen468[]  = "MPI_Info_set failed";
+static const char short_gen469[] = "**mpi_init";
+static const char long_gen469[]  = "MPI_Init failed";
+static const char short_gen470[] = "**mpi_init_thread";
+static const char long_gen470[]  = "MPI_Init_thread failed";
+static const char short_gen471[] = "**mpi_initialized";
+static const char long_gen471[]  = "MPI_Initialized failed";
+static const char short_gen472[] = "**mpi_intercomm_create";
+static const char long_gen472[]  = "MPI_Intercomm_create failed";
+static const char short_gen473[] = "**mpi_intercomm_create_from_groups";
+static const char long_gen473[]  = "MPI_Intercomm_create_from_groups failed";
+static const char short_gen474[] = "**mpi_intercomm_merge";
+static const char long_gen474[]  = "MPI_Intercomm_merge failed";
+static const char short_gen475[] = "**mpi_iprobe";
+static const char long_gen475[]  = "MPI_Iprobe failed";
+static const char short_gen476[] = "**mpi_irecv";
+static const char long_gen476[]  = "MPI_Irecv failed";
+static const char short_gen477[] = "**mpi_irecv_c";
+static const char long_gen477[]  = "MPI_Irecv_c failed";
+static const char short_gen478[] = "**mpi_ireduce";
+static const char long_gen478[]  = "MPI_Ireduce failed";
+static const char short_gen479[] = "**mpi_ireduce_c";
+static const char long_gen479[]  = "MPI_Ireduce_c failed";
+static const char short_gen480[] = "**mpi_ireduce_scatter";
+static const char long_gen480[]  = "MPI_Ireduce_scatter failed";
+static const char short_gen481[] = "**mpi_ireduce_scatter_block";
+static const char long_gen481[]  = "MPI_Ireduce_scatter_block failed";
+static const char short_gen482[] = "**mpi_ireduce_scatter_block_c";
+static const char long_gen482[]  = "MPI_Ireduce_scatter_block_c failed";
+static const char short_gen483[] = "**mpi_ireduce_scatter_c";
+static const char long_gen483[]  = "MPI_Ireduce_scatter_c failed";
+static const char short_gen484[] = "**mpi_irsend";
+static const char long_gen484[]  = "MPI_Irsend failed";
+static const char short_gen485[] = "**mpi_irsend_c";
+static const char long_gen485[]  = "MPI_Irsend_c failed";
+static const char short_gen486[] = "**mpi_is_thread_main";
+static const char long_gen486[]  = "MPI_Is_thread_main failed";
+static const char short_gen487[] = "**mpi_iscan";
+static const char long_gen487[]  = "MPI_Iscan failed";
+static const char short_gen488[] = "**mpi_iscan_c";
+static const char long_gen488[]  = "MPI_Iscan_c failed";
+static const char short_gen489[] = "**mpi_iscatter";
+static const char long_gen489[]  = "MPI_Iscatter failed";
+static const char short_gen490[] = "**mpi_iscatter_c";
+static const char long_gen490[]  = "MPI_Iscatter_c failed";
+static const char short_gen491[] = "**mpi_iscatterv";
+static const char long_gen491[]  = "MPI_Iscatterv failed";
+static const char short_gen492[] = "**mpi_iscatterv_c";
+static const char long_gen492[]  = "MPI_Iscatterv_c failed";
+static const char short_gen493[] = "**mpi_isend";
+static const char long_gen493[]  = "MPI_Isend failed";
+static const char short_gen494[] = "**mpi_isend_c";
+static const char long_gen494[]  = "MPI_Isend_c failed";
+static const char short_gen495[] = "**mpi_isendrecv";
+static const char long_gen495[]  = "MPI_Isendrecv failed";
+static const char short_gen496[] = "**mpi_isendrecv_c";
+static const char long_gen496[]  = "MPI_Isendrecv_c failed";
+static const char short_gen497[] = "**mpi_isendrecv_replace";
+static const char long_gen497[]  = "MPI_Isendrecv_replace failed";
+static const char short_gen498[] = "**mpi_isendrecv_replace_c";
+static const char long_gen498[]  = "MPI_Isendrecv_replace_c failed";
+static const char short_gen499[] = "**mpi_issend";
+static const char long_gen499[]  = "MPI_Issend failed";
+static const char short_gen500[] = "**mpi_issend_c";
+static const char long_gen500[]  = "MPI_Issend_c failed";
+static const char short_gen501[] = "**mpi_lookup_name";
+static const char long_gen501[]  = "MPI_Lookup_name failed";
+static const char short_gen502[] = "**mpi_mprobe";
+static const char long_gen502[]  = "MPI_Mprobe failed";
+static const char short_gen503[] = "**mpi_mrecv";
+static const char long_gen503[]  = "MPI_Mrecv failed";
+static const char short_gen504[] = "**mpi_mrecv_c";
+static const char long_gen504[]  = "MPI_Mrecv_c failed";
+static const char short_gen505[] = "**mpi_neighbor_allgather";
+static const char long_gen505[]  = "MPI_Neighbor_allgather failed";
+static const char short_gen506[] = "**mpi_neighbor_allgather_c";
+static const char long_gen506[]  = "MPI_Neighbor_allgather_c failed";
+static const char short_gen507[] = "**mpi_neighbor_allgather_init";
+static const char long_gen507[]  = "MPI_Neighbor_allgather_init failed";
+static const char short_gen508[] = "**mpi_neighbor_allgather_init_c";
+static const char long_gen508[]  = "MPI_Neighbor_allgather_init_c failed";
+static const char short_gen509[] = "**mpi_neighbor_allgatherv";
+static const char long_gen509[]  = "MPI_Neighbor_allgatherv failed";
+static const char short_gen510[] = "**mpi_neighbor_allgatherv_c";
+static const char long_gen510[]  = "MPI_Neighbor_allgatherv_c failed";
+static const char short_gen511[] = "**mpi_neighbor_allgatherv_init";
+static const char long_gen511[]  = "MPI_Neighbor_allgatherv_init failed";
+static const char short_gen512[] = "**mpi_neighbor_allgatherv_init_c";
+static const char long_gen512[]  = "MPI_Neighbor_allgatherv_init_c failed";
+static const char short_gen513[] = "**mpi_neighbor_alltoall";
+static const char long_gen513[]  = "MPI_Neighbor_alltoall failed";
+static const char short_gen514[] = "**mpi_neighbor_alltoall_c";
+static const char long_gen514[]  = "MPI_Neighbor_alltoall_c failed";
+static const char short_gen515[] = "**mpi_neighbor_alltoall_init";
+static const char long_gen515[]  = "MPI_Neighbor_alltoall_init failed";
+static const char short_gen516[] = "**mpi_neighbor_alltoall_init_c";
+static const char long_gen516[]  = "MPI_Neighbor_alltoall_init_c failed";
+static const char short_gen517[] = "**mpi_neighbor_alltoallv";
+static const char long_gen517[]  = "MPI_Neighbor_alltoallv failed";
+static const char short_gen518[] = "**mpi_neighbor_alltoallv_c";
+static const char long_gen518[]  = "MPI_Neighbor_alltoallv_c failed";
+static const char short_gen519[] = "**mpi_neighbor_alltoallv_init";
+static const char long_gen519[]  = "MPI_Neighbor_alltoallv_init failed";
+static const char short_gen520[] = "**mpi_neighbor_alltoallv_init_c";
+static const char long_gen520[]  = "MPI_Neighbor_alltoallv_init_c failed";
+static const char short_gen521[] = "**mpi_neighbor_alltoallw";
+static const char long_gen521[]  = "MPI_Neighbor_alltoallw failed";
+static const char short_gen522[] = "**mpi_neighbor_alltoallw_c";
+static const char long_gen522[]  = "MPI_Neighbor_alltoallw_c failed";
+static const char short_gen523[] = "**mpi_neighbor_alltoallw_init";
+static const char long_gen523[]  = "MPI_Neighbor_alltoallw_init failed";
+static const char short_gen524[] = "**mpi_neighbor_alltoallw_init_c";
+static const char long_gen524[]  = "MPI_Neighbor_alltoallw_init_c failed";
+static const char short_gen525[] = "**mpi_op_commutative";
+static const char long_gen525[]  = "MPI_Op_commutative failed";
+static const char short_gen526[] = "**mpi_op_create";
+static const char long_gen526[]  = "MPI_Op_create failed";
+static const char short_gen527[] = "**mpi_op_create_c";
+static const char long_gen527[]  = "MPI_Op_create_c failed";
+static const char short_gen528[] = "**mpi_op_free";
+static const char long_gen528[]  = "MPI_Op_free failed";
+static const char short_gen529[] = "**mpi_open_port";
+static const char long_gen529[]  = "MPI_Open_port failed";
+static const char short_gen530[] = "**mpi_pack";
+static const char long_gen530[]  = "MPI_Pack failed";
+static const char short_gen531[] = "**mpi_pack_c";
+static const char long_gen531[]  = "MPI_Pack_c failed";
+static const char short_gen532[] = "**mpi_pack_external";
+static const char long_gen532[]  = "MPI_Pack_external failed";
+static const char short_gen533[] = "**mpi_pack_external_c";
+static const char long_gen533[]  = "MPI_Pack_external_c failed";
+static const char short_gen534[] = "**mpi_pack_external_size";
+static const char long_gen534[]  = "MPI_Pack_external_size failed";
+static const char short_gen535[] = "**mpi_pack_external_size_c";
+static const char long_gen535[]  = "MPI_Pack_external_size_c failed";
+static const char short_gen536[] = "**mpi_pack_size";
+static const char long_gen536[]  = "MPI_Pack_size failed";
+static const char short_gen537[] = "**mpi_pack_size_c";
+static const char long_gen537[]  = "MPI_Pack_size_c failed";
+static const char short_gen538[] = "**mpi_parrived";
+static const char long_gen538[]  = "MPI_Parrived failed";
+static const char short_gen539[] = "**mpi_pready";
+static const char long_gen539[]  = "MPI_Pready failed";
+static const char short_gen540[] = "**mpi_pready_list";
+static const char long_gen540[]  = "MPI_Pready_list failed";
+static const char short_gen541[] = "**mpi_pready_range";
+static const char long_gen541[]  = "MPI_Pready_range failed";
+static const char short_gen542[] = "**mpi_precv_init";
+static const char long_gen542[]  = "MPI_Precv_init failed";
+static const char short_gen543[] = "**mpi_probe";
+static const char long_gen543[]  = "MPI_Probe failed";
+static const char short_gen544[] = "**mpi_psend_init";
+static const char long_gen544[]  = "MPI_Psend_init failed";
+static const char short_gen545[] = "**mpi_publish_name";
+static const char long_gen545[]  = "MPI_Publish_name failed";
+static const char short_gen546[] = "**mpi_put";
+static const char long_gen546[]  = "MPI_Put failed";
+static const char short_gen547[] = "**mpi_put_c";
+static const char long_gen547[]  = "MPI_Put_c failed";
+static const char short_gen548[] = "**mpi_query_thread";
+static const char long_gen548[]  = "MPI_Query_thread failed";
+static const char short_gen549[] = "**mpi_raccumulate";
+static const char long_gen549[]  = "MPI_Raccumulate failed";
+static const char short_gen550[] = "**mpi_raccumulate_c";
+static const char long_gen550[]  = "MPI_Raccumulate_c failed";
+static const char short_gen551[] = "**mpi_recv";
+static const char long_gen551[]  = "MPI_Recv failed";
+static const char short_gen552[] = "**mpi_recv_c";
+static const char long_gen552[]  = "MPI_Recv_c failed";
+static const char short_gen553[] = "**mpi_recv_init";
+static const char long_gen553[]  = "MPI_Recv_init failed";
+static const char short_gen554[] = "**mpi_recv_init_c";
+static const char long_gen554[]  = "MPI_Recv_init_c failed";
+static const char short_gen555[] = "**mpi_reduce";
+static const char long_gen555[]  = "MPI_Reduce failed";
+static const char short_gen556[] = "**mpi_reduce_c";
+static const char long_gen556[]  = "MPI_Reduce_c failed";
+static const char short_gen557[] = "**mpi_reduce_init";
+static const char long_gen557[]  = "MPI_Reduce_init failed";
+static const char short_gen558[] = "**mpi_reduce_init_c";
+static const char long_gen558[]  = "MPI_Reduce_init_c failed";
+static const char short_gen559[] = "**mpi_reduce_local";
+static const char long_gen559[]  = "MPI_Reduce_local failed";
+static const char short_gen560[] = "**mpi_reduce_local_c";
+static const char long_gen560[]  = "MPI_Reduce_local_c failed";
+static const char short_gen561[] = "**mpi_reduce_scatter";
+static const char long_gen561[]  = "MPI_Reduce_scatter failed";
+static const char short_gen562[] = "**mpi_reduce_scatter_block";
+static const char long_gen562[]  = "MPI_Reduce_scatter_block failed";
+static const char short_gen563[] = "**mpi_reduce_scatter_block_c";
+static const char long_gen563[]  = "MPI_Reduce_scatter_block_c failed";
+static const char short_gen564[] = "**mpi_reduce_scatter_block_init";
+static const char long_gen564[]  = "MPI_Reduce_scatter_block_init failed";
+static const char short_gen565[] = "**mpi_reduce_scatter_block_init_c";
+static const char long_gen565[]  = "MPI_Reduce_scatter_block_init_c failed";
+static const char short_gen566[] = "**mpi_reduce_scatter_c";
+static const char long_gen566[]  = "MPI_Reduce_scatter_c failed";
+static const char short_gen567[] = "**mpi_reduce_scatter_init";
+static const char long_gen567[]  = "MPI_Reduce_scatter_init failed";
+static const char short_gen568[] = "**mpi_reduce_scatter_init_c";
+static const char long_gen568[]  = "MPI_Reduce_scatter_init_c failed";
+static const char short_gen569[] = "**mpi_request_free";
+static const char long_gen569[]  = "MPI_Request_free failed";
+static const char short_gen570[] = "**mpi_request_get_status";
+static const char long_gen570[]  = "MPI_Request_get_status failed";
+static const char short_gen571[] = "**mpi_rget";
+static const char long_gen571[]  = "MPI_Rget failed";
+static const char short_gen572[] = "**mpi_rget_accumulate";
+static const char long_gen572[]  = "MPI_Rget_accumulate failed";
+static const char short_gen573[] = "**mpi_rget_accumulate_c";
+static const char long_gen573[]  = "MPI_Rget_accumulate_c failed";
+static const char short_gen574[] = "**mpi_rget_c";
+static const char long_gen574[]  = "MPI_Rget_c failed";
+static const char short_gen575[] = "**mpi_rput";
+static const char long_gen575[]  = "MPI_Rput failed";
+static const char short_gen576[] = "**mpi_rput_c";
+static const char long_gen576[]  = "MPI_Rput_c failed";
+static const char short_gen577[] = "**mpi_rsend";
+static const char long_gen577[]  = "MPI_Rsend failed";
+static const char short_gen578[] = "**mpi_rsend_c";
+static const char long_gen578[]  = "MPI_Rsend_c failed";
+static const char short_gen579[] = "**mpi_rsend_init";
+static const char long_gen579[]  = "MPI_Rsend_init failed";
+static const char short_gen580[] = "**mpi_rsend_init_c";
+static const char long_gen580[]  = "MPI_Rsend_init_c failed";
+static const char short_gen581[] = "**mpi_scan";
+static const char long_gen581[]  = "MPI_Scan failed";
+static const char short_gen582[] = "**mpi_scan_c";
+static const char long_gen582[]  = "MPI_Scan_c failed";
+static const char short_gen583[] = "**mpi_scan_init";
+static const char long_gen583[]  = "MPI_Scan_init failed";
+static const char short_gen584[] = "**mpi_scan_init_c";
+static const char long_gen584[]  = "MPI_Scan_init_c failed";
+static const char short_gen585[] = "**mpi_scatter";
+static const char long_gen585[]  = "MPI_Scatter failed";
+static const char short_gen586[] = "**mpi_scatter_c";
+static const char long_gen586[]  = "MPI_Scatter_c failed";
+static const char short_gen587[] = "**mpi_scatter_init";
+static const char long_gen587[]  = "MPI_Scatter_init failed";
+static const char short_gen588[] = "**mpi_scatter_init_c";
+static const char long_gen588[]  = "MPI_Scatter_init_c failed";
+static const char short_gen589[] = "**mpi_scatterv";
+static const char long_gen589[]  = "MPI_Scatterv failed";
+static const char short_gen590[] = "**mpi_scatterv_c";
+static const char long_gen590[]  = "MPI_Scatterv_c failed";
+static const char short_gen591[] = "**mpi_scatterv_init";
+static const char long_gen591[]  = "MPI_Scatterv_init failed";
+static const char short_gen592[] = "**mpi_scatterv_init_c";
+static const char long_gen592[]  = "MPI_Scatterv_init_c failed";
+static const char short_gen593[] = "**mpi_send";
+static const char long_gen593[]  = "MPI_Send failed";
+static const char short_gen594[] = "**mpi_send_c";
+static const char long_gen594[]  = "MPI_Send_c failed";
+static const char short_gen595[] = "**mpi_send_init";
+static const char long_gen595[]  = "MPI_Send_init failed";
+static const char short_gen596[] = "**mpi_send_init_c";
+static const char long_gen596[]  = "MPI_Send_init_c failed";
+static const char short_gen597[] = "**mpi_sendrecv";
+static const char long_gen597[]  = "MPI_Sendrecv failed";
+static const char short_gen598[] = "**mpi_sendrecv_c";
+static const char long_gen598[]  = "MPI_Sendrecv_c failed";
+static const char short_gen599[] = "**mpi_sendrecv_replace";
+static const char long_gen599[]  = "MPI_Sendrecv_replace failed";
+static const char short_gen600[] = "**mpi_sendrecv_replace_c";
+static const char long_gen600[]  = "MPI_Sendrecv_replace_c failed";
+static const char short_gen601[] = "**mpi_session_call_errhandler";
+static const char long_gen601[]  = "MPI_Session_call_errhandler failed";
+static const char short_gen602[] = "**mpi_session_create_errhandler";
+static const char long_gen602[]  = "MPI_Session_create_errhandler failed";
+static const char short_gen603[] = "**mpi_session_finalize";
+static const char long_gen603[]  = "MPI_Session_finalize failed";
+static const char short_gen604[] = "**mpi_session_get_errhandler";
+static const char long_gen604[]  = "MPI_Session_get_errhandler failed";
+static const char short_gen605[] = "**mpi_session_get_info";
+static const char long_gen605[]  = "MPI_Session_get_info failed";
+static const char short_gen606[] = "**mpi_session_get_nth_pset";
+static const char long_gen606[]  = "MPI_Session_get_nth_pset failed";
+static const char short_gen607[] = "**mpi_session_get_num_psets";
+static const char long_gen607[]  = "MPI_Session_get_num_psets failed";
+static const char short_gen608[] = "**mpi_session_get_pset_info";
+static const char long_gen608[]  = "MPI_Session_get_pset_info failed";
+static const char short_gen609[] = "**mpi_session_init";
+static const char long_gen609[]  = "MPI_Session_init failed";
+static const char short_gen610[] = "**mpi_session_set_errhandler";
+static const char long_gen610[]  = "MPI_Session_set_errhandler failed";
+static const char short_gen611[] = "**mpi_ssend";
+static const char long_gen611[]  = "MPI_Ssend failed";
+static const char short_gen612[] = "**mpi_ssend_c";
+static const char long_gen612[]  = "MPI_Ssend_c failed";
+static const char short_gen613[] = "**mpi_ssend_init";
+static const char long_gen613[]  = "MPI_Ssend_init failed";
+static const char short_gen614[] = "**mpi_ssend_init_c";
+static const char long_gen614[]  = "MPI_Ssend_init_c failed";
+static const char short_gen615[] = "**mpi_start";
+static const char long_gen615[]  = "MPI_Start failed";
+static const char short_gen616[] = "**mpi_startall";
+static const char long_gen616[]  = "MPI_Startall failed";
+static const char short_gen617[] = "**mpi_status_set_cancelled";
+static const char long_gen617[]  = "MPI_Status_set_cancelled failed";
+static const char short_gen618[] = "**mpi_status_set_elements";
+static const char long_gen618[]  = "MPI_Status_set_elements failed";
+static const char short_gen619[] = "**mpi_status_set_elements_c";
+static const char long_gen619[]  = "MPI_Status_set_elements_c failed";
+static const char short_gen620[] = "**mpi_status_set_elements_x";
+static const char long_gen620[]  = "MPI_Status_set_elements_x failed";
+static const char short_gen621[] = "**mpi_test";
+static const char long_gen621[]  = "MPI_Test failed";
+static const char short_gen622[] = "**mpi_test_cancelled";
+static const char long_gen622[]  = "MPI_Test_cancelled failed";
+static const char short_gen623[] = "**mpi_testall";
+static const char long_gen623[]  = "MPI_Testall failed";
+static const char short_gen624[] = "**mpi_testany";
+static const char long_gen624[]  = "MPI_Testany failed";
+static const char short_gen625[] = "**mpi_testsome";
+static const char long_gen625[]  = "MPI_Testsome failed";
+static const char short_gen626[] = "**mpi_topo_test";
+static const char long_gen626[]  = "MPI_Topo_test failed";
+static const char short_gen627[] = "**mpi_type_commit";
+static const char long_gen627[]  = "MPI_Type_commit failed";
+static const char short_gen628[] = "**mpi_type_contiguous";
+static const char long_gen628[]  = "MPI_Type_contiguous failed";
+static const char short_gen629[] = "**mpi_type_contiguous_c";
+static const char long_gen629[]  = "MPI_Type_contiguous_c failed";
+static const char short_gen630[] = "**mpi_type_create_darray";
+static const char long_gen630[]  = "MPI_Type_create_darray failed";
+static const char short_gen631[] = "**mpi_type_create_darray_c";
+static const char long_gen631[]  = "MPI_Type_create_darray_c failed";
+static const char short_gen632[] = "**mpi_type_create_f90_complex";
+static const char long_gen632[]  = "MPI_Type_create_f90_complex failed";
+static const char short_gen633[] = "**mpi_type_create_f90_int";
+static const char long_gen633[]  = "MPI_Type_create_f90_int failed";
+static const char short_gen634[] = "**mpi_type_create_f90_real";
+static const char long_gen634[]  = "MPI_Type_create_f90_real failed";
+static const char short_gen635[] = "**mpi_type_create_hindexed";
+static const char long_gen635[]  = "MPI_Type_create_hindexed failed";
+static const char short_gen636[] = "**mpi_type_create_hindexed_block";
+static const char long_gen636[]  = "MPI_Type_create_hindexed_block failed";
+static const char short_gen637[] = "**mpi_type_create_hindexed_block_c";
+static const char long_gen637[]  = "MPI_Type_create_hindexed_block_c failed";
+static const char short_gen638[] = "**mpi_type_create_hindexed_c";
+static const char long_gen638[]  = "MPI_Type_create_hindexed_c failed";
+static const char short_gen639[] = "**mpi_type_create_hvector";
+static const char long_gen639[]  = "MPI_Type_create_hvector failed";
+static const char short_gen640[] = "**mpi_type_create_hvector_c";
+static const char long_gen640[]  = "MPI_Type_create_hvector_c failed";
+static const char short_gen641[] = "**mpi_type_create_indexed_block";
+static const char long_gen641[]  = "MPI_Type_create_indexed_block failed";
+static const char short_gen642[] = "**mpi_type_create_indexed_block_c";
+static const char long_gen642[]  = "MPI_Type_create_indexed_block_c failed";
+static const char short_gen643[] = "**mpi_type_create_keyval";
+static const char long_gen643[]  = "MPI_Type_create_keyval failed";
+static const char short_gen644[] = "**mpi_type_create_resized";
+static const char long_gen644[]  = "MPI_Type_create_resized failed";
+static const char short_gen645[] = "**mpi_type_create_resized_c";
+static const char long_gen645[]  = "MPI_Type_create_resized_c failed";
+static const char short_gen646[] = "**mpi_type_create_struct";
+static const char long_gen646[]  = "MPI_Type_create_struct failed";
+static const char short_gen647[] = "**mpi_type_create_struct_c";
+static const char long_gen647[]  = "MPI_Type_create_struct_c failed";
+static const char short_gen648[] = "**mpi_type_create_subarray";
+static const char long_gen648[]  = "MPI_Type_create_subarray failed";
+static const char short_gen649[] = "**mpi_type_create_subarray_c";
+static const char long_gen649[]  = "MPI_Type_create_subarray_c failed";
+static const char short_gen650[] = "**mpi_type_delete_attr";
+static const char long_gen650[]  = "MPI_Type_delete_attr failed";
+static const char short_gen651[] = "**mpi_type_dup";
+static const char long_gen651[]  = "MPI_Type_dup failed";
+static const char short_gen652[] = "**mpi_type_extent";
+static const char long_gen652[]  = "MPI_Type_extent failed";
+static const char short_gen653[] = "**mpi_type_free";
+static const char long_gen653[]  = "MPI_Type_free failed";
+static const char short_gen654[] = "**mpi_type_free_keyval";
+static const char long_gen654[]  = "MPI_Type_free_keyval failed";
+static const char short_gen655[] = "**mpi_type_get_attr";
+static const char long_gen655[]  = "MPI_Type_get_attr failed";
+static const char short_gen656[] = "**mpi_type_get_contents";
+static const char long_gen656[]  = "MPI_Type_get_contents failed";
+static const char short_gen657[] = "**mpi_type_get_contents_c";
+static const char long_gen657[]  = "MPI_Type_get_contents_c failed";
+static const char short_gen658[] = "**mpi_type_get_envelope";
+static const char long_gen658[]  = "MPI_Type_get_envelope failed";
+static const char short_gen659[] = "**mpi_type_get_envelope_c";
+static const char long_gen659[]  = "MPI_Type_get_envelope_c failed";
+static const char short_gen660[] = "**mpi_type_get_extent";
+static const char long_gen660[]  = "MPI_Type_get_extent failed";
+static const char short_gen661[] = "**mpi_type_get_extent_c";
+static const char long_gen661[]  = "MPI_Type_get_extent_c failed";
+static const char short_gen662[] = "**mpi_type_get_extent_x";
+static const char long_gen662[]  = "MPI_Type_get_extent_x failed";
+static const char short_gen663[] = "**mpi_type_get_name";
+static const char long_gen663[]  = "MPI_Type_get_name failed";
+static const char short_gen664[] = "**mpi_type_get_true_extent";
+static const char long_gen664[]  = "MPI_Type_get_true_extent failed";
+static const char short_gen665[] = "**mpi_type_get_true_extent_c";
+static const char long_gen665[]  = "MPI_Type_get_true_extent_c failed";
+static const char short_gen666[] = "**mpi_type_get_true_extent_x";
+static const char long_gen666[]  = "MPI_Type_get_true_extent_x failed";
+static const char short_gen667[] = "**mpi_type_indexed";
+static const char long_gen667[]  = "MPI_Type_indexed failed";
+static const char short_gen668[] = "**mpi_type_indexed_c";
+static const char long_gen668[]  = "MPI_Type_indexed_c failed";
+static const char short_gen669[] = "**mpi_type_lb";
+static const char long_gen669[]  = "MPI_Type_lb failed";
+static const char short_gen670[] = "**mpi_type_match_size";
+static const char long_gen670[]  = "MPI_Type_match_size failed";
+static const char short_gen671[] = "**mpi_type_set_attr";
+static const char long_gen671[]  = "MPI_Type_set_attr failed";
+static const char short_gen672[] = "**mpi_type_set_name";
+static const char long_gen672[]  = "MPI_Type_set_name failed";
+static const char short_gen673[] = "**mpi_type_size";
+static const char long_gen673[]  = "MPI_Type_size failed";
+static const char short_gen674[] = "**mpi_type_size_c";
+static const char long_gen674[]  = "MPI_Type_size_c failed";
+static const char short_gen675[] = "**mpi_type_size_x";
+static const char long_gen675[]  = "MPI_Type_size_x failed";
+static const char short_gen676[] = "**mpi_type_ub";
+static const char long_gen676[]  = "MPI_Type_ub failed";
+static const char short_gen677[] = "**mpi_type_vector";
+static const char long_gen677[]  = "MPI_Type_vector failed";
+static const char short_gen678[] = "**mpi_type_vector_c";
+static const char long_gen678[]  = "MPI_Type_vector_c failed";
+static const char short_gen679[] = "**mpi_unpack";
+static const char long_gen679[]  = "MPI_Unpack failed";
+static const char short_gen680[] = "**mpi_unpack_c";
+static const char long_gen680[]  = "MPI_Unpack_c failed";
+static const char short_gen681[] = "**mpi_unpack_external";
+static const char long_gen681[]  = "MPI_Unpack_external failed";
+static const char short_gen682[] = "**mpi_unpack_external_c";
+static const char long_gen682[]  = "MPI_Unpack_external_c failed";
+static const char short_gen683[] = "**mpi_unpublish_name";
+static const char long_gen683[]  = "MPI_Unpublish_name failed";
+static const char short_gen684[] = "**mpi_wait";
+static const char long_gen684[]  = "MPI_Wait failed";
+static const char short_gen685[] = "**mpi_waitall";
+static const char long_gen685[]  = "MPI_Waitall failed";
+static const char short_gen686[] = "**mpi_waitany";
+static const char long_gen686[]  = "MPI_Waitany failed";
+static const char short_gen687[] = "**mpi_waitsome";
+static const char long_gen687[]  = "MPI_Waitsome failed";
+static const char short_gen688[] = "**mpi_win_allocate";
+static const char long_gen688[]  = "MPI_Win_allocate failed";
+static const char short_gen689[] = "**mpi_win_allocate_c";
+static const char long_gen689[]  = "MPI_Win_allocate_c failed";
+static const char short_gen690[] = "**mpi_win_allocate_shared";
+static const char long_gen690[]  = "MPI_Win_allocate_shared failed";
+static const char short_gen691[] = "**mpi_win_allocate_shared_c";
+static const char long_gen691[]  = "MPI_Win_allocate_shared_c failed";
+static const char short_gen692[] = "**mpi_win_attach";
+static const char long_gen692[]  = "MPI_Win_attach failed";
+static const char short_gen693[] = "**mpi_win_call_errhandler";
+static const char long_gen693[]  = "MPI_Win_call_errhandler failed";
+static const char short_gen694[] = "**mpi_win_complete";
+static const char long_gen694[]  = "MPI_Win_complete failed";
+static const char short_gen695[] = "**mpi_win_create";
+static const char long_gen695[]  = "MPI_Win_create failed";
+static const char short_gen696[] = "**mpi_win_create_c";
+static const char long_gen696[]  = "MPI_Win_create_c failed";
+static const char short_gen697[] = "**mpi_win_create_dynamic";
+static const char long_gen697[]  = "MPI_Win_create_dynamic failed";
+static const char short_gen698[] = "**mpi_win_create_errhandler";
+static const char long_gen698[]  = "MPI_Win_create_errhandler failed";
+static const char short_gen699[] = "**mpi_win_create_keyval";
+static const char long_gen699[]  = "MPI_Win_create_keyval failed";
+static const char short_gen700[] = "**mpi_win_delete_attr";
+static const char long_gen700[]  = "MPI_Win_delete_attr failed";
+static const char short_gen701[] = "**mpi_win_detach";
+static const char long_gen701[]  = "MPI_Win_detach failed";
+static const char short_gen702[] = "**mpi_win_fence";
+static const char long_gen702[]  = "MPI_Win_fence failed";
+static const char short_gen703[] = "**mpi_win_flush";
+static const char long_gen703[]  = "MPI_Win_flush failed";
+static const char short_gen704[] = "**mpi_win_flush_all";
+static const char long_gen704[]  = "MPI_Win_flush_all failed";
+static const char short_gen705[] = "**mpi_win_flush_local";
+static const char long_gen705[]  = "MPI_Win_flush_local failed";
+static const char short_gen706[] = "**mpi_win_flush_local_all";
+static const char long_gen706[]  = "MPI_Win_flush_local_all failed";
+static const char short_gen707[] = "**mpi_win_free";
+static const char long_gen707[]  = "MPI_Win_free failed";
+static const char short_gen708[] = "**mpi_win_free_keyval";
+static const char long_gen708[]  = "MPI_Win_free_keyval failed";
+static const char short_gen709[] = "**mpi_win_get_attr";
+static const char long_gen709[]  = "MPI_Win_get_attr failed";
+static const char short_gen710[] = "**mpi_win_get_errhandler";
+static const char long_gen710[]  = "MPI_Win_get_errhandler failed";
+static const char short_gen711[] = "**mpi_win_get_group";
+static const char long_gen711[]  = "MPI_Win_get_group failed";
+static const char short_gen712[] = "**mpi_win_get_info";
+static const char long_gen712[]  = "MPI_Win_get_info failed";
+static const char short_gen713[] = "**mpi_win_get_name";
+static const char long_gen713[]  = "MPI_Win_get_name failed";
+static const char short_gen714[] = "**mpi_win_lock";
+static const char long_gen714[]  = "MPI_Win_lock failed";
+static const char short_gen715[] = "**mpi_win_lock_all";
+static const char long_gen715[]  = "MPI_Win_lock_all failed";
+static const char short_gen716[] = "**mpi_win_post";
+static const char long_gen716[]  = "MPI_Win_post failed";
+static const char short_gen717[] = "**mpi_win_set_attr";
+static const char long_gen717[]  = "MPI_Win_set_attr failed";
+static const char short_gen718[] = "**mpi_win_set_errhandler";
+static const char long_gen718[]  = "MPI_Win_set_errhandler failed";
+static const char short_gen719[] = "**mpi_win_set_info";
+static const char long_gen719[]  = "MPI_Win_set_info failed";
+static const char short_gen720[] = "**mpi_win_set_name";
+static const char long_gen720[]  = "MPI_Win_set_name failed";
+static const char short_gen721[] = "**mpi_win_shared_query";
+static const char long_gen721[]  = "MPI_Win_shared_query failed";
+static const char short_gen722[] = "**mpi_win_shared_query_c";
+static const char long_gen722[]  = "MPI_Win_shared_query_c failed";
+static const char short_gen723[] = "**mpi_win_start";
+static const char long_gen723[]  = "MPI_Win_start failed";
+static const char short_gen724[] = "**mpi_win_sync";
+static const char long_gen724[]  = "MPI_Win_sync failed";
+static const char short_gen725[] = "**mpi_win_test";
+static const char long_gen725[]  = "MPI_Win_test failed";
+static const char short_gen726[] = "**mpi_win_unlock";
+static const char long_gen726[]  = "MPI_Win_unlock failed";
+static const char short_gen727[] = "**mpi_win_unlock_all";
+static const char long_gen727[]  = "MPI_Win_unlock_all failed";
+static const char short_gen728[] = "**mpi_win_wait";
+static const char long_gen728[]  = "MPI_Win_wait failed";
+static const char short_gen729[] = "**mpix_allreduce_enqueue";
+static const char long_gen729[]  = "MPIX_Allreduce_enqueue failed";
+static const char short_gen730[] = "**mpix_allreduce_enqueue_c";
+static const char long_gen730[]  = "MPIX_Allreduce_enqueue_c failed";
+static const char short_gen731[] = "**mpix_comm_agree";
+static const char long_gen731[]  = "MPIX_Comm_agree failed";
+static const char short_gen732[] = "**mpix_comm_failure_ack";
+static const char long_gen732[]  = "MPIX_Comm_failure_ack failed";
+static const char short_gen733[] = "**mpix_comm_failure_get_acked";
+static const char long_gen733[]  = "MPIX_Comm_failure_get_acked failed";
+static const char short_gen734[] = "**mpix_comm_get_failed";
+static const char long_gen734[]  = "MPIX_Comm_get_failed failed";
+static const char short_gen735[] = "**mpix_comm_get_stream";
+static const char long_gen735[]  = "MPIX_Comm_get_stream failed";
+static const char short_gen736[] = "**mpix_comm_revoke";
+static const char long_gen736[]  = "MPIX_Comm_revoke failed";
+static const char short_gen737[] = "**mpix_comm_shrink";
+static const char long_gen737[]  = "MPIX_Comm_shrink failed";
+static const char short_gen738[] = "**mpix_delete_error_class";
+static const char long_gen738[]  = "MPIX_Delete_error_class failed";
+static const char short_gen739[] = "**mpix_delete_error_code";
+static const char long_gen739[]  = "MPIX_Delete_error_code failed";
+static const char short_gen740[] = "**mpix_delete_error_string";
+static const char long_gen740[]  = "MPIX_Delete_error_string failed";
+static const char short_gen741[] = "**mpix_gpu_query_support";
+static const char long_gen741[]  = "MPIX_GPU_query_support failed";
+static const char short_gen742[] = "**mpix_grequest_class_allocate";
+static const char long_gen742[]  = "MPIX_Grequest_class_allocate failed";
+static const char short_gen743[] = "**mpix_grequest_class_create";
+static const char long_gen743[]  = "MPIX_Grequest_class_create failed";
+static const char short_gen744[] = "**mpix_grequest_start";
+static const char long_gen744[]  = "MPIX_Grequest_start failed";
+static const char short_gen745[] = "**mpix_info_set_hex";
+static const char long_gen745[]  = "MPIX_Info_set_hex failed";
+static const char short_gen746[] = "**mpix_irecv_enqueue";
+static const char long_gen746[]  = "MPIX_Irecv_enqueue failed";
+static const char short_gen747[] = "**mpix_irecv_enqueue_c";
+static const char long_gen747[]  = "MPIX_Irecv_enqueue_c failed";
+static const char short_gen748[] = "**mpix_isend_enqueue";
+static const char long_gen748[]  = "MPIX_Isend_enqueue failed";
+static const char short_gen749[] = "**mpix_isend_enqueue_c";
+static const char long_gen749[]  = "MPIX_Isend_enqueue_c failed";
+static const char short_gen750[] = "**mpix_recv_enqueue";
+static const char long_gen750[]  = "MPIX_Recv_enqueue failed";
+static const char short_gen751[] = "**mpix_recv_enqueue_c";
+static const char long_gen751[]  = "MPIX_Recv_enqueue_c failed";
+static const char short_gen752[] = "**mpix_send_enqueue";
+static const char long_gen752[]  = "MPIX_Send_enqueue failed";
+static const char short_gen753[] = "**mpix_send_enqueue_c";
+static const char long_gen753[]  = "MPIX_Send_enqueue_c failed";
+static const char short_gen754[] = "**mpix_start_progress_thread";
+static const char long_gen754[]  = "MPIX_Start_progress_thread failed";
+static const char short_gen755[] = "**mpix_stop_progress_thread";
+static const char long_gen755[]  = "MPIX_Stop_progress_thread failed";
+static const char short_gen756[] = "**mpix_stream_comm_create";
+static const char long_gen756[]  = "MPIX_Stream_comm_create failed";
+static const char short_gen757[] = "**mpix_stream_comm_create_multiplex";
+static const char long_gen757[]  = "MPIX_Stream_comm_create_multiplex failed";
+static const char short_gen758[] = "**mpix_stream_create";
+static const char long_gen758[]  = "MPIX_Stream_create failed";
+static const char short_gen759[] = "**mpix_stream_free";
+static const char long_gen759[]  = "MPIX_Stream_free failed";
+static const char short_gen760[] = "**mpix_stream_irecv";
+static const char long_gen760[]  = "MPIX_Stream_irecv failed";
+static const char short_gen761[] = "**mpix_stream_irecv_c";
+static const char long_gen761[]  = "MPIX_Stream_irecv_c failed";
+static const char short_gen762[] = "**mpix_stream_isend";
+static const char long_gen762[]  = "MPIX_Stream_isend failed";
+static const char short_gen763[] = "**mpix_stream_isend_c";
+static const char long_gen763[]  = "MPIX_Stream_isend_c failed";
+static const char short_gen764[] = "**mpix_stream_progress";
+static const char long_gen764[]  = "MPIX_Stream_progress failed";
+static const char short_gen765[] = "**mpix_stream_recv";
+static const char long_gen765[]  = "MPIX_Stream_recv failed";
+static const char short_gen766[] = "**mpix_stream_recv_c";
+static const char long_gen766[]  = "MPIX_Stream_recv_c failed";
+static const char short_gen767[] = "**mpix_stream_send";
+static const char long_gen767[]  = "MPIX_Stream_send failed";
+static const char short_gen768[] = "**mpix_stream_send_c";
+static const char long_gen768[]  = "MPIX_Stream_send_c failed";
+static const char short_gen769[] = "**mpix_type_iov";
+static const char long_gen769[]  = "MPIX_Type_iov failed";
+static const char short_gen770[] = "**mpix_type_iov_len";
+static const char long_gen770[]  = "MPIX_Type_iov_len failed";
+static const char short_gen771[] = "**mpix_wait_enqueue";
+static const char long_gen771[]  = "MPIX_Wait_enqueue failed";
+static const char short_gen772[] = "**mpix_waitall_enqueue";
+static const char long_gen772[]  = "MPIX_Waitall_enqueue failed";
+static const char short_gen773[] = "**mpl_gavl_create";
+static const char long_gen773[]  = " mpl_gavl_create failed";
+static const char short_gen774[] = "**mpl_gavl_delete_range";
+static const char long_gen774[]  = " mpl_gavl_delete_range failed";
+static const char short_gen775[] = "**mpl_gavl_delete_start_addr";
+static const char long_gen775[]  = " mpl_gavl_delete_start_addr failed";
+static const char short_gen776[] = "**mpl_gavl_insert";
+static const char long_gen776[]  = " mpl_gavl_insert failed";
+static const char short_gen777[] = "**mpl_gavl_search";
+static const char long_gen777[]  = " mpl_gavl_search failed";
+static const char short_gen778[] = "**msgnotreq";
+static const char long_gen778[]  = " Invalid MPI_Request (MPI_Message passed)";
+static const char short_gen779[] = "**namepubfile";
+static const char long_gen779[]  = "Unable to publish service name";
+static const char short_gen780[] = "**namepubnotfound";
+static const char long_gen780[]  = "Lookup failed for service name";
+static const char short_gen781[] = "**namepubnotpub";
+static const char long_gen781[]  = "Publish failed for service name";
+static const char short_gen782[] = "**namepubnotunpub";
+static const char long_gen782[]  = "Failed to unpublish service name";
+static const char short_gen783[] = "**nameservice";
+static const char long_gen783[]  = "Invalid service name (see MPI_Publish_name)";
+static const char short_gen784[] = "**need_get_contents_c";
+static const char long_gen784[]  = "use MPI_Type_get_contents_c to query large count datatype";
+static const char short_gen785[] = "**need_get_envelope_c";
+static const char long_gen785[]  = "use MPI_Type_get_envelope_c to query large count datatype";
+static const char short_gen786[] = "**netloc_endpoint_mismatch";
+static const char long_gen786[]  = "Netloc topology does not contain the node";
+static const char short_gen787[] = "**netloc_topo_load";
+static const char long_gen787[]  = "Error loading netloc topology";
+static const char short_gen788[] = "**noConnInfoToString";
+static const char long_gen788[]  = "No ConnInfoToString routine defined for this process group";
+static const char short_gen789[] = "**noerrclasses";
+static const char long_gen789[]  = "No more user-defined error classes";
+static const char short_gen790[] = "**noerrcodes";
+static const char long_gen790[]  = "No more user-defined error codes";
+static const char short_gen791[] = "**nofence";
+static const char long_gen791[]  = " invalid Gentran fence";
+static const char short_gen792[] = "**nomem";
+static const char long_gen792[]  = "Out of memory";
+static const char short_gen793[] = "**nomem2";
+static const char long_gen793[]  = "Unable to allocate memory (probably out of memory)";
+static const char short_gen794[] = "**nomembind";
+static const char long_gen794[]  = " hwloc_set_area_membind() is not available";
+static const char short_gen795[] = "**nomemreq";
+static const char long_gen795[]  = "failure occurred while allocating memory for a request object";
+static const char short_gen796[] = "**nonamepub";
+static const char long_gen796[]  = "No name publishing service available";
+static const char short_gen797[] = "**nosupport";
+static const char long_gen797[]  = " Algorithm selected is not supported. Please choose another algorithm";
+static const char short_gen798[] = "**notcarttopo";
+static const char long_gen798[]  = "No Cartesian topology associated with this communicator";
+static const char short_gen799[] = "**notcstatignore";
+static const char long_gen799[]  = "MPI_STATUS_IGNORE cannot be passed to MPI_Status_c2f()";
+static const char short_gen800[] = "**notdistgraphtopo";
+static const char long_gen800[]  = "No Distributed Graph topology associated with this communicator";
+static const char short_gen801[] = "**notfstatignore";
+static const char long_gen801[]  = "MPI_STATUS_IGNORE cannot be passed to MPI_Status_f2c()";
+static const char short_gen802[] = "**notgenreq";
+static const char long_gen802[]  = "Attempt to complete a request with MPI_GREQUEST_COMPLETE that was not started with MPI_GREQUEST_START";
+static const char short_gen803[] = "**notgpustream";
+static const char long_gen803[]  = "The communicator does not have a local gpu stream attached.";
+static const char short_gen804[] = "**notgraphtopo";
+static const char long_gen804[]  = "No Graph topology associated with this communicator";
+static const char short_gen805[] = "**notimpl";
+static const char long_gen805[]  = "Function not implemented";
+static const char short_gen806[] = "**notopology";
+static const char long_gen806[]  = "No topology associated with this communicator";
+static const char short_gen807[] = "**notsame";
+static const char long_gen807[]  = "Inconsistent arguments to collective routine ";
+static const char short_gen808[] = "**null_buff_ptr";
+static const char long_gen808[]  = "Error in hcolrte api: buffer pointer is NULL for non DTE_ZERO INLINE data representation";
+static const char short_gen809[] = "**nullptr";
+static const char long_gen809[]  = "Null pointer";
+static const char short_gen810[] = "**nullptrtype";
+static const char long_gen810[]  = "Null pointer";
+static const char short_gen811[] = "**nullvertex";
+static const char long_gen811[]  = "  Gentran vertex is NULL";
+static const char short_gen812[] = "**ofi_num_nics";
+static const char long_gen812[]  = "OFI has a different number of nics available on different notes";
+static const char short_gen813[] = "**ofi_provider_mismatch";
+static const char long_gen813[]  = "OFI Provider name does not match configure-time provider name";
+static const char short_gen814[] = "**ofid_alias";
+static const char long_gen814[]  = "OFI cq alias failed";
+static const char short_gen815[] = "**ofid_avclose";
+static const char long_gen815[]  = "OFI av close failed";
+static const char short_gen816[] = "**ofid_avlookup";
+static const char long_gen816[]  = "OFI get address vector lookup failed";
+static const char short_gen817[] = "**ofid_avmap";
+static const char long_gen817[]  = "OFI get address vector map failed";
+static const char short_gen818[] = "**ofid_avopen";
+static const char long_gen818[]  = "OFI address vector open failed";
+static const char short_gen819[] = "**ofid_avsync";
+static const char long_gen819[]  = "OFI get address vector sync failed";
+static const char short_gen820[] = "**ofid_bind";
+static const char long_gen820[]  = "OFI resource bind failure";
+static const char short_gen821[] = "**ofid_cancel";
+static const char long_gen821[]  = "OFI cancel failed";
+static const char short_gen822[] = "**ofid_cntr_wait";
+static const char long_gen822[]  = "OFI Counter wait failed";
+static const char short_gen823[] = "**ofid_cqclose";
+static const char long_gen823[]  = "OFI cq close failed";
+static const char short_gen824[] = "**ofid_ctrlcancel";
+static const char long_gen824[]  = "OFI Control cancel failed";
+static const char short_gen825[] = "**ofid_domainclose";
+static const char long_gen825[]  = "OFI domain close failed";
+static const char short_gen826[] = "**ofid_ep";
+static const char long_gen826[]  = "OFI endpoint open failed";
+static const char short_gen827[] = "**ofid_ep_enable";
+static const char long_gen827[]  = "OFI EP enable failure";
+static const char short_gen828[] = "**ofid_epclose";
+static const char long_gen828[]  = "OFI endpoint close failed";
+static const char short_gen829[] = "**ofid_epsync";
+static const char long_gen829[]  = "OFI synchronization failed";
+static const char short_gen830[] = "**ofid_fabric";
+static const char long_gen830[]  = "OFI fi_fabric failure";
+static const char short_gen831[] = "**ofid_getinfo";
+static const char long_gen831[]  = "OFI fi_getinfo() failure";
+static const char short_gen832[] = "**ofid_getname";
+static const char long_gen832[]  = "OFI get endpoint name failed";
+static const char short_gen833[] = "**ofid_getopt";
+static const char long_gen833[]  = "OFI getopt failed";
+static const char short_gen834[] = "**ofid_inject";
+static const char long_gen834[]  = "OFI inject failed";
+static const char short_gen835[] = "**ofid_mr_key";
+static const char long_gen835[]  = "OFI MR key invalid";
+static const char short_gen836[] = "**ofid_mr_reg";
+static const char long_gen836[]  = "OFI memory registration failed";
+static const char short_gen837[] = "**ofid_mr_unreg";
+static const char long_gen837[]  = "OFI memory deregistration failed";
+static const char short_gen838[] = "**ofid_opencq";
+static const char long_gen838[]  = "OFI event queue create failure";
+static const char short_gen839[] = "**ofid_openct";
+static const char long_gen839[]  = "OFI event counter create failure";
+static const char short_gen840[] = "**ofid_opendomain";
+static const char long_gen840[]  = "OFI fi_open domain failure";
+static const char short_gen841[] = "**ofid_peek";
+static const char long_gen841[]  = "OFI peek failed";
+static const char short_gen842[] = "**ofid_pmi";
+static const char long_gen842[]  = "PMI_Init() failure";
+static const char short_gen843[] = "**ofid_poll";
+static const char long_gen843[]  = "OFI poll failed";
+static const char short_gen844[] = "**ofid_prepost";
+static const char long_gen844[]  = "OFI preposting receives failed";
+static const char short_gen845[] = "**ofid_rdma_atomicto";
+static const char long_gen845[]  = "OFI rdma atomicto failed";
+static const char short_gen846[] = "**ofid_rdma_cswap";
+static const char long_gen846[]  = "OFI rdma cswap failed";
+static const char short_gen847[] = "**ofid_rdma_inject_write";
+static const char long_gen847[]  = "OFI rdma write immediatefailed";
+static const char short_gen848[] = "**ofid_rdma_readfrom";
+static const char long_gen848[]  = "OFI rdma read failed";
+static const char short_gen849[] = "**ofid_rdma_write";
+static const char long_gen849[]  = "OFI rdma write failed";
+static const char short_gen850[] = "**ofid_send";
+static const char long_gen850[]  = "OFI send failed";
+static const char short_gen851[] = "**ofid_sendv";
+static const char long_gen851[]  = "OFI send failed";
+static const char short_gen852[] = "**ofid_setopt";
+static const char long_gen852[]  = "OFI setopt failed";
+static const char short_gen853[] = "**ofid_tinject";
+static const char long_gen853[]  = "OFI tagged inject failed";
+static const char short_gen854[] = "**ofid_trecv";
+static const char long_gen854[]  = "OFI tagged recv failed";
+static const char short_gen855[] = "**ofid_trecvsync";
+static const char long_gen855[]  = "OFI tagged recv sync failed";
+static const char short_gen856[] = "**ofid_tsend";
+static const char long_gen856[]  = "OFI tagged send failed";
+static const char short_gen857[] = "**ofid_tsendsync";
+static const char long_gen857[]  = "OFI tagged send sync failed";
+static const char short_gen858[] = "**op";
+static const char long_gen858[]  = "Invalid MPI_Op";
+static const char short_gen859[] = "**openportfailed";
+static const char long_gen859[]  = "Unable to establish a port";
+static const char short_gen860[] = "**opnotallowed";
+static const char long_gen860[]  = "MPI_Op operation is not allowed in this routine";
+static const char short_gen861[] = "**opnotpredefined";
+static const char long_gen861[]  = "only predefined ops are valid";
+static const char short_gen862[] = "**opnull";
+static const char long_gen862[]  = "Null MPI_Op";
+static const char short_gen863[] = "**opundefined";
+static const char long_gen863[]  = "MPI_Op operation not defined for this datatype ";
+static const char short_gen864[] = "**oremote_fail";
+static const char long_gen864[]  = "open failed on a remote node";
+static const char short_gen865[] = "**other";
+static const char long_gen865[]  = "Other MPI error";
+static const char short_gen866[] = "**outofstream";
+static const char long_gen866[]  = "No streams available. Use MPIR_CVAR_CH4_RESERVE_VCIS to reserve the number of streams can be allocated.";
+static const char short_gen867[] = "**parse_thread_affinity";
+static const char long_gen867[]  = "Failed to parse async thread affinity string";
+static const char short_gen868[] = "**partitioninvalid";
+static const char long_gen868[]  = " Invalid partition";
+static const char short_gen869[] = "**pending";
+static const char long_gen869[]  = "Pending request (no error)";
+static const char short_gen870[] = "**permattr";
+static const char long_gen870[]  = "Cannot set permanent attribute";
+static const char short_gen871[] = "**permop";
+static const char long_gen871[]  = "Cannot free permanent MPI_Op ";
+static const char short_gen872[] = "**pglookup";
+static const char long_gen872[]  = "unable to find the process group structure";
+static const char short_gen873[] = "**pmi2_info_getjobattr";
+static const char long_gen873[]  = " PMI2_Info_GetJobAttr failed";
+static const char short_gen874[] = "**pmi_barrier";
+static const char long_gen874[]  = "PMI_Barrier failed";
+static const char short_gen875[] = "**pmi_get_appnum";
+static const char long_gen875[]  = "PMI_Get_appnum failed";
+static const char short_gen876[] = "**pmi_get_rank";
+static const char long_gen876[]  = "PMI_Get_rank failed";
+static const char short_gen877[] = "**pmi_get_size";
+static const char long_gen877[]  = "PMI_Get_size failed";
+static const char short_gen878[] = "**pmi_get_universe_size";
+static const char long_gen878[]  = "PMI_Get_universe_size failed";
+static const char short_gen879[] = "**pmi_getjobattr";
+static const char long_gen879[]  = " PMI2 GetJobAttr failed";
+static const char short_gen880[] = "**pmi_getnodeattr";
+static const char long_gen880[]  = " PMI2 GetNodeAttr failed";
+static const char short_gen881[] = "**pmi_init";
+static const char long_gen881[]  = "PMI_Init failed";
+static const char short_gen882[] = "**pmi_job_getid";
+static const char long_gen882[]  = "PMI2_Job_GetId failed";
+static const char short_gen883[] = "**pmi_kvs_commit";
+static const char long_gen883[]  = "PMI_KVS_Commit failed";
+static const char short_gen884[] = "**pmi_kvs_get";
+static const char long_gen884[]  = "PMI_KVS_Get failed";
+static const char short_gen885[] = "**pmi_kvs_get_key_length_max";
+static const char long_gen885[]  = "PMI_KVS_Get_key_length_max failed";
+static const char short_gen886[] = "**pmi_kvs_get_my_name";
+static const char long_gen886[]  = "PMI_KVS_Get_my_name failed";
+static const char short_gen887[] = "**pmi_kvs_get_name_length_max";
+static const char long_gen887[]  = "PMI_KVS_Get_name_length_max failed";
+static const char short_gen888[] = "**pmi_kvs_get_value_length_max";
+static const char long_gen888[]  = "PMI_KVS_Get_value_length_max failed";
+static const char short_gen889[] = "**pmi_kvs_put";
+static const char long_gen889[]  = "PMI_KVS_Put failed";
+static const char short_gen890[] = "**pmi_kvsfence";
+static const char long_gen890[]  = " PMI2 KVS_Fence failed";
+static const char short_gen891[] = "**pmi_kvsget";
+static const char long_gen891[]  = " PMI2 KVS_Get failed";
+static const char short_gen892[] = "**pmi_kvsput";
+static const char long_gen892[]  = " PMI2 KVS_Put failed";
+static const char short_gen893[] = "**pmi_putnodeattr";
+static const char long_gen893[]  = " PMI2 PutNodeAttr failed";
+static const char short_gen894[] = "**pmi_spawn_multiple";
+static const char long_gen894[]  = "PMI_Spawn_multiple failed";
+static const char short_gen895[] = "**pmix_commit";
+static const char long_gen895[]  = "PMIx_Commit failed";
+static const char short_gen896[] = "**pmix_fence";
+static const char long_gen896[]  = "PMIx_Fence failed";
+static const char short_gen897[] = "**pmix_get";
+static const char long_gen897[]  = "PMIx_Get failed";
+static const char short_gen898[] = "**pmix_init";
+static const char long_gen898[]  = "PMIX_Init failed";
+static const char short_gen899[] = "**pmix_put";
+static const char long_gen899[]  = "PMIx_Put failed";
+static const char short_gen900[] = "**pmix_resolve_nodes";
+static const char long_gen900[]  = " PMIx_Resolve_nodes failed";
+static const char short_gen901[] = "**pmix_resolve_peers";
+static const char long_gen901[]  = " PMIx_Resolve_peers failed";
+static const char short_gen902[] = "**poll";
+static const char long_gen902[]  = "poll of socket fds failed";
+static const char short_gen903[] = "**port";
+static const char long_gen903[]  = "Invalid port";
+static const char short_gen904[] = "**portexist";
+static const char long_gen904[]  = "Named port does not exist";
+static const char short_gen905[] = "**predeferrclass";
+static const char long_gen905[]  = "Predefined error class given";
+static const char short_gen906[] = "**predeferrcode";
+static const char long_gen906[]  = "Predefined error code given";
+static const char short_gen907[] = "**proc_failed";
+static const char long_gen907[]  = "Process failed";
+static const char short_gen908[] = "**procnamefailed";
+static const char long_gen908[]  = "Failed to get processor name";
+static const char short_gen909[] = "**progress_sock_wait";
+static const char long_gen909[]  = "sock_wait failed";
+static const char short_gen910[] = "**progresshookstoomany";
+static const char long_gen910[]  = " too many progress hooks are registered";
+static const char short_gen911[] = "**psetinvalidn";
+static const char long_gen911[]  = "Invalid pset number";
+static const char short_gen912[] = "**psetinvalidname";
+static const char long_gen912[]  = "Invalid pset name";
+static const char short_gen913[] = "**pthread_mutex";
+static const char long_gen913[]  = "pthread mutex routine failed";
+static const char short_gen914[] = "**putenv";
+static const char long_gen914[]  = "putenv failed";
+static const char short_gen915[] = "**qmpi_invalid_name";
+static const char long_gen915[]  = " tool name is invalid";
+static const char short_gen916[] = "**rangedup";
+static const char long_gen916[]  = "The range array specifies duplicate entries";
+static const char short_gen917[] = "**rangeendinvalid";
+static const char long_gen917[]  = "Some element of a range array is either negative or too large";
+static const char short_gen918[] = "**rangestartinvalid";
+static const char long_gen918[]  = "Some element of a range array is either negative or too large";
+static const char short_gen919[] = "**rank";
+static const char long_gen919[]  = "Invalid rank";
+static const char short_gen920[] = "**rankarray";
+static const char long_gen920[]  = "Invalid rank in rank array";
+static const char short_gen921[] = "**rankdup";
+static const char long_gen921[]  = "Duplicate ranks in rank array ";
+static const char short_gen922[] = "**ranklocal";
+static const char long_gen922[]  = "Error specifying local_leader ";
+static const char short_gen923[] = "**rankremote";
+static const char long_gen923[]  = "Error specifying remote_leader ";
+static const char short_gen924[] = "**ranksdistinct";
+static const char long_gen924[]  = "Local and remote leaders must be different processes";
+static const char short_gen925[] = "**read";
+static const char long_gen925[]  = "read from socket failed";
+static const char short_gen926[] = "**recvbuf_inplace";
+static const char long_gen926[]  = "recvbuf cannot be MPI_IN_PLACE";
+static const char short_gen927[] = "**remove_shar_mem";
+static const char long_gen927[]  = "unable to remove shared memory";
+static const char short_gen928[] = "**reqnotmsg";
+static const char long_gen928[]  = " Invalid MPI_Message (MPI_Request passed)";
+static const char short_gen929[] = "**request";
+static const char long_gen929[]  = "Invalid MPI_Request";
+static const char short_gen930[] = "**request_invalid_kind";
+static const char long_gen930[]  = "The supplied request was invalid";
+static const char short_gen931[] = "**requestinvalidparrived";
+static const char long_gen931[]  = " Invalid or inactive partitioned receive request passed to MPI_Parrived.";
+static const char short_gen932[] = "**requestinvalidpready";
+static const char long_gen932[]  = " Invalid or inactive partitioned send request passed to MPI_Pready, MPI_Pready_range or MPI_Pready_list.";
+static const char short_gen933[] = "**requestinvalidstart";
+static const char long_gen933[]  = "Request is neither persistent nor partitioned in MPI_Start or MPI_Startall.";
+static const char short_gen934[] = "**requestnull";
+static const char long_gen934[]  = "Null MPI_Request ";
+static const char short_gen935[] = "**requestpartactive";
+static const char long_gen935[]  = "Partitioned request passed to MPI_Start or MPI_Startall is already active.";
+static const char short_gen936[] = "**requestpersistactive";
+static const char long_gen936[]  = "Persistent request passed to MPI_Start or MPI_Startall is already active.";
+static const char short_gen937[] = "**revoked";
+static const char long_gen937[]  = "Communication object revoked";
+static const char short_gen938[] = "**rmaattach";
+static const char long_gen938[]  = "Memory cannot be attached";
+static const char short_gen939[] = "**rmaconflict";
+static const char long_gen939[]  = "Conflicting accesses to window ";
+static const char short_gen940[] = "**rmadisp";
+static const char long_gen940[]  = "Invalid displacement argument in RMA call ";
+static const char short_gen941[] = "**rmaflavor";
+static const char long_gen941[]  = "Incorrect window flavor";
+static const char short_gen942[] = "**rmarange";
+static const char long_gen942[]  = "Target memory is not contained within the window";
+static const char short_gen943[] = "**rmashared";
+static const char long_gen943[]  = "Memory cannot be shared";
+static const char short_gen944[] = "**rmasize";
+static const char long_gen944[]  = "Invalid size argument in RMA call";
+static const char short_gen945[] = "**rmasync";
+static const char long_gen945[]  = "Wrong synchronization of RMA calls ";
+static const char short_gen946[] = "**rmatypenotatomic";
+static const char long_gen946[]  = " Datatype not permitted for atomic operations";
+static const char short_gen947[] = "**root";
+static const char long_gen947[]  = "Invalid root";
+static const char short_gen948[] = "**rsendnomatch";
+static const char long_gen948[]  = "Ready send had no matching receive ";
+static const char short_gen949[] = "**rtspkt";
+static const char long_gen949[]  = "failure occurred while attempting to send RTS packet";
+static const char short_gen950[] = "**sem_destroy";
+static const char long_gen950[]  = "sem_destroy() failed";
+static const char short_gen951[] = "**sem_init";
+static const char long_gen951[]  = "sem_init() failed";
+static const char short_gen952[] = "**sem_post";
+static const char long_gen952[]  = "sem_post() failed";
+static const char short_gen953[] = "**sem_wait";
+static const char long_gen953[]  = "sem_wait() failed";
+static const char short_gen954[] = "**sendbuf_inplace";
+static const char long_gen954[]  = "sendbuf cannot be MPI_IN_PLACE";
+static const char short_gen955[] = "**servicename";
+static const char long_gen955[]  = "Attempt to lookup an unknown service name ";
+static const char short_gen956[] = "**session";
+static const char long_gen956[]  = "Invalid MPI_Session handle";
+static const char short_gen957[] = "**sessionnull";
+static const char long_gen957[]  = " NULL MPI_Session";
+static const char short_gen958[] = "**set_thread_affinity";
+static const char long_gen958[]  = "Failed to set the async thread affinity";
+static const char short_gen959[] = "**signal";
+static const char long_gen959[]  = "signal() failed";
+static const char short_gen960[] = "**snprintf";
+static const char long_gen960[]  = "snprintf returned an invalid number";
+static const char short_gen961[] = "**sock_accept";
+static const char long_gen961[]  = "accept of socket fd failed";
+static const char short_gen962[] = "**sock_closed";
+static const char long_gen962[]  = "socket closed";
+static const char short_gen963[] = "**sock_connect";
+static const char long_gen963[]  = "connect failed";
+static const char short_gen964[] = "**sock_create";
+static const char long_gen964[]  = "unable to create a socket";
+static const char short_gen965[] = "**sock_gethost";
+static const char long_gen965[]  = "gethostname failed";
+static const char short_gen966[] = "**sock_post_close";
+static const char long_gen966[]  = "posting a close of the socket failed";
+static const char short_gen967[] = "**sockaddrfailed";
+static const char long_gen967[]  = " MPL_get_sockaddr failed";
+static const char short_gen968[] = "**sock|badbuf";
+static const char long_gen968[]  = "the supplied buffer contains invalid memory";
+static const char short_gen969[] = "**sock|badhandle";
+static const char long_gen969[]  = "sock contains an invalid handle";
+static const char short_gen970[] = "**sock|badhdbuf";
+static const char long_gen970[]  = "a memory fault occurred while accessing the host description string";
+static const char short_gen971[] = "**sock|badhdlen";
+static const char long_gen971[]  = "host description string to small to store description";
+static const char short_gen972[] = "**sock|badhdmax";
+static const char long_gen972[]  = "the length of the host description string must be non-negative";
+static const char short_gen973[] = "**sock|badiovn";
+static const char long_gen973[]  = "size of iov is invalid";
+static const char short_gen974[] = "**sock|badlen";
+static const char long_gen974[]  = "bad length parameter(s)";
+static const char short_gen975[] = "**sock|badport";
+static const char long_gen975[]  = "port number is out of range";
+static const char short_gen976[] = "**sock|badsock";
+static const char long_gen976[]  = "supplied sock is corrupt";
+static const char short_gen977[] = "**sock|closing";
+static const char long_gen977[]  = "sock is in the process of being closed locally";
+static const char short_gen978[] = "**sock|closing_already";
+static const char long_gen978[]  = "a close operation is already posted";
+static const char short_gen979[] = "**sock|connclosed";
+static const char long_gen979[]  = "connection closed by peer";
+static const char short_gen980[] = "**sock|connfailed";
+static const char long_gen980[]  = "connection failure";
+static const char short_gen981[] = "**sock|connrefused";
+static const char long_gen981[]  = "connection refused";
+static const char short_gen982[] = "**sock|listener_bad_sock";
+static const char long_gen982[]  = "supplied sock is not a listener";
+static const char short_gen983[] = "**sock|listener_bad_state";
+static const char long_gen983[]  = "supplied listener sock is in a bad state";
+static const char short_gen984[] = "**sock|listener_read";
+static const char long_gen984[]  = "read operation not allowed on a listener";
+static const char short_gen985[] = "**sock|listener_write";
+static const char long_gen985[]  = "write operation not allowed on a listener";
+static const char short_gen986[] = "**sock|nosock";
+static const char long_gen986[]  = "no new sock was available to accept";
+static const char short_gen987[] = "**sock|notconnected";
+static const char long_gen987[]  = "sock is not connected";
+static const char short_gen988[] = "**sock|oserror";
+static const char long_gen988[]  = "unexpected operating system error";
+static const char short_gen989[] = "**sock|osnomem";
+static const char long_gen989[]  = "operating system routine failed due to lack of memory";
+static const char short_gen990[] = "**sock|poll|accept";
+static const char long_gen990[]  = "accept failed to acquire a new socket";
+static const char short_gen991[] = "**sock|poll|bind";
+static const char long_gen991[]  = "unable to bind socket to port";
+static const char short_gen992[] = "**sock|poll|eqfail";
+static const char long_gen992[]  = "fatal error: failed to enqueue an event; event was lost";
+static const char short_gen993[] = "**sock|poll|eqmalloc";
+static const char long_gen993[]  = "MPL_malloc failed to allocate memory for an event queue structure";
+static const char short_gen994[] = "**sock|poll|listen";
+static const char long_gen994[]  = "listen() failed";
+static const char short_gen995[] = "**sock|poll|nodelay";
+static const char long_gen995[]  = "unable to set TCP no delay attribute on socket";
+static const char short_gen996[] = "**sock|poll|nonblock";
+static const char long_gen996[]  = "unable to set socket to nonblocking";
+static const char short_gen997[] = "**sock|poll|pipe";
+static const char long_gen997[]  = "unable to allocate pipe to wakeup a blocking poll()";
+static const char short_gen998[] = "**sock|poll|pipenonblock";
+static const char long_gen998[]  = "unable to set wakeup pipe to nonblocking";
+static const char short_gen999[] = "**sock|poll|reuseaddr";
+static const char long_gen999[]  = "unable to set reuseaddr attribute on socket";
+static const char short_gen1000[] = "**sock|poll|setrcvbufsz";
+static const char long_gen1000[]  = " unable to set the receive socket buffer size";
+static const char short_gen1001[] = "**sock|poll|setsndbufsz";
+static const char long_gen1001[]  = " unable to set the send socket buffer size";
+static const char short_gen1002[] = "**sock|poll|socket";
+static const char long_gen1002[]  = "unable to obtain new socket";
+static const char short_gen1003[] = "**sock|poll|unhandledstate";
+static const char long_gen1003[]  = "encountered an unexpected state";
+static const char short_gen1004[] = "**sock|poll|unhandledtype";
+static const char long_gen1004[]  = "encountered an unexpected sock type";
+static const char short_gen1005[] = "**sock|reads";
+static const char long_gen1005[]  = "attempt to perform multiple simultaneous reads";
+static const char short_gen1006[] = "**sock|setalloc";
+static const char long_gen1006[]  = "unable to allocate a new sock set object";
+static const char short_gen1007[] = "**sock|sockalloc";
+static const char long_gen1007[]  = "unable to allocate a new sock object";
+static const char short_gen1008[] = "**sock|uninit";
+static const char long_gen1008[]  = "Sock library has not been initialized";
+static const char short_gen1009[] = "**sock|writes";
+static const char long_gen1009[]  = "attempt to perform multiple simultaneous writes";
+static const char short_gen1010[] = "**spawn";
+static const char long_gen1010[]  = "Error in spawn call";
+static const char short_gen1011[] = "**splittype";
+static const char long_gen1011[]  = "Invalid split_type argument";
+static const char short_gen1012[] = "**storageorder";
+static const char long_gen1012[]  = "Invalid storage order";
+static const char short_gen1013[] = "**streamcomm_dstidx";
+static const char long_gen1013[]  = "The destination stream index exceeds the number of streams.";
+static const char short_gen1014[] = "**streamcomm_notmult";
+static const char long_gen1014[]  = "The communicator is not a multiplex stream communicator.";
+static const char short_gen1015[] = "**streamcomm_srcidx";
+static const char long_gen1015[]  = "The source stream index exceeds the number of streams.";
+static const char short_gen1016[] = "**stride";
+static const char long_gen1016[]  = "Range does not terminate";
+static const char short_gen1017[] = "**stridezero";
+static const char long_gen1017[]  = "Zero stride is invalid";
+static const char short_gen1018[] = "**success";
+static const char long_gen1018[]  = "No MPI error";
+static const char short_gen1019[] = "**tag";
+static const char long_gen1019[]  = "Invalid tag";
+static const char short_gen1020[] = "**tcp_cleanup_fail";
+static const char long_gen1020[]  = "Error while cleaning up failed connection";
+static const char short_gen1021[] = "**thread_level";
+static const char long_gen1021[]  = " Invalid thread level";
+static const char short_gen1022[] = "**timeout";
+static const char long_gen1022[]  = "Operation timed out";
+static const char short_gen1023[] = "**tmpvc_connect_fail";
+static const char long_gen1023[]  = "Failure during connection protocol";
+static const char short_gen1024[] = "**too_big_for_input";
+static const char long_gen1024[]  = "The input is too big for internal routines";
+static const char short_gen1025[] = "**toomanycomm";
+static const char long_gen1025[]  = "Too many communicators";
+static const char short_gen1026[] = "**toomanycommfrag";
+static const char long_gen1026[]  = " Cannot allocate context ID because of fragmentation";
+static const char short_gen1027[] = "**toomanynbc";
+static const char long_gen1027[]  = " too many outstanding nonblocking collectives detected";
+static const char short_gen1028[] = "**topology";
+static const char long_gen1028[]  = "Invalid topology";
+static const char short_gen1029[] = "**topotoolarge";
+static const char long_gen1029[]  = "Topology size is greater than communicator size";
+static const char short_gen1030[] = "**treetype";
+static const char long_gen1030[]  = " Invalid tree type used for initializing Tree algorithms";
+static const char short_gen1031[] = "**truncate";
+static const char long_gen1031[]  = "Message truncated";
+static const char short_gen1032[] = "**typeinitbadmem";
+static const char long_gen1032[]  = "builtin datatype handle references invalid memory";
+static const char short_gen1033[] = "**typematchnoclass";
+static const char long_gen1033[]  = "The value of typeclass is not one of MPI_TYPECLASS_REAL, MPI_TYPECLASS_INTEGER, or MPI_TYPECLASS_COMPLEX";
+static const char short_gen1034[] = "**typematchsize";
+static const char long_gen1034[]  = "No MPI datatype available for the given typeclass and size";
+static const char short_gen1035[] = "**typenotpredefined";
+static const char long_gen1035[]  = " Datatype must be predefined";
+static const char short_gen1036[] = "**ucx_nm_notsupported";
+static const char long_gen1036[]  = "The function is currently not supported with ucx netmod";
+static const char short_gen1037[] = "**ucx_nm_rq_error";
+static const char long_gen1037[]  = " return failed request in UCX netmod";
+static const char short_gen1038[] = "**ucx_nm_status";
+static const char long_gen1038[]  = " ucx function returned with failed status";
+static const char short_gen1039[] = "**unknown";
+static const char long_gen1039[]  = "Unknown error.  Please file a bug report.";
+static const char short_gen1040[] = "**unknowngpid";
+static const char long_gen1040[]  = "Internal MPI error: Unknown gpid";
+static const char short_gen1041[] = "**unsupporteddatarep";
+static const char long_gen1041[]  = "Only native data representation currently supported";
+static const char short_gen1042[] = "**unweightedboth";
+static const char long_gen1042[]  = "Must specify MPI_UNWEIGHTED for both or neither weight arguments";
+static const char short_gen1043[] = "**user";
+static const char long_gen1043[]  = "user defined function returned an error code";
+static const char short_gen1044[] = "**vc_in_error_state";
+static const char long_gen1044[]  = "Connection is in error state";
+static const char short_gen1045[] = "**win";
+static const char long_gen1045[]  = "Invalid MPI_Win";
+static const char short_gen1046[] = "**winInvalidOp";
+static const char long_gen1046[]  = " Invalid RMA operation";
+static const char short_gen1047[] = "**windows_mutex";
+static const char long_gen1047[]  = "Windows mutex routine failed";
+static const char short_gen1048[] = "**winflavor";
+static const char long_gen1048[]  = " Window flavor is not compatible with the given operation";
+static const char short_gen1049[] = "**winnoprogress";
+static const char long_gen1049[]  = " Detected an error while in progress wait for RMA messages";
+static const char short_gen1050[] = "**winnull";
+static const char long_gen1050[]  = "Null MPI_Win";
+static const char short_gen1051[] = "**write";
+static const char long_gen1051[]  = "write failed";
+static const char short_gen1052[] = "**writev";
+static const char long_gen1052[]  = "writev failed";
+static const char short_gen1053[] = "**xpmem_attach";
+static const char long_gen1053[]  = " xpmem_attach failed";
+static const char short_gen1054[] = "**xpmem_get";
+static const char long_gen1054[]  = " xpmem_get failed";
+static const char short_gen1055[] = "**xpmem_make";
+static const char long_gen1055[]  = " xpmem_make failed";
+static const char short_gen1056[] = "**xpmem_release";
+static const char long_gen1056[]  = " xpmem_release failed";
+static const char short_gen1057[] = "**xpmem_remove";
+static const char long_gen1057[]  = " xpmem_remove failed";
+static const char short_gen1058[] = "**xpmem_segid";
+static const char long_gen1058[]  = " xpmem remote segid is unset";
+static const char short_gen1059[] = "**xpmem_segtree_init";
+static const char long_gen1059[]  = " xpmem_segtree_init failed";
+static const char short_gen1060[] = "**yaksa";
+static const char long_gen1060[]  = "Yaksa library returned an error";
 
-static const int generic_msgs_len = 1059;
+static const int generic_msgs_len = 1061;
 static const msgpair generic_err_msgs[] = {
     { 0xacebad03, short_gen0, long_gen0, 0xcb0bfa11 },
     { 0xacebad03, short_gen1, long_gen1, 0xcb0bfa11 },
@@ -3307,7 +3311,9 @@
     { 0xacebad03, short_gen1055, long_gen1055, 0xcb0bfa11 },
     { 0xacebad03, short_gen1056, long_gen1056, 0xcb0bfa11 },
     { 0xacebad03, short_gen1057, long_gen1057, 0xcb0bfa11 },
-    { 0xacebad03, short_gen1058, long_gen1058, 0xcb0bfa11 }
+    { 0xacebad03, short_gen1058, long_gen1058, 0xcb0bfa11 },
+    { 0xacebad03, short_gen1059, long_gen1059, 0xcb0bfa11 },
+    { 0xacebad03, short_gen1060, long_gen1060, 0xcb0bfa11 }
 };
 #endif
 
@@ -3392,1484 +3398,1488 @@
 static const char long_spc38[]  = "Cannot free permanent communicator %s";
 static const char short_spc39[] = "**countneg %d";
 static const char long_spc39[]  = "Negative count, value is %d";
-static const char short_spc40[] = "**darrayblock %d";
-static const char long_spc40[]  = "Value of m in block(m) distribution is %d must must be positive";
-static const char short_spc41[] = "**darrayblock2 %d %d";
-static const char long_spc41[]  = "m * nprocs is %d but must equal the array size %d and is not valid for block(m) distribution";
-static const char short_spc42[] = "**darraycyclic %d";
-static const char long_spc42[]  = "Value of m is %d but must be positive for a cyclic(m) distribution";
-static const char short_spc43[] = "**datarepused %s";
-static const char long_spc43[]  = "The requested datarep name %s has already been specified to MPI_REGISTER_DATAREP";
-static const char short_spc44[] = "**dev|pg_not_found %p";
-static const char long_spc44[]  = "the specified process group object could not be located (pg=%p)";
-static const char short_spc45[] = "**dev|vcrt_create %s";
-static const char long_spc45[]  = "failed to create VCRT for %s";
-static const char short_spc46[] = "**dimsmany %d %d";
-static const char long_spc46[]  = "Number of dimensions %d is too large (maximum is %d)";
-static const char short_spc47[] = "**dispunit %d";
-static const char long_spc47[]  = "disp_unit argument is not positive integer (value is %d)";
-static const char short_spc48[] = "**dtypenull %s";
-static const char long_spc48[]  = "Datatype for argument %s is a null datatype";
-static const char short_spc49[] = "**dupprocesses %d";
-static const char long_spc49[]  = "Local and remote groups in MPI_Intercomm_create must not contain the same processes; both contain process %d";
-static const char short_spc50[] = "**edgeoutrange %d %d %d";
-static const char long_spc50[]  = "Edge index edges[%d] is %d but must be nonnegative and less than %d";
-static const char short_spc51[] = "**exceeded_connect_tries %d";
-static const char long_spc51[]  = "Unable to establish connection to rank %d";
-static const char short_spc52[] = "**f90typecomplexnone %d %d";
-static const char long_spc52[]  = " No complex type with both %d digits of precision and an exponent range of %d is available";
-static const char short_spc53[] = "**f90typeintnone %d";
-static const char long_spc53[]  = " No integer type with %d digits of range is available";
-static const char short_spc54[] = "**f90typerealnone %d %d";
-static const char long_spc54[]  = " No real type with both %d digits of precision and an exponent range of %d is available";
-static const char short_spc55[] = "**fail %s %d";
-static const char long_spc55[]  = "%s (errno %d)";
-static const char short_spc56[] = "**fileaccess %s";
-static const char long_spc56[]  = "Access denied to file %s";
-static const char short_spc57[] = "**filename %s";
-static const char long_spc57[]  = "Invalid file name %s";
-static const char short_spc58[] = "**filenamedir %s";
-static const char long_spc58[]  = "Invalid or missing directory %s";
-static const char short_spc59[] = "**filenamelong %s %d";
-static const char long_spc59[]  = "Pathname %s too long (%d characters)";
-static const char short_spc60[] = "**filenoexist %s";
-static const char long_spc60[]  = "File %s does not exist";
-static const char short_spc61[] = "**flag %d";
-static const char long_spc61[]  = "invalid flag parameter (flag = %d)";
-static const char short_spc62[] = "**gethostbyname %s %d";
-static const char long_spc62[]  = "gethostbyname failed, %s (errno %d)";
-static const char short_spc63[] = "**getsockname %s";
-static const char long_spc63[]  = "getsockname failed - %s";
-static const char short_spc64[] = "**groupnotincomm %d";
-static const char long_spc64[]  = "Rank %d of the specified group is not a member of this communicator";
-static const char short_spc65[] = "**hcoll_wrong_arg %p %d";
-static const char long_spc65[]  = "Error in hcolrte api: wrong null argument (ec_h.handle = %p, ec_h.rank = %d)";
-static const char short_spc66[] = "**iface_notfound %s";
-static const char long_spc66[]  = "The network interface, \"%s\", specified in MPIR_CVAR_CH3_NETWORK_IFACE was not found.";
-static const char short_spc67[] = "**indexneg %d %d";
-static const char long_spc67[]  = "Index value for index[%d] is %d but must be nonnegative";
-static const char short_spc68[] = "**indexnonmonotone %d %d %d";
-static const char long_spc68[]  = "Index values in graph topology must be monotone nondecreasing but index[%d] is %d but the next index value is %d";
-static const char short_spc69[] = "**infonkey %d %d";
-static const char long_spc69[]  = "Requested key %d but this MPI_Info only has %d keys";
-static const char short_spc70[] = "**infonokey %s";
-static const char long_spc70[]  = "MPI_Info key %s is not defined ";
-static const char short_spc71[] = "**infonoteq %s";
-static const char long_spc71[]  = "MPI_Info value with key %s is not consistent for all processes";
-static const char short_spc72[] = "**intern %s";
-static const char long_spc72[]  = "Internal MPI error!  %s";
-static const char short_spc73[] = "**invalid_handle %d";
-static const char long_spc73[]  = "invalid handle (%d)";
-static const char short_spc74[] = "**invalid_netmod %s";
-static const char long_spc74[]  = "Invalid netmod specified (%s)";
-static const char short_spc75[] = "**invalid_refcount %d";
-static const char long_spc75[]  = "invalid reference count (%d)";
-static const char short_spc76[] = "**invalidmembind %d";
-static const char long_spc76[]  = " cannot bind memory to object (%d). A memory object id was expected but a non-memory object id was passed instead";
-static const char short_spc77[] = "**invalidpkt %d";
-static const char long_spc77[]  = " Invalid packet type (%d)";
-static const char short_spc78[] = "**io %s";
-static const char long_spc78[]  = "Other I/O error %s";
-static const char short_spc79[] = "**join_portname %s %s";
-static const char long_spc79[]  = "local %s, remote %s";
-static const char short_spc80[] = "**join_recv %d";
-static const char long_spc80[]  = "recv from the socket failed (errno %d)";
-static const char short_spc81[] = "**join_send %d";
-static const char long_spc81[]  = "send on the socket failed (errno %d)";
-static const char short_spc82[] = "**keyvalobj %s";
-static const char long_spc82[]  = "Keyval was not defined for %s objects";
-static const char short_spc83[] = "**listen %s %d";
-static const char long_spc83[]  = "listen failed, %s (errno %d)";
-static const char short_spc84[] = "**locktype %d";
-static const char long_spc84[]  = "Invalid locktype argument (%d)";
-static const char short_spc85[] = "**memcpyalias %p %p %L";
-static const char long_spc85[]  = "memcpy arguments alias each other, dst=%p src=%p len=%L";
-static const char short_spc86[] = "**mpi_abort %C %d";
-static const char long_spc86[]  = "MPI_Abort(%C, errorcode=%d) failed";
-static const char short_spc87[] = "**mpi_accumulate %p %d %D %d %L %d %D %O %W";
-static const char long_spc87[]  = "MPI_Accumulate(origin_addr=%p, origin_count=%d, %D, target_rank=%d, target_disp=%L, target_count=%d, %D, %O, %W) failed";
-static const char short_spc88[] = "**mpi_accumulate_c %p %c %D %d %L %c %D %O %W";
-static const char long_spc88[]  = "MPI_Accumulate_c(origin_addr=%p, origin_count=%c, %D, target_rank=%d, target_disp=%L, target_count=%c, %D, %O, %W) failed";
-static const char short_spc89[] = "**mpi_add_error_class %p";
-static const char long_spc89[]  = "MPI_Add_error_class(errorclass=%p) failed";
-static const char short_spc90[] = "**mpi_add_error_code %d %p";
-static const char long_spc90[]  = "MPI_Add_error_code(errorclass=%d, errorcode=%p) failed";
-static const char short_spc91[] = "**mpi_add_error_string %d %s";
-static const char long_spc91[]  = "MPI_Add_error_string(errorcode=%d, string=%s) failed";
-static const char short_spc92[] = "**mpi_allgather %p %d %D %p %d %D %C";
-static const char long_spc92[]  = "MPI_Allgather(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcount=%d, %D, %C) failed";
-static const char short_spc93[] = "**mpi_allgather_c %p %c %D %p %c %D %C";
-static const char long_spc93[]  = "MPI_Allgather_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcount=%c, %D, %C) failed";
-static const char short_spc94[] = "**mpi_allgather_init %p %d %D %p %d %D %C %I %p";
-static const char long_spc94[]  = "MPI_Allgather_init(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcount=%d, %D, %C, %I, request=%p) failed";
-static const char short_spc95[] = "**mpi_allgather_init_c %p %c %D %p %c %D %C %I %p";
-static const char long_spc95[]  = "MPI_Allgather_init_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcount=%c, %D, %C, %I, request=%p) failed";
-static const char short_spc96[] = "**mpi_allgatherv %p %d %D %p %p %p %D %C";
-static const char long_spc96[]  = "MPI_Allgatherv(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcounts=%p, displs=%p, %D, %C) failed";
-static const char short_spc97[] = "**mpi_allgatherv_c %p %c %D %p %p %p %D %C";
-static const char long_spc97[]  = "MPI_Allgatherv_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcounts=%p, displs=%p, %D, %C) failed";
-static const char short_spc98[] = "**mpi_allgatherv_init %p %d %D %p %p %p %D %C %I %p";
-static const char long_spc98[]  = "MPI_Allgatherv_init(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcounts=%p, displs=%p, %D, %C, %I, request=%p) failed";
-static const char short_spc99[] = "**mpi_allgatherv_init_c %p %c %D %p %p %p %D %C %I %p";
-static const char long_spc99[]  = "MPI_Allgatherv_init_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcounts=%p, displs=%p, %D, %C, %I, request=%p) failed";
-static const char short_spc100[] = "**mpi_alloc_mem %L %I %p";
-static const char long_spc100[]  = "MPI_Alloc_mem(size=%L, %I, baseptr=%p) failed";
-static const char short_spc101[] = "**mpi_allreduce %p %p %d %D %O %C";
-static const char long_spc101[]  = "MPI_Allreduce(sendbuf=%p, recvbuf=%p, count=%d, %D, %O, %C) failed";
-static const char short_spc102[] = "**mpi_allreduce_c %p %p %c %D %O %C";
-static const char long_spc102[]  = "MPI_Allreduce_c(sendbuf=%p, recvbuf=%p, count=%c, %D, %O, %C) failed";
-static const char short_spc103[] = "**mpi_allreduce_init %p %p %d %D %O %C %I %p";
-static const char long_spc103[]  = "MPI_Allreduce_init(sendbuf=%p, recvbuf=%p, count=%d, %D, %O, %C, %I, request=%p) failed";
-static const char short_spc104[] = "**mpi_allreduce_init_c %p %p %c %D %O %C %I %p";
-static const char long_spc104[]  = "MPI_Allreduce_init_c(sendbuf=%p, recvbuf=%p, count=%c, %D, %O, %C, %I, request=%p) failed";
-static const char short_spc105[] = "**mpi_alltoall %p %d %D %p %d %D %C";
-static const char long_spc105[]  = "MPI_Alltoall(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcount=%d, %D, %C) failed";
-static const char short_spc106[] = "**mpi_alltoall_c %p %c %D %p %c %D %C";
-static const char long_spc106[]  = "MPI_Alltoall_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcount=%c, %D, %C) failed";
-static const char short_spc107[] = "**mpi_alltoall_init %p %d %D %p %d %D %C %I %p";
-static const char long_spc107[]  = "MPI_Alltoall_init(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcount=%d, %D, %C, %I, request=%p) failed";
-static const char short_spc108[] = "**mpi_alltoall_init_c %p %c %D %p %c %D %C %I %p";
-static const char long_spc108[]  = "MPI_Alltoall_init_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcount=%c, %D, %C, %I, request=%p) failed";
-static const char short_spc109[] = "**mpi_alltoallv %p %p %p %D %p %p %p %D %C";
-static const char long_spc109[]  = "MPI_Alltoallv(sendbuf=%p, sendcounts=%p, sdispls=%p, %D, recvbuf=%p, recvcounts=%p, rdispls=%p, %D, %C) failed";
-static const char short_spc110[] = "**mpi_alltoallv_c %p %p %p %D %p %p %p %D %C";
-static const char long_spc110[]  = "MPI_Alltoallv_c(sendbuf=%p, sendcounts=%p, sdispls=%p, %D, recvbuf=%p, recvcounts=%p, rdispls=%p, %D, %C) failed";
-static const char short_spc111[] = "**mpi_alltoallv_init %p %p %p %D %p %p %p %D %C %I %p";
-static const char long_spc111[]  = "MPI_Alltoallv_init(sendbuf=%p, sendcounts=%p, sdispls=%p, %D, recvbuf=%p, recvcounts=%p, rdispls=%p, %D, %C, %I, request=%p) failed";
-static const char short_spc112[] = "**mpi_alltoallv_init_c %p %p %p %D %p %p %p %D %C %I %p";
-static const char long_spc112[]  = "MPI_Alltoallv_init_c(sendbuf=%p, sendcounts=%p, sdispls=%p, %D, recvbuf=%p, recvcounts=%p, rdispls=%p, %D, %C, %I, request=%p) failed";
-static const char short_spc113[] = "**mpi_alltoallw %p %p %p %p %p %p %p %p %C";
-static const char long_spc113[]  = "MPI_Alltoallw(sendbuf=%p, sendcounts=%p, sdispls=%p, sendtypes=%p, recvbuf=%p, recvcounts=%p, rdispls=%p, recvtypes=%p, %C) failed";
-static const char short_spc114[] = "**mpi_alltoallw_c %p %p %p %p %p %p %p %p %C";
-static const char long_spc114[]  = "MPI_Alltoallw_c(sendbuf=%p, sendcounts=%p, sdispls=%p, sendtypes=%p, recvbuf=%p, recvcounts=%p, rdispls=%p, recvtypes=%p, %C) failed";
-static const char short_spc115[] = "**mpi_alltoallw_init %p %p %p %p %p %p %p %p %C %I %p";
-static const char long_spc115[]  = "MPI_Alltoallw_init(sendbuf=%p, sendcounts=%p, sdispls=%p, sendtypes=%p, recvbuf=%p, recvcounts=%p, rdispls=%p, recvtypes=%p, %C, %I, request=%p) failed";
-static const char short_spc116[] = "**mpi_alltoallw_init_c %p %p %p %p %p %p %p %p %C %I %p";
-static const char long_spc116[]  = "MPI_Alltoallw_init_c(sendbuf=%p, sendcounts=%p, sdispls=%p, sendtypes=%p, recvbuf=%p, recvcounts=%p, rdispls=%p, recvtypes=%p, %C, %I, request=%p) failed";
-static const char short_spc117[] = "**mpi_barrier %C";
-static const char long_spc117[]  = "MPI_Barrier(%C) failed";
-static const char short_spc118[] = "**mpi_barrier_init %C %I %p";
-static const char long_spc118[]  = "MPI_Barrier_init(%C, %I, request=%p) failed";
-static const char short_spc119[] = "**mpi_bcast %p %d %D %i %C";
-static const char long_spc119[]  = "MPI_Bcast(buffer=%p, count=%d, %D, %i, %C) failed";
-static const char short_spc120[] = "**mpi_bcast_c %p %c %D %i %C";
-static const char long_spc120[]  = "MPI_Bcast_c(buffer=%p, count=%c, %D, %i, %C) failed";
-static const char short_spc121[] = "**mpi_bcast_init %p %d %D %i %C %I %p";
-static const char long_spc121[]  = "MPI_Bcast_init(buffer=%p, count=%d, %D, %i, %C, %I, request=%p) failed";
-static const char short_spc122[] = "**mpi_bcast_init_c %p %c %D %i %C %I %p";
-static const char long_spc122[]  = "MPI_Bcast_init_c(buffer=%p, count=%c, %D, %i, %C, %I, request=%p) failed";
-static const char short_spc123[] = "**mpi_bsend %p %d %D %i %t %C";
-static const char long_spc123[]  = "MPI_Bsend(buf=%p, count=%d, %D, %i, %t, %C) failed";
-static const char short_spc124[] = "**mpi_bsend_c %p %c %D %i %t %C";
-static const char long_spc124[]  = "MPI_Bsend_c(buf=%p, count=%c, %D, %i, %t, %C) failed";
-static const char short_spc125[] = "**mpi_bsend_init %p %d %D %i %t %C %p";
-static const char long_spc125[]  = "MPI_Bsend_init(buf=%p, count=%d, %D, %i, %t, %C, request=%p) failed";
-static const char short_spc126[] = "**mpi_bsend_init_c %p %c %D %i %t %C %p";
-static const char long_spc126[]  = "MPI_Bsend_init_c(buf=%p, count=%c, %D, %i, %t, %C, request=%p) failed";
-static const char short_spc127[] = "**mpi_buffer_attach %p %d";
-static const char long_spc127[]  = "MPI_Buffer_attach(buffer=%p, size=%d) failed";
-static const char short_spc128[] = "**mpi_buffer_attach_c %p %c";
-static const char long_spc128[]  = "MPI_Buffer_attach_c(buffer=%p, size=%c) failed";
-static const char short_spc129[] = "**mpi_buffer_detach %p %p";
-static const char long_spc129[]  = "MPI_Buffer_detach(buffer_addr=%p, size=%p) failed";
-static const char short_spc130[] = "**mpi_buffer_detach_c %p %p";
-static const char long_spc130[]  = "MPI_Buffer_detach_c(buffer_addr=%p, size=%p) failed";
-static const char short_spc131[] = "**mpi_cancel %p";
-static const char long_spc131[]  = "MPI_Cancel(request=%p) failed";
-static const char short_spc132[] = "**mpi_cart_coords %C %i %d %p";
-static const char long_spc132[]  = "MPI_Cart_coords(%C, %i, maxdims=%d, coords=%p) failed";
-static const char short_spc133[] = "**mpi_cart_create %C %d %p %p %d %p";
-static const char long_spc133[]  = "MPI_Cart_create(%C, ndims=%d, dims=%p, periods=%p, reorder=%d, comm_cart=%p) failed";
-static const char short_spc134[] = "**mpi_cart_get %C %d %p %p %p";
-static const char long_spc134[]  = "MPI_Cart_get(%C, maxdims=%d, dims=%p, periods=%p, coords=%p) failed";
-static const char short_spc135[] = "**mpi_cart_map %C %d %p %p %p";
-static const char long_spc135[]  = "MPI_Cart_map(%C, ndims=%d, dims=%p, periods=%p, newrank=%p) failed";
-static const char short_spc136[] = "**mpi_cart_rank %C %p %p";
-static const char long_spc136[]  = "MPI_Cart_rank(%C, coords=%p, rank=%p) failed";
-static const char short_spc137[] = "**mpi_cart_shift %C %d %d %p %p";
-static const char long_spc137[]  = "MPI_Cart_shift(%C, direction=%d, disp=%d, rank_source=%p, rank_dest=%p) failed";
-static const char short_spc138[] = "**mpi_cart_sub %C %p %p";
-static const char long_spc138[]  = "MPI_Cart_sub(%C, remain_dims=%p, newcomm=%p) failed";
-static const char short_spc139[] = "**mpi_cartdim_get %C %p";
-static const char long_spc139[]  = "MPI_Cartdim_get(%C, ndims=%p) failed";
-static const char short_spc140[] = "**mpi_close_port %s";
-static const char long_spc140[]  = "MPI_Close_port(port_name=%s) failed";
-static const char short_spc141[] = "**mpi_comm_accept %s %I %i %C %p";
-static const char long_spc141[]  = "MPI_Comm_accept(port_name=%s, %I, %i, %C, newcomm=%p) failed";
-static const char short_spc142[] = "**mpi_comm_call_errhandler %C %d";
-static const char long_spc142[]  = "MPI_Comm_call_errhandler(%C, errorcode=%d) failed";
-static const char short_spc143[] = "**mpi_comm_compare %C %C %p";
-static const char long_spc143[]  = "MPI_Comm_compare(%C, %C, result=%p) failed";
-static const char short_spc144[] = "**mpi_comm_connect %s %I %i %C %p";
-static const char long_spc144[]  = "MPI_Comm_connect(port_name=%s, %I, %i, %C, newcomm=%p) failed";
-static const char short_spc145[] = "**mpi_comm_create %C %G %p";
-static const char long_spc145[]  = "MPI_Comm_create(%C, %G, newcomm=%p) failed";
-static const char short_spc146[] = "**mpi_comm_create_errhandler %p %p";
-static const char long_spc146[]  = "MPI_Comm_create_errhandler(comm_errhandler_fn=%p, errhandler=%p) failed";
-static const char short_spc147[] = "**mpi_comm_create_from_group %G %s %I %E %p";
-static const char long_spc147[]  = "MPI_Comm_create_from_group(%G, stringtag=%s, %I, %E, newcomm=%p) failed";
-static const char short_spc148[] = "**mpi_comm_create_group %C %G %t %p";
-static const char long_spc148[]  = "MPI_Comm_create_group(%C, %G, %t, newcomm=%p) failed";
-static const char short_spc149[] = "**mpi_comm_create_keyval %p %p %p %p";
-static const char long_spc149[]  = "MPI_Comm_create_keyval(comm_copy_attr_fn=%p, comm_delete_attr_fn=%p, comm_keyval=%p, extra_state=%p) failed";
-static const char short_spc150[] = "**mpi_comm_delete_attr %C %K";
-static const char long_spc150[]  = "MPI_Comm_delete_attr(%C, %K) failed";
-static const char short_spc151[] = "**mpi_comm_disconnect %p";
-static const char long_spc151[]  = "MPI_Comm_disconnect(comm=%p) failed";
-static const char short_spc152[] = "**mpi_comm_dup %C %p";
-static const char long_spc152[]  = "MPI_Comm_dup(%C, newcomm=%p) failed";
-static const char short_spc153[] = "**mpi_comm_dup_with_info %C %I %p";
-static const char long_spc153[]  = "MPI_Comm_dup_with_info(%C, %I, newcomm=%p) failed";
-static const char short_spc154[] = "**mpi_comm_free %p";
-static const char long_spc154[]  = "MPI_Comm_free(comm=%p) failed";
-static const char short_spc155[] = "**mpi_comm_free_keyval %p";
-static const char long_spc155[]  = "MPI_Comm_free_keyval(comm_keyval=%p) failed";
-static const char short_spc156[] = "**mpi_comm_get_attr %C %K %p %p";
-static const char long_spc156[]  = "MPI_Comm_get_attr(%C, %K, attribute_val=%p, flag=%p) failed";
-static const char short_spc157[] = "**mpi_comm_get_errhandler %C %p";
-static const char long_spc157[]  = "MPI_Comm_get_errhandler(%C, errhandler=%p) failed";
-static const char short_spc158[] = "**mpi_comm_get_info %C %p";
-static const char long_spc158[]  = "MPI_Comm_get_info(%C, info_used=%p) failed";
-static const char short_spc159[] = "**mpi_comm_get_name %C %p %p";
-static const char long_spc159[]  = "MPI_Comm_get_name(%C, comm_name=%p, resultlen=%p) failed";
-static const char short_spc160[] = "**mpi_comm_get_parent %p";
-static const char long_spc160[]  = "MPI_Comm_get_parent(parent=%p) failed";
-static const char short_spc161[] = "**mpi_comm_group %C %p";
-static const char long_spc161[]  = "MPI_Comm_group(%C, group=%p) failed";
-static const char short_spc162[] = "**mpi_comm_idup %C %p %p";
-static const char long_spc162[]  = "MPI_Comm_idup(%C, newcomm=%p, request=%p) failed";
-static const char short_spc163[] = "**mpi_comm_idup_with_info %C %I %p %p";
-static const char long_spc163[]  = "MPI_Comm_idup_with_info(%C, %I, newcomm=%p, request=%p) failed";
-static const char short_spc164[] = "**mpi_comm_join %d %p";
-static const char long_spc164[]  = "MPI_Comm_join(fd=%d, intercomm=%p) failed";
-static const char short_spc165[] = "**mpi_comm_rank %C %p";
-static const char long_spc165[]  = "MPI_Comm_rank(%C, rank=%p) failed";
-static const char short_spc166[] = "**mpi_comm_remote_group %C %p";
-static const char long_spc166[]  = "MPI_Comm_remote_group(%C, group=%p) failed";
-static const char short_spc167[] = "**mpi_comm_remote_size %C %p";
-static const char long_spc167[]  = "MPI_Comm_remote_size(%C, size=%p) failed";
-static const char short_spc168[] = "**mpi_comm_set_attr %C %K %p";
-static const char long_spc168[]  = "MPI_Comm_set_attr(%C, %K, attribute_val=%p) failed";
-static const char short_spc169[] = "**mpi_comm_set_errhandler %C %E";
-static const char long_spc169[]  = "MPI_Comm_set_errhandler(%C, %E) failed";
-static const char short_spc170[] = "**mpi_comm_set_info %C %I";
-static const char long_spc170[]  = "MPI_Comm_set_info(%C, %I) failed";
-static const char short_spc171[] = "**mpi_comm_set_name %C %s";
-static const char long_spc171[]  = "MPI_Comm_set_name(%C, comm_name=%s) failed";
-static const char short_spc172[] = "**mpi_comm_size %C %p";
-static const char long_spc172[]  = "MPI_Comm_size(%C, size=%p) failed";
-static const char short_spc173[] = "**mpi_comm_spawn %s %p %d %I %i %C %p %p";
-static const char long_spc173[]  = "MPI_Comm_spawn(command=%s, argv=%p, maxprocs=%d, %I, %i, %C, intercomm=%p, array_of_errcodes=%p) failed";
-static const char short_spc174[] = "**mpi_comm_spawn_multiple %d %p %p %p %p %i %C %p %p";
-static const char long_spc174[]  = "MPI_Comm_spawn_multiple(count=%d, array_of_commands=%p, array_of_argv=%p, array_of_maxprocs=%p, array_of_info=%p, %i, %C, intercomm=%p, array_of_errcodes=%p) failed";
-static const char short_spc175[] = "**mpi_comm_split %C %d %d %p";
-static const char long_spc175[]  = "MPI_Comm_split(%C, color=%d, key=%d, newcomm=%p) failed";
-static const char short_spc176[] = "**mpi_comm_split_type %C %d %d %I %p";
-static const char long_spc176[]  = "MPI_Comm_split_type(%C, split_type=%d, key=%d, %I, newcomm=%p) failed";
-static const char short_spc177[] = "**mpi_comm_test_inter %C %p";
-static const char long_spc177[]  = "MPI_Comm_test_inter(%C, flag=%p) failed";
-static const char short_spc178[] = "**mpi_compare_and_swap %p %p %p %D %d %L %W";
-static const char long_spc178[]  = "MPI_Compare_and_swap(origin_addr=%p, compare_addr=%p, result_addr=%p, %D, target_rank=%d, target_disp=%L, %W) failed";
-static const char short_spc179[] = "**mpi_dims_create %d %d %p";
-static const char long_spc179[]  = "MPI_Dims_create(nnodes=%d, ndims=%d, dims=%p) failed";
-static const char short_spc180[] = "**mpi_dist_graph_create %C %d %p %p %p %p %I %d %p";
-static const char long_spc180[]  = "MPI_Dist_graph_create(%C, n=%d, sources=%p, degrees=%p, destinations=%p, weights=%p, %I, reorder=%d, comm_dist_graph=%p) failed";
-static const char short_spc181[] = "**mpi_dist_graph_create_adjacent %C %d %p %p %d %p %p %I %d %p";
-static const char long_spc181[]  = "MPI_Dist_graph_create_adjacent(%C, indegree=%d, sources=%p, sourceweights=%p, outdegree=%d, destinations=%p, destweights=%p, %I, reorder=%d, comm_dist_graph=%p) failed";
-static const char short_spc182[] = "**mpi_dist_graph_neighbors %C %d %p %p %d %p %p";
-static const char long_spc182[]  = "MPI_Dist_graph_neighbors(%C, maxindegree=%d, sources=%p, sourceweights=%p, maxoutdegree=%d, destinations=%p, destweights=%p) failed";
-static const char short_spc183[] = "**mpi_dist_graph_neighbors_count %C %p %p %p";
-static const char long_spc183[]  = "MPI_Dist_graph_neighbors_count(%C, indegree=%p, outdegree=%p, weighted=%p) failed";
-static const char short_spc184[] = "**mpi_errhandler_free %p";
-static const char long_spc184[]  = "MPI_Errhandler_free(errhandler=%p) failed";
-static const char short_spc185[] = "**mpi_error_class %d %p";
-static const char long_spc185[]  = "MPI_Error_class(errorcode=%d, errorclass=%p) failed";
-static const char short_spc186[] = "**mpi_error_string %d %p %p";
-static const char long_spc186[]  = "MPI_Error_string(errorcode=%d, string=%p, resultlen=%p) failed";
-static const char short_spc187[] = "**mpi_exscan %p %p %d %D %O %C";
-static const char long_spc187[]  = "MPI_Exscan(sendbuf=%p, recvbuf=%p, count=%d, %D, %O, %C) failed";
-static const char short_spc188[] = "**mpi_exscan_c %p %p %c %D %O %C";
-static const char long_spc188[]  = "MPI_Exscan_c(sendbuf=%p, recvbuf=%p, count=%c, %D, %O, %C) failed";
-static const char short_spc189[] = "**mpi_exscan_init %p %p %d %D %O %C %I %p";
-static const char long_spc189[]  = "MPI_Exscan_init(sendbuf=%p, recvbuf=%p, count=%d, %D, %O, %C, %I, request=%p) failed";
-static const char short_spc190[] = "**mpi_exscan_init_c %p %p %c %D %O %C %I %p";
-static const char long_spc190[]  = "MPI_Exscan_init_c(sendbuf=%p, recvbuf=%p, count=%c, %D, %O, %C, %I, request=%p) failed";
-static const char short_spc191[] = "**mpi_fetch_and_op %p %p %D %d %L %O %W";
-static const char long_spc191[]  = "MPI_Fetch_and_op(origin_addr=%p, result_addr=%p, %D, target_rank=%d, target_disp=%L, %O, %W) failed";
-static const char short_spc192[] = "**mpi_file_call_errhandler %F %d";
-static const char long_spc192[]  = "MPI_File_call_errhandler(%F, errorcode=%d) failed";
-static const char short_spc193[] = "**mpi_file_create_errhandler %p %p";
-static const char long_spc193[]  = "MPI_File_create_errhandler(file_errhandler_fn=%p, errhandler=%p) failed";
-static const char short_spc194[] = "**mpi_file_get_errhandler %F %p";
-static const char long_spc194[]  = "MPI_File_get_errhandler(%F, errhandler=%p) failed";
-static const char short_spc195[] = "**mpi_file_set_errhandler %F %E";
-static const char long_spc195[]  = "MPI_File_set_errhandler(%F, %E) failed";
-static const char short_spc196[] = "**mpi_finalized %p";
-static const char long_spc196[]  = "MPI_Finalized(flag=%p) failed";
-static const char short_spc197[] = "**mpi_free_mem %p";
-static const char long_spc197[]  = "MPI_Free_mem(base=%p) failed";
-static const char short_spc198[] = "**mpi_gather %p %d %D %p %d %D %i %C";
-static const char long_spc198[]  = "MPI_Gather(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcount=%d, %D, %i, %C) failed";
-static const char short_spc199[] = "**mpi_gather_c %p %c %D %p %c %D %i %C";
-static const char long_spc199[]  = "MPI_Gather_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcount=%c, %D, %i, %C) failed";
-static const char short_spc200[] = "**mpi_gather_init %p %d %D %p %d %D %i %C %I %p";
-static const char long_spc200[]  = "MPI_Gather_init(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcount=%d, %D, %i, %C, %I, request=%p) failed";
-static const char short_spc201[] = "**mpi_gather_init_c %p %c %D %p %c %D %i %C %I %p";
-static const char long_spc201[]  = "MPI_Gather_init_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcount=%c, %D, %i, %C, %I, request=%p) failed";
-static const char short_spc202[] = "**mpi_gatherv %p %d %D %p %p %p %D %i %C";
-static const char long_spc202[]  = "MPI_Gatherv(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcounts=%p, displs=%p, %D, %i, %C) failed";
-static const char short_spc203[] = "**mpi_gatherv_c %p %c %D %p %p %p %D %i %C";
-static const char long_spc203[]  = "MPI_Gatherv_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcounts=%p, displs=%p, %D, %i, %C) failed";
-static const char short_spc204[] = "**mpi_gatherv_init %p %d %D %p %p %p %D %i %C %I %p";
-static const char long_spc204[]  = "MPI_Gatherv_init(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcounts=%p, displs=%p, %D, %i, %C, %I, request=%p) failed";
-static const char short_spc205[] = "**mpi_gatherv_init_c %p %c %D %p %p %p %D %i %C %I %p";
-static const char long_spc205[]  = "MPI_Gatherv_init_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcounts=%p, displs=%p, %D, %i, %C, %I, request=%p) failed";
-static const char short_spc206[] = "**mpi_get %p %d %D %d %L %d %D %W";
-static const char long_spc206[]  = "MPI_Get(origin_addr=%p, origin_count=%d, %D, target_rank=%d, target_disp=%L, target_count=%d, %D, %W) failed";
-static const char short_spc207[] = "**mpi_get_accumulate %p %d %D %p %d %D %d %L %d %D %O %W";
-static const char long_spc207[]  = "MPI_Get_accumulate(origin_addr=%p, origin_count=%d, %D, result_addr=%p, result_count=%d, %D, target_rank=%d, target_disp=%L, target_count=%d, %D, %O, %W) failed";
-static const char short_spc208[] = "**mpi_get_accumulate_c %p %c %D %p %c %D %d %L %c %D %O %W";
-static const char long_spc208[]  = "MPI_Get_accumulate_c(origin_addr=%p, origin_count=%c, %D, result_addr=%p, result_count=%c, %D, target_rank=%d, target_disp=%L, target_count=%c, %D, %O, %W) failed";
-static const char short_spc209[] = "**mpi_get_address %p %p";
-static const char long_spc209[]  = "MPI_Get_address(location=%p, address=%p) failed";
-static const char short_spc210[] = "**mpi_get_c %p %c %D %d %L %c %D %W";
-static const char long_spc210[]  = "MPI_Get_c(origin_addr=%p, origin_count=%c, %D, target_rank=%d, target_disp=%L, target_count=%c, %D, %W) failed";
-static const char short_spc211[] = "**mpi_get_count %p %D %p";
-static const char long_spc211[]  = "MPI_Get_count(status=%p, %D, count=%p) failed";
-static const char short_spc212[] = "**mpi_get_count_c %p %D %p";
-static const char long_spc212[]  = "MPI_Get_count_c(status=%p, %D, count=%p) failed";
-static const char short_spc213[] = "**mpi_get_elements %p %D %p";
-static const char long_spc213[]  = "MPI_Get_elements(status=%p, %D, count=%p) failed";
-static const char short_spc214[] = "**mpi_get_elements_c %p %D %p";
-static const char long_spc214[]  = "MPI_Get_elements_c(status=%p, %D, count=%p) failed";
-static const char short_spc215[] = "**mpi_get_elements_x %p %D %p";
-static const char long_spc215[]  = "MPI_Get_elements_x(status=%p, %D, count=%p) failed";
-static const char short_spc216[] = "**mpi_get_library_version %p %p";
-static const char long_spc216[]  = "MPI_Get_library_version(version=%p, resultlen=%p) failed";
-static const char short_spc217[] = "**mpi_get_processor_name %p %p";
-static const char long_spc217[]  = "MPI_Get_processor_name(name=%p, resultlen=%p) failed";
-static const char short_spc218[] = "**mpi_get_version %p %p";
-static const char long_spc218[]  = "MPI_Get_version(version=%p, subversion=%p) failed";
-static const char short_spc219[] = "**mpi_graph_create %C %d %p %p %d %p";
-static const char long_spc219[]  = "MPI_Graph_create(%C, nnodes=%d, indx=%p, edges=%p, reorder=%d, comm_graph=%p) failed";
-static const char short_spc220[] = "**mpi_graph_get %C %d %d %p %p";
-static const char long_spc220[]  = "MPI_Graph_get(%C, maxindex=%d, maxedges=%d, indx=%p, edges=%p) failed";
-static const char short_spc221[] = "**mpi_graph_map %C %d %p %p %p";
-static const char long_spc221[]  = "MPI_Graph_map(%C, nnodes=%d, indx=%p, edges=%p, newrank=%p) failed";
-static const char short_spc222[] = "**mpi_graph_neighbors %C %i %d %p";
-static const char long_spc222[]  = "MPI_Graph_neighbors(%C, %i, maxneighbors=%d, neighbors=%p) failed";
-static const char short_spc223[] = "**mpi_graph_neighbors_count %C %i %p";
-static const char long_spc223[]  = "MPI_Graph_neighbors_count(%C, %i, nneighbors=%p) failed";
-static const char short_spc224[] = "**mpi_graphdims_get %C %p %p";
-static const char long_spc224[]  = "MPI_Graphdims_get(%C, nnodes=%p, nedges=%p) failed";
-static const char short_spc225[] = "**mpi_grequest_complete %R";
-static const char long_spc225[]  = "MPI_Grequest_complete(%R) failed";
-static const char short_spc226[] = "**mpi_grequest_start %p %p %p %p %p";
-static const char long_spc226[]  = "MPI_Grequest_start(query_fn=%p, free_fn=%p, cancel_fn=%p, extra_state=%p, request=%p) failed";
-static const char short_spc227[] = "**mpi_group_compare %G %G %p";
-static const char long_spc227[]  = "MPI_Group_compare(%G, %G, result=%p) failed";
-static const char short_spc228[] = "**mpi_group_difference %G %G %p";
-static const char long_spc228[]  = "MPI_Group_difference(%G, %G, newgroup=%p) failed";
-static const char short_spc229[] = "**mpi_group_excl %G %d %p %p";
-static const char long_spc229[]  = "MPI_Group_excl(%G, n=%d, ranks=%p, newgroup=%p) failed";
-static const char short_spc230[] = "**mpi_group_free %p";
-static const char long_spc230[]  = "MPI_Group_free(group=%p) failed";
-static const char short_spc231[] = "**mpi_group_from_session_pset %S %s %p";
-static const char long_spc231[]  = "MPI_Group_from_session_pset(%S, pset_name=%s, newgroup=%p) failed";
-static const char short_spc232[] = "**mpi_group_incl %G %d %p %p";
-static const char long_spc232[]  = "MPI_Group_incl(%G, n=%d, ranks=%p, newgroup=%p) failed";
-static const char short_spc233[] = "**mpi_group_intersection %G %G %p";
-static const char long_spc233[]  = "MPI_Group_intersection(%G, %G, newgroup=%p) failed";
-static const char short_spc234[] = "**mpi_group_range_excl %G %d %p %p";
-static const char long_spc234[]  = "MPI_Group_range_excl(%G, n=%d, ranges=%p, newgroup=%p) failed";
-static const char short_spc235[] = "**mpi_group_range_incl %G %d %p %p";
-static const char long_spc235[]  = "MPI_Group_range_incl(%G, n=%d, ranges=%p, newgroup=%p) failed";
-static const char short_spc236[] = "**mpi_group_rank %G %p";
-static const char long_spc236[]  = "MPI_Group_rank(%G, rank=%p) failed";
-static const char short_spc237[] = "**mpi_group_size %G %p";
-static const char long_spc237[]  = "MPI_Group_size(%G, size=%p) failed";
-static const char short_spc238[] = "**mpi_group_translate_ranks %G %d %p %G %p";
-static const char long_spc238[]  = "MPI_Group_translate_ranks(%G, n=%d, ranks1=%p, %G, ranks2=%p) failed";
-static const char short_spc239[] = "**mpi_group_union %G %G %p";
-static const char long_spc239[]  = "MPI_Group_union(%G, %G, newgroup=%p) failed";
-static const char short_spc240[] = "**mpi_iallgather %p %d %D %p %d %D %C %p";
-static const char long_spc240[]  = "MPI_Iallgather(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcount=%d, %D, %C, request=%p) failed";
-static const char short_spc241[] = "**mpi_iallgather_c %p %c %D %p %c %D %C %p";
-static const char long_spc241[]  = "MPI_Iallgather_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcount=%c, %D, %C, request=%p) failed";
-static const char short_spc242[] = "**mpi_iallgatherv %p %d %D %p %p %p %D %C %p";
-static const char long_spc242[]  = "MPI_Iallgatherv(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcounts=%p, displs=%p, %D, %C, request=%p) failed";
-static const char short_spc243[] = "**mpi_iallgatherv_c %p %c %D %p %p %p %D %C %p";
-static const char long_spc243[]  = "MPI_Iallgatherv_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcounts=%p, displs=%p, %D, %C, request=%p) failed";
-static const char short_spc244[] = "**mpi_iallreduce %p %p %d %D %O %C %p";
-static const char long_spc244[]  = "MPI_Iallreduce(sendbuf=%p, recvbuf=%p, count=%d, %D, %O, %C, request=%p) failed";
-static const char short_spc245[] = "**mpi_iallreduce_c %p %p %c %D %O %C %p";
-static const char long_spc245[]  = "MPI_Iallreduce_c(sendbuf=%p, recvbuf=%p, count=%c, %D, %O, %C, request=%p) failed";
-static const char short_spc246[] = "**mpi_ialltoall %p %d %D %p %d %D %C %p";
-static const char long_spc246[]  = "MPI_Ialltoall(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcount=%d, %D, %C, request=%p) failed";
-static const char short_spc247[] = "**mpi_ialltoall_c %p %c %D %p %c %D %C %p";
-static const char long_spc247[]  = "MPI_Ialltoall_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcount=%c, %D, %C, request=%p) failed";
-static const char short_spc248[] = "**mpi_ialltoallv %p %p %p %D %p %p %p %D %C %p";
-static const char long_spc248[]  = "MPI_Ialltoallv(sendbuf=%p, sendcounts=%p, sdispls=%p, %D, recvbuf=%p, recvcounts=%p, rdispls=%p, %D, %C, request=%p) failed";
-static const char short_spc249[] = "**mpi_ialltoallv_c %p %p %p %D %p %p %p %D %C %p";
-static const char long_spc249[]  = "MPI_Ialltoallv_c(sendbuf=%p, sendcounts=%p, sdispls=%p, %D, recvbuf=%p, recvcounts=%p, rdispls=%p, %D, %C, request=%p) failed";
-static const char short_spc250[] = "**mpi_ialltoallw %p %p %p %p %p %p %p %p %C %p";
-static const char long_spc250[]  = "MPI_Ialltoallw(sendbuf=%p, sendcounts=%p, sdispls=%p, sendtypes=%p, recvbuf=%p, recvcounts=%p, rdispls=%p, recvtypes=%p, %C, request=%p) failed";
-static const char short_spc251[] = "**mpi_ialltoallw_c %p %p %p %p %p %p %p %p %C %p";
-static const char long_spc251[]  = "MPI_Ialltoallw_c(sendbuf=%p, sendcounts=%p, sdispls=%p, sendtypes=%p, recvbuf=%p, recvcounts=%p, rdispls=%p, recvtypes=%p, %C, request=%p) failed";
-static const char short_spc252[] = "**mpi_ibarrier %C %p";
-static const char long_spc252[]  = "MPI_Ibarrier(%C, request=%p) failed";
-static const char short_spc253[] = "**mpi_ibcast %p %d %D %i %C %p";
-static const char long_spc253[]  = "MPI_Ibcast(buffer=%p, count=%d, %D, %i, %C, request=%p) failed";
-static const char short_spc254[] = "**mpi_ibcast_c %p %c %D %i %C %p";
-static const char long_spc254[]  = "MPI_Ibcast_c(buffer=%p, count=%c, %D, %i, %C, request=%p) failed";
-static const char short_spc255[] = "**mpi_ibsend %p %d %D %i %t %C %p";
-static const char long_spc255[]  = "MPI_Ibsend(buf=%p, count=%d, %D, %i, %t, %C, request=%p) failed";
-static const char short_spc256[] = "**mpi_ibsend_c %p %c %D %i %t %C %p";
-static const char long_spc256[]  = "MPI_Ibsend_c(buf=%p, count=%c, %D, %i, %t, %C, request=%p) failed";
-static const char short_spc257[] = "**mpi_iexscan %p %p %d %D %O %C %p";
-static const char long_spc257[]  = "MPI_Iexscan(sendbuf=%p, recvbuf=%p, count=%d, %D, %O, %C, request=%p) failed";
-static const char short_spc258[] = "**mpi_iexscan_c %p %p %c %D %O %C %p";
-static const char long_spc258[]  = "MPI_Iexscan_c(sendbuf=%p, recvbuf=%p, count=%c, %D, %O, %C, request=%p) failed";
-static const char short_spc259[] = "**mpi_igather %p %d %D %p %d %D %i %C %p";
-static const char long_spc259[]  = "MPI_Igather(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcount=%d, %D, %i, %C, request=%p) failed";
-static const char short_spc260[] = "**mpi_igather_c %p %c %D %p %c %D %i %C %p";
-static const char long_spc260[]  = "MPI_Igather_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcount=%c, %D, %i, %C, request=%p) failed";
-static const char short_spc261[] = "**mpi_igatherv %p %d %D %p %p %p %D %i %C %p";
-static const char long_spc261[]  = "MPI_Igatherv(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcounts=%p, displs=%p, %D, %i, %C, request=%p) failed";
-static const char short_spc262[] = "**mpi_igatherv_c %p %c %D %p %p %p %D %i %C %p";
-static const char long_spc262[]  = "MPI_Igatherv_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcounts=%p, displs=%p, %D, %i, %C, request=%p) failed";
-static const char short_spc263[] = "**mpi_improbe %i %t %C %p %p %p";
-static const char long_spc263[]  = "MPI_Improbe(%i, %t, %C, flag=%p, message=%p, status=%p) failed";
-static const char short_spc264[] = "**mpi_imrecv %p %d %D %p %p";
-static const char long_spc264[]  = "MPI_Imrecv(buf=%p, count=%d, %D, message=%p, request=%p) failed";
-static const char short_spc265[] = "**mpi_imrecv_c %p %c %D %p %p";
-static const char long_spc265[]  = "MPI_Imrecv_c(buf=%p, count=%c, %D, message=%p, request=%p) failed";
-static const char short_spc266[] = "**mpi_ineighbor_allgather %p %d %D %p %d %D %C %p";
-static const char long_spc266[]  = "MPI_Ineighbor_allgather(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcount=%d, %D, %C, request=%p) failed";
-static const char short_spc267[] = "**mpi_ineighbor_allgather_c %p %c %D %p %c %D %C %p";
-static const char long_spc267[]  = "MPI_Ineighbor_allgather_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcount=%c, %D, %C, request=%p) failed";
-static const char short_spc268[] = "**mpi_ineighbor_allgatherv %p %d %D %p %p %p %D %C %p";
-static const char long_spc268[]  = "MPI_Ineighbor_allgatherv(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcounts=%p, displs=%p, %D, %C, request=%p) failed";
-static const char short_spc269[] = "**mpi_ineighbor_allgatherv_c %p %c %D %p %p %p %D %C %p";
-static const char long_spc269[]  = "MPI_Ineighbor_allgatherv_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcounts=%p, displs=%p, %D, %C, request=%p) failed";
-static const char short_spc270[] = "**mpi_ineighbor_alltoall %p %d %D %p %d %D %C %p";
-static const char long_spc270[]  = "MPI_Ineighbor_alltoall(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcount=%d, %D, %C, request=%p) failed";
-static const char short_spc271[] = "**mpi_ineighbor_alltoall_c %p %c %D %p %c %D %C %p";
-static const char long_spc271[]  = "MPI_Ineighbor_alltoall_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcount=%c, %D, %C, request=%p) failed";
-static const char short_spc272[] = "**mpi_ineighbor_alltoallv %p %p %p %D %p %p %p %D %C %p";
-static const char long_spc272[]  = "MPI_Ineighbor_alltoallv(sendbuf=%p, sendcounts=%p, sdispls=%p, %D, recvbuf=%p, recvcounts=%p, rdispls=%p, %D, %C, request=%p) failed";
-static const char short_spc273[] = "**mpi_ineighbor_alltoallv_c %p %p %p %D %p %p %p %D %C %p";
-static const char long_spc273[]  = "MPI_Ineighbor_alltoallv_c(sendbuf=%p, sendcounts=%p, sdispls=%p, %D, recvbuf=%p, recvcounts=%p, rdispls=%p, %D, %C, request=%p) failed";
-static const char short_spc274[] = "**mpi_ineighbor_alltoallw %p %p %p %p %p %p %p %p %C %p";
-static const char long_spc274[]  = "MPI_Ineighbor_alltoallw(sendbuf=%p, sendcounts=%p, sdispls=%p, sendtypes=%p, recvbuf=%p, recvcounts=%p, rdispls=%p, recvtypes=%p, %C, request=%p) failed";
-static const char short_spc275[] = "**mpi_ineighbor_alltoallw_c %p %p %p %p %p %p %p %p %C %p";
-static const char long_spc275[]  = "MPI_Ineighbor_alltoallw_c(sendbuf=%p, sendcounts=%p, sdispls=%p, sendtypes=%p, recvbuf=%p, recvcounts=%p, rdispls=%p, recvtypes=%p, %C, request=%p) failed";
-static const char short_spc276[] = "**mpi_info_create %p";
-static const char long_spc276[]  = "MPI_Info_create(info=%p) failed";
-static const char short_spc277[] = "**mpi_info_create_env %p %p %p";
-static const char long_spc277[]  = "MPI_Info_create_env(argc=%p, argv=%p, info=%p) failed";
-static const char short_spc278[] = "**mpi_info_delete %I %s";
-static const char long_spc278[]  = "MPI_Info_delete(%I, key=%s) failed";
-static const char short_spc279[] = "**mpi_info_dup %I %p";
-static const char long_spc279[]  = "MPI_Info_dup(%I, newinfo=%p) failed";
-static const char short_spc280[] = "**mpi_info_free %p";
-static const char long_spc280[]  = "MPI_Info_free(info=%p) failed";
-static const char short_spc281[] = "**mpi_info_get %I %s %d %p %p";
-static const char long_spc281[]  = "MPI_Info_get(%I, key=%s, valuelen=%d, value=%p, flag=%p) failed";
-static const char short_spc282[] = "**mpi_info_get_nkeys %I %p";
-static const char long_spc282[]  = "MPI_Info_get_nkeys(%I, nkeys=%p) failed";
-static const char short_spc283[] = "**mpi_info_get_nthkey %I %d %p";
-static const char long_spc283[]  = "MPI_Info_get_nthkey(%I, n=%d, key=%p) failed";
-static const char short_spc284[] = "**mpi_info_get_string %I %s %p %p %p";
-static const char long_spc284[]  = "MPI_Info_get_string(%I, key=%s, buflen=%p, value=%p, flag=%p) failed";
-static const char short_spc285[] = "**mpi_info_get_valuelen %I %s %p %p";
-static const char long_spc285[]  = "MPI_Info_get_valuelen(%I, key=%s, valuelen=%p, flag=%p) failed";
-static const char short_spc286[] = "**mpi_info_set %I %s %s";
-static const char long_spc286[]  = "MPI_Info_set(%I, key=%s, value=%s) failed";
-static const char short_spc287[] = "**mpi_init %p %p";
-static const char long_spc287[]  = "MPI_Init(argc=%p, argv=%p) failed";
-static const char short_spc288[] = "**mpi_init_thread %p %p %d %p";
-static const char long_spc288[]  = "MPI_Init_thread(argc=%p, argv=%p, required=%d, provided=%p) failed";
-static const char short_spc289[] = "**mpi_initialized %p";
-static const char long_spc289[]  = "MPI_Initialized(flag=%p) failed";
-static const char short_spc290[] = "**mpi_intercomm_create %C %i %C %i %t %p";
-static const char long_spc290[]  = "MPI_Intercomm_create(%C, %i, %C, %i, %t, newintercomm=%p) failed";
-static const char short_spc291[] = "**mpi_intercomm_create_from_groups %G %i %G %i %s %I %E %p";
-static const char long_spc291[]  = "MPI_Intercomm_create_from_groups(%G, %i, %G, %i, stringtag=%s, %I, %E, newintercomm=%p) failed";
-static const char short_spc292[] = "**mpi_intercomm_merge %C %d %p";
-static const char long_spc292[]  = "MPI_Intercomm_merge(%C, high=%d, newintracomm=%p) failed";
-static const char short_spc293[] = "**mpi_iprobe %i %t %C %p %p";
-static const char long_spc293[]  = "MPI_Iprobe(%i, %t, %C, flag=%p, status=%p) failed";
-static const char short_spc294[] = "**mpi_irecv %p %d %D %i %t %C %p";
-static const char long_spc294[]  = "MPI_Irecv(buf=%p, count=%d, %D, %i, %t, %C, request=%p) failed";
-static const char short_spc295[] = "**mpi_irecv_c %p %c %D %i %t %C %p";
-static const char long_spc295[]  = "MPI_Irecv_c(buf=%p, count=%c, %D, %i, %t, %C, request=%p) failed";
-static const char short_spc296[] = "**mpi_ireduce %p %p %d %D %O %i %C %p";
-static const char long_spc296[]  = "MPI_Ireduce(sendbuf=%p, recvbuf=%p, count=%d, %D, %O, %i, %C, request=%p) failed";
-static const char short_spc297[] = "**mpi_ireduce_c %p %p %c %D %O %i %C %p";
-static const char long_spc297[]  = "MPI_Ireduce_c(sendbuf=%p, recvbuf=%p, count=%c, %D, %O, %i, %C, request=%p) failed";
-static const char short_spc298[] = "**mpi_ireduce_scatter %p %p %p %D %O %C %p";
-static const char long_spc298[]  = "MPI_Ireduce_scatter(sendbuf=%p, recvbuf=%p, recvcounts=%p, %D, %O, %C, request=%p) failed";
-static const char short_spc299[] = "**mpi_ireduce_scatter_block %p %p %d %D %O %C %p";
-static const char long_spc299[]  = "MPI_Ireduce_scatter_block(sendbuf=%p, recvbuf=%p, recvcount=%d, %D, %O, %C, request=%p) failed";
-static const char short_spc300[] = "**mpi_ireduce_scatter_block_c %p %p %c %D %O %C %p";
-static const char long_spc300[]  = "MPI_Ireduce_scatter_block_c(sendbuf=%p, recvbuf=%p, recvcount=%c, %D, %O, %C, request=%p) failed";
-static const char short_spc301[] = "**mpi_ireduce_scatter_c %p %p %p %D %O %C %p";
-static const char long_spc301[]  = "MPI_Ireduce_scatter_c(sendbuf=%p, recvbuf=%p, recvcounts=%p, %D, %O, %C, request=%p) failed";
-static const char short_spc302[] = "**mpi_irsend %p %d %D %i %t %C %p";
-static const char long_spc302[]  = "MPI_Irsend(buf=%p, count=%d, %D, %i, %t, %C, request=%p) failed";
-static const char short_spc303[] = "**mpi_irsend_c %p %c %D %i %t %C %p";
-static const char long_spc303[]  = "MPI_Irsend_c(buf=%p, count=%c, %D, %i, %t, %C, request=%p) failed";
-static const char short_spc304[] = "**mpi_is_thread_main %p";
-static const char long_spc304[]  = "MPI_Is_thread_main(flag=%p) failed";
-static const char short_spc305[] = "**mpi_iscan %p %p %d %D %O %C %p";
-static const char long_spc305[]  = "MPI_Iscan(sendbuf=%p, recvbuf=%p, count=%d, %D, %O, %C, request=%p) failed";
-static const char short_spc306[] = "**mpi_iscan_c %p %p %c %D %O %C %p";
-static const char long_spc306[]  = "MPI_Iscan_c(sendbuf=%p, recvbuf=%p, count=%c, %D, %O, %C, request=%p) failed";
-static const char short_spc307[] = "**mpi_iscatter %p %d %D %p %d %D %i %C %p";
-static const char long_spc307[]  = "MPI_Iscatter(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcount=%d, %D, %i, %C, request=%p) failed";
-static const char short_spc308[] = "**mpi_iscatter_c %p %c %D %p %c %D %i %C %p";
-static const char long_spc308[]  = "MPI_Iscatter_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcount=%c, %D, %i, %C, request=%p) failed";
-static const char short_spc309[] = "**mpi_iscatterv %p %p %p %D %p %d %D %i %C %p";
-static const char long_spc309[]  = "MPI_Iscatterv(sendbuf=%p, sendcounts=%p, displs=%p, %D, recvbuf=%p, recvcount=%d, %D, %i, %C, request=%p) failed";
-static const char short_spc310[] = "**mpi_iscatterv_c %p %p %p %D %p %c %D %i %C %p";
-static const char long_spc310[]  = "MPI_Iscatterv_c(sendbuf=%p, sendcounts=%p, displs=%p, %D, recvbuf=%p, recvcount=%c, %D, %i, %C, request=%p) failed";
-static const char short_spc311[] = "**mpi_isend %p %d %D %i %t %C %p";
-static const char long_spc311[]  = "MPI_Isend(buf=%p, count=%d, %D, %i, %t, %C, request=%p) failed";
-static const char short_spc312[] = "**mpi_isend_c %p %c %D %i %t %C %p";
-static const char long_spc312[]  = "MPI_Isend_c(buf=%p, count=%c, %D, %i, %t, %C, request=%p) failed";
-static const char short_spc313[] = "**mpi_isendrecv %p %d %D %i %t %p %d %D %i %t %C %p";
-static const char long_spc313[]  = "MPI_Isendrecv(sendbuf=%p, sendcount=%d, %D, %i, %t, recvbuf=%p, recvcount=%d, %D, %i, %t, %C, request=%p) failed";
-static const char short_spc314[] = "**mpi_isendrecv_c %p %c %D %i %t %p %c %D %i %t %C %p";
-static const char long_spc314[]  = "MPI_Isendrecv_c(sendbuf=%p, sendcount=%c, %D, %i, %t, recvbuf=%p, recvcount=%c, %D, %i, %t, %C, request=%p) failed";
-static const char short_spc315[] = "**mpi_isendrecv_replace %p %d %D %i %t %i %t %C %p";
-static const char long_spc315[]  = "MPI_Isendrecv_replace(buf=%p, count=%d, %D, %i, %t, %i, %t, %C, request=%p) failed";
-static const char short_spc316[] = "**mpi_isendrecv_replace_c %p %c %D %i %t %i %t %C %p";
-static const char long_spc316[]  = "MPI_Isendrecv_replace_c(buf=%p, count=%c, %D, %i, %t, %i, %t, %C, request=%p) failed";
-static const char short_spc317[] = "**mpi_issend %p %d %D %i %t %C %p";
-static const char long_spc317[]  = "MPI_Issend(buf=%p, count=%d, %D, %i, %t, %C, request=%p) failed";
-static const char short_spc318[] = "**mpi_issend_c %p %c %D %i %t %C %p";
-static const char long_spc318[]  = "MPI_Issend_c(buf=%p, count=%c, %D, %i, %t, %C, request=%p) failed";
-static const char short_spc319[] = "**mpi_lookup_name %s %I %p";
-static const char long_spc319[]  = "MPI_Lookup_name(service_name=%s, %I, port_name=%p) failed";
-static const char short_spc320[] = "**mpi_mprobe %i %t %C %p %p";
-static const char long_spc320[]  = "MPI_Mprobe(%i, %t, %C, message=%p, status=%p) failed";
-static const char short_spc321[] = "**mpi_mrecv %p %d %D %p %p";
-static const char long_spc321[]  = "MPI_Mrecv(buf=%p, count=%d, %D, message=%p, status=%p) failed";
-static const char short_spc322[] = "**mpi_mrecv_c %p %c %D %p %p";
-static const char long_spc322[]  = "MPI_Mrecv_c(buf=%p, count=%c, %D, message=%p, status=%p) failed";
-static const char short_spc323[] = "**mpi_neighbor_allgather %p %d %D %p %d %D %C";
-static const char long_spc323[]  = "MPI_Neighbor_allgather(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcount=%d, %D, %C) failed";
-static const char short_spc324[] = "**mpi_neighbor_allgather_c %p %c %D %p %c %D %C";
-static const char long_spc324[]  = "MPI_Neighbor_allgather_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcount=%c, %D, %C) failed";
-static const char short_spc325[] = "**mpi_neighbor_allgather_init %p %d %D %p %d %D %C %I %p";
-static const char long_spc325[]  = "MPI_Neighbor_allgather_init(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcount=%d, %D, %C, %I, request=%p) failed";
-static const char short_spc326[] = "**mpi_neighbor_allgather_init_c %p %c %D %p %c %D %C %I %p";
-static const char long_spc326[]  = "MPI_Neighbor_allgather_init_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcount=%c, %D, %C, %I, request=%p) failed";
-static const char short_spc327[] = "**mpi_neighbor_allgatherv %p %d %D %p %p %p %D %C";
-static const char long_spc327[]  = "MPI_Neighbor_allgatherv(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcounts=%p, displs=%p, %D, %C) failed";
-static const char short_spc328[] = "**mpi_neighbor_allgatherv_c %p %c %D %p %p %p %D %C";
-static const char long_spc328[]  = "MPI_Neighbor_allgatherv_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcounts=%p, displs=%p, %D, %C) failed";
-static const char short_spc329[] = "**mpi_neighbor_allgatherv_init %p %d %D %p %p %p %D %C %I %p";
-static const char long_spc329[]  = "MPI_Neighbor_allgatherv_init(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcounts=%p, displs=%p, %D, %C, %I, request=%p) failed";
-static const char short_spc330[] = "**mpi_neighbor_allgatherv_init_c %p %c %D %p %p %p %D %C %I %p";
-static const char long_spc330[]  = "MPI_Neighbor_allgatherv_init_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcounts=%p, displs=%p, %D, %C, %I, request=%p) failed";
-static const char short_spc331[] = "**mpi_neighbor_alltoall %p %d %D %p %d %D %C";
-static const char long_spc331[]  = "MPI_Neighbor_alltoall(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcount=%d, %D, %C) failed";
-static const char short_spc332[] = "**mpi_neighbor_alltoall_c %p %c %D %p %c %D %C";
-static const char long_spc332[]  = "MPI_Neighbor_alltoall_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcount=%c, %D, %C) failed";
-static const char short_spc333[] = "**mpi_neighbor_alltoall_init %p %d %D %p %d %D %C %I %p";
-static const char long_spc333[]  = "MPI_Neighbor_alltoall_init(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcount=%d, %D, %C, %I, request=%p) failed";
-static const char short_spc334[] = "**mpi_neighbor_alltoall_init_c %p %c %D %p %c %D %C %I %p";
-static const char long_spc334[]  = "MPI_Neighbor_alltoall_init_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcount=%c, %D, %C, %I, request=%p) failed";
-static const char short_spc335[] = "**mpi_neighbor_alltoallv %p %p %p %D %p %p %p %D %C";
-static const char long_spc335[]  = "MPI_Neighbor_alltoallv(sendbuf=%p, sendcounts=%p, sdispls=%p, %D, recvbuf=%p, recvcounts=%p, rdispls=%p, %D, %C) failed";
-static const char short_spc336[] = "**mpi_neighbor_alltoallv_c %p %p %p %D %p %p %p %D %C";
-static const char long_spc336[]  = "MPI_Neighbor_alltoallv_c(sendbuf=%p, sendcounts=%p, sdispls=%p, %D, recvbuf=%p, recvcounts=%p, rdispls=%p, %D, %C) failed";
-static const char short_spc337[] = "**mpi_neighbor_alltoallv_init %p %p %p %D %p %p %p %D %C %I %p";
-static const char long_spc337[]  = "MPI_Neighbor_alltoallv_init(sendbuf=%p, sendcounts=%p, sdispls=%p, %D, recvbuf=%p, recvcounts=%p, rdispls=%p, %D, %C, %I, request=%p) failed";
-static const char short_spc338[] = "**mpi_neighbor_alltoallv_init_c %p %p %p %D %p %p %p %D %C %I %p";
-static const char long_spc338[]  = "MPI_Neighbor_alltoallv_init_c(sendbuf=%p, sendcounts=%p, sdispls=%p, %D, recvbuf=%p, recvcounts=%p, rdispls=%p, %D, %C, %I, request=%p) failed";
-static const char short_spc339[] = "**mpi_neighbor_alltoallw %p %p %p %p %p %p %p %p %C";
-static const char long_spc339[]  = "MPI_Neighbor_alltoallw(sendbuf=%p, sendcounts=%p, sdispls=%p, sendtypes=%p, recvbuf=%p, recvcounts=%p, rdispls=%p, recvtypes=%p, %C) failed";
-static const char short_spc340[] = "**mpi_neighbor_alltoallw_c %p %p %p %p %p %p %p %p %C";
-static const char long_spc340[]  = "MPI_Neighbor_alltoallw_c(sendbuf=%p, sendcounts=%p, sdispls=%p, sendtypes=%p, recvbuf=%p, recvcounts=%p, rdispls=%p, recvtypes=%p, %C) failed";
-static const char short_spc341[] = "**mpi_neighbor_alltoallw_init %p %p %p %p %p %p %p %p %C %I %p";
-static const char long_spc341[]  = "MPI_Neighbor_alltoallw_init(sendbuf=%p, sendcounts=%p, sdispls=%p, sendtypes=%p, recvbuf=%p, recvcounts=%p, rdispls=%p, recvtypes=%p, %C, %I, request=%p) failed";
-static const char short_spc342[] = "**mpi_neighbor_alltoallw_init_c %p %p %p %p %p %p %p %p %C %I %p";
-static const char long_spc342[]  = "MPI_Neighbor_alltoallw_init_c(sendbuf=%p, sendcounts=%p, sdispls=%p, sendtypes=%p, recvbuf=%p, recvcounts=%p, rdispls=%p, recvtypes=%p, %C, %I, request=%p) failed";
-static const char short_spc343[] = "**mpi_op_commutative %O %p";
-static const char long_spc343[]  = "MPI_Op_commutative(%O, commute=%p) failed";
-static const char short_spc344[] = "**mpi_op_create %p %d %p";
-static const char long_spc344[]  = "MPI_Op_create(user_fn=%p, commute=%d, op=%p) failed";
-static const char short_spc345[] = "**mpi_op_create_c %p %d %p";
-static const char long_spc345[]  = "MPI_Op_create_c(user_fn=%p, commute=%d, op=%p) failed";
-static const char short_spc346[] = "**mpi_op_free %p";
-static const char long_spc346[]  = "MPI_Op_free(op=%p) failed";
-static const char short_spc347[] = "**mpi_open_port %I %p";
-static const char long_spc347[]  = "MPI_Open_port(%I, port_name=%p) failed";
-static const char short_spc348[] = "**mpi_pack %p %d %D %p %d %p %C";
-static const char long_spc348[]  = "MPI_Pack(inbuf=%p, incount=%d, %D, outbuf=%p, outsize=%d, position=%p, %C) failed";
-static const char short_spc349[] = "**mpi_pack_c %p %c %D %p %c %p %C";
-static const char long_spc349[]  = "MPI_Pack_c(inbuf=%p, incount=%c, %D, outbuf=%p, outsize=%c, position=%p, %C) failed";
-static const char short_spc350[] = "**mpi_pack_external %s %p %d %D %p %L %p";
-static const char long_spc350[]  = "MPI_Pack_external(datarep=%s, inbuf=%p, incount=%d, %D, outbuf=%p, outsize=%L, position=%p) failed";
-static const char short_spc351[] = "**mpi_pack_external_c %s %p %c %D %p %c %p";
-static const char long_spc351[]  = "MPI_Pack_external_c(datarep=%s, inbuf=%p, incount=%c, %D, outbuf=%p, outsize=%c, position=%p) failed";
-static const char short_spc352[] = "**mpi_pack_external_size %s %d %D %p";
-static const char long_spc352[]  = "MPI_Pack_external_size(datarep=%s, incount=%d, %D, size=%p) failed";
-static const char short_spc353[] = "**mpi_pack_external_size_c %s %c %D %p";
-static const char long_spc353[]  = "MPI_Pack_external_size_c(datarep=%s, incount=%c, %D, size=%p) failed";
-static const char short_spc354[] = "**mpi_pack_size %d %D %C %p";
-static const char long_spc354[]  = "MPI_Pack_size(incount=%d, %D, %C, size=%p) failed";
-static const char short_spc355[] = "**mpi_pack_size_c %c %D %C %p";
-static const char long_spc355[]  = "MPI_Pack_size_c(incount=%c, %D, %C, size=%p) failed";
-static const char short_spc356[] = "**mpi_parrived %R %d %p";
-static const char long_spc356[]  = "MPI_Parrived(%R, partition=%d, flag=%p) failed";
-static const char short_spc357[] = "**mpi_pready %d %R";
-static const char long_spc357[]  = "MPI_Pready(partition=%d, %R) failed";
-static const char short_spc358[] = "**mpi_pready_list %d %p %R";
-static const char long_spc358[]  = "MPI_Pready_list(length=%d, array_of_partitions=%p, %R) failed";
-static const char short_spc359[] = "**mpi_pready_range %d %d %R";
-static const char long_spc359[]  = "MPI_Pready_range(partition_low=%d, partition_high=%d, %R) failed";
-static const char short_spc360[] = "**mpi_precv_init %p %d %c %D %i %t %C %I %p";
-static const char long_spc360[]  = "MPI_Precv_init(buf=%p, partitions=%d, count=%c, %D, %i, %t, %C, %I, request=%p) failed";
-static const char short_spc361[] = "**mpi_probe %i %t %C %p";
-static const char long_spc361[]  = "MPI_Probe(%i, %t, %C, status=%p) failed";
-static const char short_spc362[] = "**mpi_psend_init %p %d %c %D %i %t %C %I %p";
-static const char long_spc362[]  = "MPI_Psend_init(buf=%p, partitions=%d, count=%c, %D, %i, %t, %C, %I, request=%p) failed";
-static const char short_spc363[] = "**mpi_publish_name %s %I %s";
-static const char long_spc363[]  = "MPI_Publish_name(service_name=%s, %I, port_name=%s) failed";
-static const char short_spc364[] = "**mpi_put %p %d %D %d %L %d %D %W";
-static const char long_spc364[]  = "MPI_Put(origin_addr=%p, origin_count=%d, %D, target_rank=%d, target_disp=%L, target_count=%d, %D, %W) failed";
-static const char short_spc365[] = "**mpi_put_c %p %c %D %d %L %c %D %W";
-static const char long_spc365[]  = "MPI_Put_c(origin_addr=%p, origin_count=%c, %D, target_rank=%d, target_disp=%L, target_count=%c, %D, %W) failed";
-static const char short_spc366[] = "**mpi_query_thread %p";
-static const char long_spc366[]  = "MPI_Query_thread(provided=%p) failed";
-static const char short_spc367[] = "**mpi_raccumulate %p %d %D %d %L %d %D %O %W %p";
-static const char long_spc367[]  = "MPI_Raccumulate(origin_addr=%p, origin_count=%d, %D, target_rank=%d, target_disp=%L, target_count=%d, %D, %O, %W, request=%p) failed";
-static const char short_spc368[] = "**mpi_raccumulate_c %p %c %D %d %L %c %D %O %W %p";
-static const char long_spc368[]  = "MPI_Raccumulate_c(origin_addr=%p, origin_count=%c, %D, target_rank=%d, target_disp=%L, target_count=%c, %D, %O, %W, request=%p) failed";
-static const char short_spc369[] = "**mpi_recv %p %d %D %i %t %C %p";
-static const char long_spc369[]  = "MPI_Recv(buf=%p, count=%d, %D, %i, %t, %C, status=%p) failed";
-static const char short_spc370[] = "**mpi_recv_c %p %c %D %i %t %C %p";
-static const char long_spc370[]  = "MPI_Recv_c(buf=%p, count=%c, %D, %i, %t, %C, status=%p) failed";
-static const char short_spc371[] = "**mpi_recv_init %p %d %D %i %t %C %p";
-static const char long_spc371[]  = "MPI_Recv_init(buf=%p, count=%d, %D, %i, %t, %C, request=%p) failed";
-static const char short_spc372[] = "**mpi_recv_init_c %p %c %D %i %t %C %p";
-static const char long_spc372[]  = "MPI_Recv_init_c(buf=%p, count=%c, %D, %i, %t, %C, request=%p) failed";
-static const char short_spc373[] = "**mpi_reduce %p %p %d %D %O %i %C";
-static const char long_spc373[]  = "MPI_Reduce(sendbuf=%p, recvbuf=%p, count=%d, %D, %O, %i, %C) failed";
-static const char short_spc374[] = "**mpi_reduce_c %p %p %c %D %O %i %C";
-static const char long_spc374[]  = "MPI_Reduce_c(sendbuf=%p, recvbuf=%p, count=%c, %D, %O, %i, %C) failed";
-static const char short_spc375[] = "**mpi_reduce_init %p %p %d %D %O %i %C %I %p";
-static const char long_spc375[]  = "MPI_Reduce_init(sendbuf=%p, recvbuf=%p, count=%d, %D, %O, %i, %C, %I, request=%p) failed";
-static const char short_spc376[] = "**mpi_reduce_init_c %p %p %c %D %O %i %C %I %p";
-static const char long_spc376[]  = "MPI_Reduce_init_c(sendbuf=%p, recvbuf=%p, count=%c, %D, %O, %i, %C, %I, request=%p) failed";
-static const char short_spc377[] = "**mpi_reduce_local %p %p %d %D %O";
-static const char long_spc377[]  = "MPI_Reduce_local(inbuf=%p, inoutbuf=%p, count=%d, %D, %O) failed";
-static const char short_spc378[] = "**mpi_reduce_local_c %p %p %c %D %O";
-static const char long_spc378[]  = "MPI_Reduce_local_c(inbuf=%p, inoutbuf=%p, count=%c, %D, %O) failed";
-static const char short_spc379[] = "**mpi_reduce_scatter %p %p %p %D %O %C";
-static const char long_spc379[]  = "MPI_Reduce_scatter(sendbuf=%p, recvbuf=%p, recvcounts=%p, %D, %O, %C) failed";
-static const char short_spc380[] = "**mpi_reduce_scatter_block %p %p %d %D %O %C";
-static const char long_spc380[]  = "MPI_Reduce_scatter_block(sendbuf=%p, recvbuf=%p, recvcount=%d, %D, %O, %C) failed";
-static const char short_spc381[] = "**mpi_reduce_scatter_block_c %p %p %c %D %O %C";
-static const char long_spc381[]  = "MPI_Reduce_scatter_block_c(sendbuf=%p, recvbuf=%p, recvcount=%c, %D, %O, %C) failed";
-static const char short_spc382[] = "**mpi_reduce_scatter_block_init %p %p %d %D %O %C %I %p";
-static const char long_spc382[]  = "MPI_Reduce_scatter_block_init(sendbuf=%p, recvbuf=%p, recvcount=%d, %D, %O, %C, %I, request=%p) failed";
-static const char short_spc383[] = "**mpi_reduce_scatter_block_init_c %p %p %c %D %O %C %I %p";
-static const char long_spc383[]  = "MPI_Reduce_scatter_block_init_c(sendbuf=%p, recvbuf=%p, recvcount=%c, %D, %O, %C, %I, request=%p) failed";
-static const char short_spc384[] = "**mpi_reduce_scatter_c %p %p %p %D %O %C";
-static const char long_spc384[]  = "MPI_Reduce_scatter_c(sendbuf=%p, recvbuf=%p, recvcounts=%p, %D, %O, %C) failed";
-static const char short_spc385[] = "**mpi_reduce_scatter_init %p %p %p %D %O %C %I %p";
-static const char long_spc385[]  = "MPI_Reduce_scatter_init(sendbuf=%p, recvbuf=%p, recvcounts=%p, %D, %O, %C, %I, request=%p) failed";
-static const char short_spc386[] = "**mpi_reduce_scatter_init_c %p %p %p %D %O %C %I %p";
-static const char long_spc386[]  = "MPI_Reduce_scatter_init_c(sendbuf=%p, recvbuf=%p, recvcounts=%p, %D, %O, %C, %I, request=%p) failed";
-static const char short_spc387[] = "**mpi_request_free %p";
-static const char long_spc387[]  = "MPI_Request_free(request=%p) failed";
-static const char short_spc388[] = "**mpi_request_get_status %R %p %p";
-static const char long_spc388[]  = "MPI_Request_get_status(%R, flag=%p, status=%p) failed";
-static const char short_spc389[] = "**mpi_rget %p %d %D %d %L %d %D %W %p";
-static const char long_spc389[]  = "MPI_Rget(origin_addr=%p, origin_count=%d, %D, target_rank=%d, target_disp=%L, target_count=%d, %D, %W, request=%p) failed";
-static const char short_spc390[] = "**mpi_rget_accumulate %p %d %D %p %d %D %d %L %d %D %O %W %p";
-static const char long_spc390[]  = "MPI_Rget_accumulate(origin_addr=%p, origin_count=%d, %D, result_addr=%p, result_count=%d, %D, target_rank=%d, target_disp=%L, target_count=%d, %D, %O, %W, request=%p) failed";
-static const char short_spc391[] = "**mpi_rget_accumulate_c %p %c %D %p %c %D %d %L %c %D %O %W %p";
-static const char long_spc391[]  = "MPI_Rget_accumulate_c(origin_addr=%p, origin_count=%c, %D, result_addr=%p, result_count=%c, %D, target_rank=%d, target_disp=%L, target_count=%c, %D, %O, %W, request=%p) failed";
-static const char short_spc392[] = "**mpi_rget_c %p %c %D %d %L %c %D %W %p";
-static const char long_spc392[]  = "MPI_Rget_c(origin_addr=%p, origin_count=%c, %D, target_rank=%d, target_disp=%L, target_count=%c, %D, %W, request=%p) failed";
-static const char short_spc393[] = "**mpi_rput %p %d %D %d %L %d %D %W %p";
-static const char long_spc393[]  = "MPI_Rput(origin_addr=%p, origin_count=%d, %D, target_rank=%d, target_disp=%L, target_count=%d, %D, %W, request=%p) failed";
-static const char short_spc394[] = "**mpi_rput_c %p %c %D %d %L %c %D %W %p";
-static const char long_spc394[]  = "MPI_Rput_c(origin_addr=%p, origin_count=%c, %D, target_rank=%d, target_disp=%L, target_count=%c, %D, %W, request=%p) failed";
-static const char short_spc395[] = "**mpi_rsend %p %d %D %i %t %C";
-static const char long_spc395[]  = "MPI_Rsend(buf=%p, count=%d, %D, %i, %t, %C) failed";
-static const char short_spc396[] = "**mpi_rsend_c %p %c %D %i %t %C";
-static const char long_spc396[]  = "MPI_Rsend_c(buf=%p, count=%c, %D, %i, %t, %C) failed";
-static const char short_spc397[] = "**mpi_rsend_init %p %d %D %i %t %C %p";
-static const char long_spc397[]  = "MPI_Rsend_init(buf=%p, count=%d, %D, %i, %t, %C, request=%p) failed";
-static const char short_spc398[] = "**mpi_rsend_init_c %p %c %D %i %t %C %p";
-static const char long_spc398[]  = "MPI_Rsend_init_c(buf=%p, count=%c, %D, %i, %t, %C, request=%p) failed";
-static const char short_spc399[] = "**mpi_scan %p %p %d %D %O %C";
-static const char long_spc399[]  = "MPI_Scan(sendbuf=%p, recvbuf=%p, count=%d, %D, %O, %C) failed";
-static const char short_spc400[] = "**mpi_scan_c %p %p %c %D %O %C";
-static const char long_spc400[]  = "MPI_Scan_c(sendbuf=%p, recvbuf=%p, count=%c, %D, %O, %C) failed";
-static const char short_spc401[] = "**mpi_scan_init %p %p %d %D %O %C %I %p";
-static const char long_spc401[]  = "MPI_Scan_init(sendbuf=%p, recvbuf=%p, count=%d, %D, %O, %C, %I, request=%p) failed";
-static const char short_spc402[] = "**mpi_scan_init_c %p %p %c %D %O %C %I %p";
-static const char long_spc402[]  = "MPI_Scan_init_c(sendbuf=%p, recvbuf=%p, count=%c, %D, %O, %C, %I, request=%p) failed";
-static const char short_spc403[] = "**mpi_scatter %p %d %D %p %d %D %i %C";
-static const char long_spc403[]  = "MPI_Scatter(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcount=%d, %D, %i, %C) failed";
-static const char short_spc404[] = "**mpi_scatter_c %p %c %D %p %c %D %i %C";
-static const char long_spc404[]  = "MPI_Scatter_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcount=%c, %D, %i, %C) failed";
-static const char short_spc405[] = "**mpi_scatter_init %p %d %D %p %d %D %i %C %I %p";
-static const char long_spc405[]  = "MPI_Scatter_init(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcount=%d, %D, %i, %C, %I, request=%p) failed";
-static const char short_spc406[] = "**mpi_scatter_init_c %p %c %D %p %c %D %i %C %I %p";
-static const char long_spc406[]  = "MPI_Scatter_init_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcount=%c, %D, %i, %C, %I, request=%p) failed";
-static const char short_spc407[] = "**mpi_scatterv %p %p %p %D %p %d %D %i %C";
-static const char long_spc407[]  = "MPI_Scatterv(sendbuf=%p, sendcounts=%p, displs=%p, %D, recvbuf=%p, recvcount=%d, %D, %i, %C) failed";
-static const char short_spc408[] = "**mpi_scatterv_c %p %p %p %D %p %c %D %i %C";
-static const char long_spc408[]  = "MPI_Scatterv_c(sendbuf=%p, sendcounts=%p, displs=%p, %D, recvbuf=%p, recvcount=%c, %D, %i, %C) failed";
-static const char short_spc409[] = "**mpi_scatterv_init %p %p %p %D %p %d %D %i %C %I %p";
-static const char long_spc409[]  = "MPI_Scatterv_init(sendbuf=%p, sendcounts=%p, displs=%p, %D, recvbuf=%p, recvcount=%d, %D, %i, %C, %I, request=%p) failed";
-static const char short_spc410[] = "**mpi_scatterv_init_c %p %p %p %D %p %c %D %i %C %I %p";
-static const char long_spc410[]  = "MPI_Scatterv_init_c(sendbuf=%p, sendcounts=%p, displs=%p, %D, recvbuf=%p, recvcount=%c, %D, %i, %C, %I, request=%p) failed";
-static const char short_spc411[] = "**mpi_send %p %d %D %i %t %C";
-static const char long_spc411[]  = "MPI_Send(buf=%p, count=%d, %D, %i, %t, %C) failed";
-static const char short_spc412[] = "**mpi_send_c %p %c %D %i %t %C";
-static const char long_spc412[]  = "MPI_Send_c(buf=%p, count=%c, %D, %i, %t, %C) failed";
-static const char short_spc413[] = "**mpi_send_init %p %d %D %i %t %C %p";
-static const char long_spc413[]  = "MPI_Send_init(buf=%p, count=%d, %D, %i, %t, %C, request=%p) failed";
-static const char short_spc414[] = "**mpi_send_init_c %p %c %D %i %t %C %p";
-static const char long_spc414[]  = "MPI_Send_init_c(buf=%p, count=%c, %D, %i, %t, %C, request=%p) failed";
-static const char short_spc415[] = "**mpi_sendrecv %p %d %D %i %t %p %d %D %i %t %C %p";
-static const char long_spc415[]  = "MPI_Sendrecv(sendbuf=%p, sendcount=%d, %D, %i, %t, recvbuf=%p, recvcount=%d, %D, %i, %t, %C, status=%p) failed";
-static const char short_spc416[] = "**mpi_sendrecv_c %p %c %D %i %t %p %c %D %i %t %C %p";
-static const char long_spc416[]  = "MPI_Sendrecv_c(sendbuf=%p, sendcount=%c, %D, %i, %t, recvbuf=%p, recvcount=%c, %D, %i, %t, %C, status=%p) failed";
-static const char short_spc417[] = "**mpi_sendrecv_replace %p %d %D %i %t %i %t %C %p";
-static const char long_spc417[]  = "MPI_Sendrecv_replace(buf=%p, count=%d, %D, %i, %t, %i, %t, %C, status=%p) failed";
-static const char short_spc418[] = "**mpi_sendrecv_replace_c %p %c %D %i %t %i %t %C %p";
-static const char long_spc418[]  = "MPI_Sendrecv_replace_c(buf=%p, count=%c, %D, %i, %t, %i, %t, %C, status=%p) failed";
-static const char short_spc419[] = "**mpi_session_call_errhandler %S %d";
-static const char long_spc419[]  = "MPI_Session_call_errhandler(%S, errorcode=%d) failed";
-static const char short_spc420[] = "**mpi_session_create_errhandler %p %p";
-static const char long_spc420[]  = "MPI_Session_create_errhandler(session_errhandler_fn=%p, errhandler=%p) failed";
-static const char short_spc421[] = "**mpi_session_finalize %p";
-static const char long_spc421[]  = "MPI_Session_finalize(session=%p) failed";
-static const char short_spc422[] = "**mpi_session_get_errhandler %S %p";
-static const char long_spc422[]  = "MPI_Session_get_errhandler(%S, errhandler=%p) failed";
-static const char short_spc423[] = "**mpi_session_get_info %S %p";
-static const char long_spc423[]  = "MPI_Session_get_info(%S, info_used=%p) failed";
-static const char short_spc424[] = "**mpi_session_get_nth_pset %S %I %d %p %p";
-static const char long_spc424[]  = "MPI_Session_get_nth_pset(%S, %I, n=%d, pset_len=%p, pset_name=%p) failed";
-static const char short_spc425[] = "**mpi_session_get_num_psets %S %I %p";
-static const char long_spc425[]  = "MPI_Session_get_num_psets(%S, %I, npset_names=%p) failed";
-static const char short_spc426[] = "**mpi_session_get_pset_info %S %s %p";
-static const char long_spc426[]  = "MPI_Session_get_pset_info(%S, pset_name=%s, info=%p) failed";
-static const char short_spc427[] = "**mpi_session_init %I %E %p";
-static const char long_spc427[]  = "MPI_Session_init(%I, %E, session=%p) failed";
-static const char short_spc428[] = "**mpi_session_set_errhandler %S %E";
-static const char long_spc428[]  = "MPI_Session_set_errhandler(%S, %E) failed";
-static const char short_spc429[] = "**mpi_ssend %p %d %D %i %t %C";
-static const char long_spc429[]  = "MPI_Ssend(buf=%p, count=%d, %D, %i, %t, %C) failed";
-static const char short_spc430[] = "**mpi_ssend_c %p %c %D %i %t %C";
-static const char long_spc430[]  = "MPI_Ssend_c(buf=%p, count=%c, %D, %i, %t, %C) failed";
-static const char short_spc431[] = "**mpi_ssend_init %p %d %D %i %t %C %p";
-static const char long_spc431[]  = "MPI_Ssend_init(buf=%p, count=%d, %D, %i, %t, %C, request=%p) failed";
-static const char short_spc432[] = "**mpi_ssend_init_c %p %c %D %i %t %C %p";
-static const char long_spc432[]  = "MPI_Ssend_init_c(buf=%p, count=%c, %D, %i, %t, %C, request=%p) failed";
-static const char short_spc433[] = "**mpi_start %p";
-static const char long_spc433[]  = "MPI_Start(request=%p) failed";
-static const char short_spc434[] = "**mpi_startall %d %p";
-static const char long_spc434[]  = "MPI_Startall(count=%d, array_of_requests=%p) failed";
-static const char short_spc435[] = "**mpi_status_set_cancelled %p %d";
-static const char long_spc435[]  = "MPI_Status_set_cancelled(status=%p, flag=%d) failed";
-static const char short_spc436[] = "**mpi_status_set_elements %p %D %d";
-static const char long_spc436[]  = "MPI_Status_set_elements(status=%p, %D, count=%d) failed";
-static const char short_spc437[] = "**mpi_status_set_elements_c %p %D %c";
-static const char long_spc437[]  = "MPI_Status_set_elements_c(status=%p, %D, count=%c) failed";
-static const char short_spc438[] = "**mpi_status_set_elements_x %p %D %c";
-static const char long_spc438[]  = "MPI_Status_set_elements_x(status=%p, %D, count=%c) failed";
-static const char short_spc439[] = "**mpi_test %p %p %p";
-static const char long_spc439[]  = "MPI_Test(request=%p, flag=%p, status=%p) failed";
-static const char short_spc440[] = "**mpi_test_cancelled %p %p";
-static const char long_spc440[]  = "MPI_Test_cancelled(status=%p, flag=%p) failed";
-static const char short_spc441[] = "**mpi_testall %d %p %p %p";
-static const char long_spc441[]  = "MPI_Testall(count=%d, array_of_requests=%p, flag=%p, array_of_statuses=%p) failed";
-static const char short_spc442[] = "**mpi_testany %d %p %p %p %p";
-static const char long_spc442[]  = "MPI_Testany(count=%d, array_of_requests=%p, indx=%p, flag=%p, status=%p) failed";
-static const char short_spc443[] = "**mpi_testsome %d %p %p %p %p";
-static const char long_spc443[]  = "MPI_Testsome(incount=%d, array_of_requests=%p, outcount=%p, array_of_indices=%p, array_of_statuses=%p) failed";
-static const char short_spc444[] = "**mpi_topo_test %C %p";
-static const char long_spc444[]  = "MPI_Topo_test(%C, status=%p) failed";
-static const char short_spc445[] = "**mpi_type_commit %p";
-static const char long_spc445[]  = "MPI_Type_commit(datatype=%p) failed";
-static const char short_spc446[] = "**mpi_type_contiguous %d %D %p";
-static const char long_spc446[]  = "MPI_Type_contiguous(count=%d, %D, newtype=%p) failed";
-static const char short_spc447[] = "**mpi_type_contiguous_c %c %D %p";
-static const char long_spc447[]  = "MPI_Type_contiguous_c(count=%c, %D, newtype=%p) failed";
-static const char short_spc448[] = "**mpi_type_create_darray %d %d %d %p %p %p %p %d %D %p";
-static const char long_spc448[]  = "MPI_Type_create_darray(size=%d, rank=%d, ndims=%d, array_of_gsizes=%p, array_of_distribs=%p, array_of_dargs=%p, array_of_psizes=%p, order=%d, %D, newtype=%p) failed";
-static const char short_spc449[] = "**mpi_type_create_darray_c %d %d %d %p %p %p %p %d %D %p";
-static const char long_spc449[]  = "MPI_Type_create_darray_c(size=%d, rank=%d, ndims=%d, array_of_gsizes=%p, array_of_distribs=%p, array_of_dargs=%p, array_of_psizes=%p, order=%d, %D, newtype=%p) failed";
-static const char short_spc450[] = "**mpi_type_create_f90_complex %d %d";
-static const char long_spc450[]  = "MPI_Type_create_f90_complex (precision=%d, range=%d) failed";
-static const char short_spc451[] = "**mpi_type_create_f90_int %d";
-static const char long_spc451[]  = " MPI_Type_create_f90_int (range=%d) failed";
-static const char short_spc452[] = "**mpi_type_create_f90_real %d %d";
-static const char long_spc452[]  = "MPI_Type_create_f90_real (precision=%d, range=%d) failed";
-static const char short_spc453[] = "**mpi_type_create_hindexed %d %p %p %D %p";
-static const char long_spc453[]  = "MPI_Type_create_hindexed(count=%d, array_of_blocklengths=%p, array_of_displacements=%p, %D, newtype=%p) failed";
-static const char short_spc454[] = "**mpi_type_create_hindexed_block %d %d %p %D %p";
-static const char long_spc454[]  = "MPI_Type_create_hindexed_block(count=%d, blocklength=%d, array_of_displacements=%p, %D, newtype=%p) failed";
-static const char short_spc455[] = "**mpi_type_create_hindexed_block_c %c %c %p %D %p";
-static const char long_spc455[]  = "MPI_Type_create_hindexed_block_c(count=%c, blocklength=%c, array_of_displacements=%p, %D, newtype=%p) failed";
-static const char short_spc456[] = "**mpi_type_create_hindexed_c %c %p %p %D %p";
-static const char long_spc456[]  = "MPI_Type_create_hindexed_c(count=%c, array_of_blocklengths=%p, array_of_displacements=%p, %D, newtype=%p) failed";
-static const char short_spc457[] = "**mpi_type_create_hvector %d %d %L %D %p";
-static const char long_spc457[]  = "MPI_Type_create_hvector(count=%d, blocklength=%d, stride=%L, %D, newtype=%p) failed";
-static const char short_spc458[] = "**mpi_type_create_hvector_c %c %c %c %D %p";
-static const char long_spc458[]  = "MPI_Type_create_hvector_c(count=%c, blocklength=%c, stride=%c, %D, newtype=%p) failed";
-static const char short_spc459[] = "**mpi_type_create_indexed_block %d %d %p %D %p";
-static const char long_spc459[]  = "MPI_Type_create_indexed_block(count=%d, blocklength=%d, array_of_displacements=%p, %D, newtype=%p) failed";
-static const char short_spc460[] = "**mpi_type_create_indexed_block_c %c %c %p %D %p";
-static const char long_spc460[]  = "MPI_Type_create_indexed_block_c(count=%c, blocklength=%c, array_of_displacements=%p, %D, newtype=%p) failed";
-static const char short_spc461[] = "**mpi_type_create_keyval %p %p %p %p";
-static const char long_spc461[]  = "MPI_Type_create_keyval(type_copy_attr_fn=%p, type_delete_attr_fn=%p, type_keyval=%p, extra_state=%p) failed";
-static const char short_spc462[] = "**mpi_type_create_resized %D %L %L %p";
-static const char long_spc462[]  = "MPI_Type_create_resized(%D, lb=%L, extent=%L, newtype=%p) failed";
-static const char short_spc463[] = "**mpi_type_create_resized_c %D %c %c %p";
-static const char long_spc463[]  = "MPI_Type_create_resized_c(%D, lb=%c, extent=%c, newtype=%p) failed";
-static const char short_spc464[] = "**mpi_type_create_struct %d %p %p %p %p";
-static const char long_spc464[]  = "MPI_Type_create_struct(count=%d, array_of_blocklengths=%p, array_of_displacements=%p, array_of_types=%p, newtype=%p) failed";
-static const char short_spc465[] = "**mpi_type_create_struct_c %c %p %p %p %p";
-static const char long_spc465[]  = "MPI_Type_create_struct_c(count=%c, array_of_blocklengths=%p, array_of_displacements=%p, array_of_types=%p, newtype=%p) failed";
-static const char short_spc466[] = "**mpi_type_create_subarray %d %p %p %p %d %D %p";
-static const char long_spc466[]  = "MPI_Type_create_subarray(ndims=%d, array_of_sizes=%p, array_of_subsizes=%p, array_of_starts=%p, order=%d, %D, newtype=%p) failed";
-static const char short_spc467[] = "**mpi_type_create_subarray_c %d %p %p %p %d %D %p";
-static const char long_spc467[]  = "MPI_Type_create_subarray_c(ndims=%d, array_of_sizes=%p, array_of_subsizes=%p, array_of_starts=%p, order=%d, %D, newtype=%p) failed";
-static const char short_spc468[] = "**mpi_type_delete_attr %D %K";
-static const char long_spc468[]  = "MPI_Type_delete_attr(%D, %K) failed";
-static const char short_spc469[] = "**mpi_type_dup %D %p";
-static const char long_spc469[]  = "MPI_Type_dup(%D, newtype=%p) failed";
-static const char short_spc470[] = "**mpi_type_extent %D %p";
-static const char long_spc470[]  = "MPI_Type_extent(%D, extent=%p) failed";
-static const char short_spc471[] = "**mpi_type_free %p";
-static const char long_spc471[]  = "MPI_Type_free(datatype=%p) failed";
-static const char short_spc472[] = "**mpi_type_free_keyval %p";
-static const char long_spc472[]  = "MPI_Type_free_keyval(type_keyval=%p) failed";
-static const char short_spc473[] = "**mpi_type_get_attr %D %K %p %p";
-static const char long_spc473[]  = "MPI_Type_get_attr(%D, %K, attribute_val=%p, flag=%p) failed";
-static const char short_spc474[] = "**mpi_type_get_contents %D %d %d %d %p %p %p";
-static const char long_spc474[]  = "MPI_Type_get_contents(%D, max_integers=%d, max_addresses=%d, max_datatypes=%d, array_of_integers=%p, array_of_addresses=%p, array_of_datatypes=%p) failed";
-static const char short_spc475[] = "**mpi_type_get_contents_c %D %c %c %c %c %p %p %p %p";
-static const char long_spc475[]  = "MPI_Type_get_contents_c(%D, max_integers=%c, max_addresses=%c, max_large_counts=%c, max_datatypes=%c, array_of_integers=%p, array_of_addresses=%p, array_of_large_counts=%p, array_of_datatypes=%p) failed";
-static const char short_spc476[] = "**mpi_type_get_envelope %D %p %p %p %p";
-static const char long_spc476[]  = "MPI_Type_get_envelope(%D, num_integers=%p, num_addresses=%p, num_datatypes=%p, combiner=%p) failed";
-static const char short_spc477[] = "**mpi_type_get_envelope_c %D %p %p %p %p %p";
-static const char long_spc477[]  = "MPI_Type_get_envelope_c(%D, num_integers=%p, num_addresses=%p, num_large_counts=%p, num_datatypes=%p, combiner=%p) failed";
-static const char short_spc478[] = "**mpi_type_get_extent %D %p %p";
-static const char long_spc478[]  = "MPI_Type_get_extent(%D, lb=%p, extent=%p) failed";
-static const char short_spc479[] = "**mpi_type_get_extent_c %D %p %p";
-static const char long_spc479[]  = "MPI_Type_get_extent_c(%D, lb=%p, extent=%p) failed";
-static const char short_spc480[] = "**mpi_type_get_extent_x %D %p %p";
-static const char long_spc480[]  = "MPI_Type_get_extent_x(%D, lb=%p, extent=%p) failed";
-static const char short_spc481[] = "**mpi_type_get_name %D %p %p";
-static const char long_spc481[]  = "MPI_Type_get_name(%D, type_name=%p, resultlen=%p) failed";
-static const char short_spc482[] = "**mpi_type_get_true_extent %D %p %p";
-static const char long_spc482[]  = "MPI_Type_get_true_extent(%D, true_lb=%p, true_extent=%p) failed";
-static const char short_spc483[] = "**mpi_type_get_true_extent_c %D %p %p";
-static const char long_spc483[]  = "MPI_Type_get_true_extent_c(%D, true_lb=%p, true_extent=%p) failed";
-static const char short_spc484[] = "**mpi_type_get_true_extent_x %D %p %p";
-static const char long_spc484[]  = "MPI_Type_get_true_extent_x(%D, true_lb=%p, true_extent=%p) failed";
-static const char short_spc485[] = "**mpi_type_indexed %d %p %p %D %p";
-static const char long_spc485[]  = "MPI_Type_indexed(count=%d, array_of_blocklengths=%p, array_of_displacements=%p, %D, newtype=%p) failed";
-static const char short_spc486[] = "**mpi_type_indexed_c %c %p %p %D %p";
-static const char long_spc486[]  = "MPI_Type_indexed_c(count=%c, array_of_blocklengths=%p, array_of_displacements=%p, %D, newtype=%p) failed";
-static const char short_spc487[] = "**mpi_type_lb %D %p";
-static const char long_spc487[]  = "MPI_Type_lb(%D, displacement=%p) failed";
-static const char short_spc488[] = "**mpi_type_match_size %d %d %p";
-static const char long_spc488[]  = "MPI_Type_match_size(typeclass=%d, size=%d, datatype=%p) failed";
-static const char short_spc489[] = "**mpi_type_set_attr %D %K %p";
-static const char long_spc489[]  = "MPI_Type_set_attr(%D, %K, attribute_val=%p) failed";
-static const char short_spc490[] = "**mpi_type_set_name %D %s";
-static const char long_spc490[]  = "MPI_Type_set_name(%D, type_name=%s) failed";
-static const char short_spc491[] = "**mpi_type_size %D %p";
-static const char long_spc491[]  = "MPI_Type_size(%D, size=%p) failed";
-static const char short_spc492[] = "**mpi_type_size_c %D %p";
-static const char long_spc492[]  = "MPI_Type_size_c(%D, size=%p) failed";
-static const char short_spc493[] = "**mpi_type_size_x %D %p";
-static const char long_spc493[]  = "MPI_Type_size_x(%D, size=%p) failed";
-static const char short_spc494[] = "**mpi_type_ub %D %p";
-static const char long_spc494[]  = "MPI_Type_ub(%D, displacement=%p) failed";
-static const char short_spc495[] = "**mpi_type_vector %d %d %d %D %p";
-static const char long_spc495[]  = "MPI_Type_vector(count=%d, blocklength=%d, stride=%d, %D, newtype=%p) failed";
-static const char short_spc496[] = "**mpi_type_vector_c %c %c %c %D %p";
-static const char long_spc496[]  = "MPI_Type_vector_c(count=%c, blocklength=%c, stride=%c, %D, newtype=%p) failed";
-static const char short_spc497[] = "**mpi_unpack %p %d %p %p %d %D %C";
-static const char long_spc497[]  = "MPI_Unpack(inbuf=%p, insize=%d, position=%p, outbuf=%p, outcount=%d, %D, %C) failed";
-static const char short_spc498[] = "**mpi_unpack_c %p %c %p %p %c %D %C";
-static const char long_spc498[]  = "MPI_Unpack_c(inbuf=%p, insize=%c, position=%p, outbuf=%p, outcount=%c, %D, %C) failed";
-static const char short_spc499[] = "**mpi_unpack_external %s %p %L %p %p %d %D";
-static const char long_spc499[]  = "MPI_Unpack_external(datarep=%s, inbuf=%p, insize=%L, position=%p, outbuf=%p, outcount=%d, %D) failed";
-static const char short_spc500[] = "**mpi_unpack_external_c %s %p %c %p %p %c %D";
-static const char long_spc500[]  = "MPI_Unpack_external_c(datarep=%s, inbuf=%p, insize=%c, position=%p, outbuf=%p, outcount=%c, %D) failed";
-static const char short_spc501[] = "**mpi_unpublish_name %s %I %s";
-static const char long_spc501[]  = "MPI_Unpublish_name(service_name=%s, %I, port_name=%s) failed";
-static const char short_spc502[] = "**mpi_wait %p %p";
-static const char long_spc502[]  = "MPI_Wait(request=%p, status=%p) failed";
-static const char short_spc503[] = "**mpi_waitall %d %p %p";
-static const char long_spc503[]  = "MPI_Waitall(count=%d, array_of_requests=%p, array_of_statuses=%p) failed";
-static const char short_spc504[] = "**mpi_waitany %d %p %p %p";
-static const char long_spc504[]  = "MPI_Waitany(count=%d, array_of_requests=%p, indx=%p, status=%p) failed";
-static const char short_spc505[] = "**mpi_waitsome %d %p %p %p %p";
-static const char long_spc505[]  = "MPI_Waitsome(incount=%d, array_of_requests=%p, outcount=%p, array_of_indices=%p, array_of_statuses=%p) failed";
-static const char short_spc506[] = "**mpi_win_allocate %L %d %I %C %p %p";
-static const char long_spc506[]  = "MPI_Win_allocate(size=%L, disp_unit=%d, %I, %C, baseptr=%p, win=%p) failed";
-static const char short_spc507[] = "**mpi_win_allocate_c %L %L %I %C %p %p";
-static const char long_spc507[]  = "MPI_Win_allocate_c(size=%L, disp_unit=%L, %I, %C, baseptr=%p, win=%p) failed";
-static const char short_spc508[] = "**mpi_win_allocate_shared %L %d %I %C %p %p";
-static const char long_spc508[]  = "MPI_Win_allocate_shared(size=%L, disp_unit=%d, %I, %C, baseptr=%p, win=%p) failed";
-static const char short_spc509[] = "**mpi_win_allocate_shared_c %L %L %I %C %p %p";
-static const char long_spc509[]  = "MPI_Win_allocate_shared_c(size=%L, disp_unit=%L, %I, %C, baseptr=%p, win=%p) failed";
-static const char short_spc510[] = "**mpi_win_attach %W %p %L";
-static const char long_spc510[]  = "MPI_Win_attach(%W, base=%p, size=%L) failed";
-static const char short_spc511[] = "**mpi_win_call_errhandler %W %d";
-static const char long_spc511[]  = "MPI_Win_call_errhandler(%W, errorcode=%d) failed";
-static const char short_spc512[] = "**mpi_win_complete %W";
-static const char long_spc512[]  = "MPI_Win_complete(%W) failed";
-static const char short_spc513[] = "**mpi_win_create %p %L %d %I %C %p";
-static const char long_spc513[]  = "MPI_Win_create(base=%p, size=%L, disp_unit=%d, %I, %C, win=%p) failed";
-static const char short_spc514[] = "**mpi_win_create_c %p %L %L %I %C %p";
-static const char long_spc514[]  = "MPI_Win_create_c(base=%p, size=%L, disp_unit=%L, %I, %C, win=%p) failed";
-static const char short_spc515[] = "**mpi_win_create_dynamic %I %C %p";
-static const char long_spc515[]  = "MPI_Win_create_dynamic(%I, %C, win=%p) failed";
-static const char short_spc516[] = "**mpi_win_create_errhandler %p %p";
-static const char long_spc516[]  = "MPI_Win_create_errhandler(win_errhandler_fn=%p, errhandler=%p) failed";
-static const char short_spc517[] = "**mpi_win_create_keyval %p %p %p %p";
-static const char long_spc517[]  = "MPI_Win_create_keyval(win_copy_attr_fn=%p, win_delete_attr_fn=%p, win_keyval=%p, extra_state=%p) failed";
-static const char short_spc518[] = "**mpi_win_delete_attr %W %K";
-static const char long_spc518[]  = "MPI_Win_delete_attr(%W, %K) failed";
-static const char short_spc519[] = "**mpi_win_detach %W %p";
-static const char long_spc519[]  = "MPI_Win_detach(%W, base=%p) failed";
-static const char short_spc520[] = "**mpi_win_fence %A %W";
-static const char long_spc520[]  = "MPI_Win_fence(%A, %W) failed";
-static const char short_spc521[] = "**mpi_win_flush %d %W";
-static const char long_spc521[]  = "MPI_Win_flush(rank=%d, %W) failed";
-static const char short_spc522[] = "**mpi_win_flush_all %W";
-static const char long_spc522[]  = "MPI_Win_flush_all(%W) failed";
-static const char short_spc523[] = "**mpi_win_flush_local %d %W";
-static const char long_spc523[]  = "MPI_Win_flush_local(rank=%d, %W) failed";
-static const char short_spc524[] = "**mpi_win_flush_local_all %W";
-static const char long_spc524[]  = "MPI_Win_flush_local_all(%W) failed";
-static const char short_spc525[] = "**mpi_win_free %p";
-static const char long_spc525[]  = "MPI_Win_free(win=%p) failed";
-static const char short_spc526[] = "**mpi_win_free_keyval %p";
-static const char long_spc526[]  = "MPI_Win_free_keyval(win_keyval=%p) failed";
-static const char short_spc527[] = "**mpi_win_get_attr %W %K %p %p";
-static const char long_spc527[]  = "MPI_Win_get_attr(%W, %K, attribute_val=%p, flag=%p) failed";
-static const char short_spc528[] = "**mpi_win_get_errhandler %W %p";
-static const char long_spc528[]  = "MPI_Win_get_errhandler(%W, errhandler=%p) failed";
-static const char short_spc529[] = "**mpi_win_get_group %W %p";
-static const char long_spc529[]  = "MPI_Win_get_group(%W, group=%p) failed";
-static const char short_spc530[] = "**mpi_win_get_info %W %p";
-static const char long_spc530[]  = "MPI_Win_get_info(%W, info_used=%p) failed";
-static const char short_spc531[] = "**mpi_win_get_name %W %p %p";
-static const char long_spc531[]  = "MPI_Win_get_name(%W, win_name=%p, resultlen=%p) failed";
-static const char short_spc532[] = "**mpi_win_lock %d %d %A %W";
-static const char long_spc532[]  = "MPI_Win_lock(lock_type=%d, rank=%d, %A, %W) failed";
-static const char short_spc533[] = "**mpi_win_lock_all %A %W";
-static const char long_spc533[]  = "MPI_Win_lock_all(%A, %W) failed";
-static const char short_spc534[] = "**mpi_win_post %G %A %W";
-static const char long_spc534[]  = "MPI_Win_post(%G, %A, %W) failed";
-static const char short_spc535[] = "**mpi_win_set_attr %W %K %p";
-static const char long_spc535[]  = "MPI_Win_set_attr(%W, %K, attribute_val=%p) failed";
-static const char short_spc536[] = "**mpi_win_set_errhandler %W %E";
-static const char long_spc536[]  = "MPI_Win_set_errhandler(%W, %E) failed";
-static const char short_spc537[] = "**mpi_win_set_info %W %I";
-static const char long_spc537[]  = "MPI_Win_set_info(%W, %I) failed";
-static const char short_spc538[] = "**mpi_win_set_name %W %s";
-static const char long_spc538[]  = "MPI_Win_set_name(%W, win_name=%s) failed";
-static const char short_spc539[] = "**mpi_win_shared_query %W %d %p %p %p";
-static const char long_spc539[]  = "MPI_Win_shared_query(%W, rank=%d, size=%p, disp_unit=%p, baseptr=%p) failed";
-static const char short_spc540[] = "**mpi_win_shared_query_c %W %d %p %p %p";
-static const char long_spc540[]  = "MPI_Win_shared_query_c(%W, rank=%d, size=%p, disp_unit=%p, baseptr=%p) failed";
-static const char short_spc541[] = "**mpi_win_start %G %A %W";
-static const char long_spc541[]  = "MPI_Win_start(%G, %A, %W) failed";
-static const char short_spc542[] = "**mpi_win_sync %W";
-static const char long_spc542[]  = "MPI_Win_sync(%W) failed";
-static const char short_spc543[] = "**mpi_win_test %W %p";
-static const char long_spc543[]  = "MPI_Win_test(%W, flag=%p) failed";
-static const char short_spc544[] = "**mpi_win_unlock %d %W";
-static const char long_spc544[]  = "MPI_Win_unlock(rank=%d, %W) failed";
-static const char short_spc545[] = "**mpi_win_unlock_all %W";
-static const char long_spc545[]  = "MPI_Win_unlock_all(%W) failed";
-static const char short_spc546[] = "**mpi_win_wait %W";
-static const char long_spc546[]  = "MPI_Win_wait(%W) failed";
-static const char short_spc547[] = "**mpix_allreduce_enqueue %p %p %d %D %O %C";
-static const char long_spc547[]  = "MPIX_Allreduce_enqueue(sendbuf=%p, recvbuf=%p, count=%d, %D, %O, %C) failed";
-static const char short_spc548[] = "**mpix_allreduce_enqueue_c %p %p %c %D %O %C";
-static const char long_spc548[]  = "MPIX_Allreduce_enqueue_c(sendbuf=%p, recvbuf=%p, count=%c, %D, %O, %C) failed";
-static const char short_spc549[] = "**mpix_comm_agree %C %p";
-static const char long_spc549[]  = "MPIX_Comm_agree(%C, flag=%p) failed";
-static const char short_spc550[] = "**mpix_comm_failure_ack %C";
-static const char long_spc550[]  = "MPIX_Comm_failure_ack(%C) failed";
-static const char short_spc551[] = "**mpix_comm_failure_get_acked %C %p";
-static const char long_spc551[]  = "MPIX_Comm_failure_get_acked(%C, failedgrp=%p) failed";
-static const char short_spc552[] = "**mpix_comm_get_failed %C %p";
-static const char long_spc552[]  = "MPIX_Comm_get_failed(%C, failedgrp=%p) failed";
-static const char short_spc553[] = "**mpix_comm_get_stream %C %d %p";
-static const char long_spc553[]  = "MPIX_Comm_get_stream(%C, idx=%d, stream=%p) failed";
-static const char short_spc554[] = "**mpix_comm_revoke %C";
-static const char long_spc554[]  = "MPIX_Comm_revoke(%C) failed";
-static const char short_spc555[] = "**mpix_comm_shrink %C %p";
-static const char long_spc555[]  = "MPIX_Comm_shrink(%C, newcomm=%p) failed";
-static const char short_spc556[] = "**mpix_delete_error_class %d";
-static const char long_spc556[]  = "MPIX_Delete_error_class(errorclass=%d) failed";
-static const char short_spc557[] = "**mpix_delete_error_code %d";
-static const char long_spc557[]  = "MPIX_Delete_error_code(errorcode=%d) failed";
-static const char short_spc558[] = "**mpix_delete_error_string %d";
-static const char long_spc558[]  = "MPIX_Delete_error_string(errorcode=%d) failed";
-static const char short_spc559[] = "**mpix_gpu_query_support %d %p";
-static const char long_spc559[]  = "MPIX_GPU_query_support(gpu_type=%d, is_supported=%p) failed";
-static const char short_spc560[] = "**mpix_grequest_class_allocate %x %p %p";
-static const char long_spc560[]  = "MPIX_Grequest_class_allocate(%x, extra_state=%p, request=%p) failed";
-static const char short_spc561[] = "**mpix_grequest_class_create %p %p %p %p %p %p";
-static const char long_spc561[]  = "MPIX_Grequest_class_create(query_fn=%p, free_fn=%p, cancel_fn=%p, poll_fn=%p, wait_fn=%p, greq_class=%p) failed";
-static const char short_spc562[] = "**mpix_grequest_start %p %p %p %p %p %p %p";
-static const char long_spc562[]  = "MPIX_Grequest_start(query_fn=%p, free_fn=%p, cancel_fn=%p, poll_fn=%p, wait_fn=%p, extra_state=%p, request=%p) failed";
-static const char short_spc563[] = "**mpix_info_set_hex %I %s %p %d";
-static const char long_spc563[]  = "MPIX_Info_set_hex(%I, key=%s, value=%p, value_size=%d) failed";
-static const char short_spc564[] = "**mpix_irecv_enqueue %p %d %D %i %t %C %p";
-static const char long_spc564[]  = "MPIX_Irecv_enqueue(buf=%p, count=%d, %D, %i, %t, %C, request=%p) failed";
-static const char short_spc565[] = "**mpix_irecv_enqueue_c %p %c %D %i %t %C %p";
-static const char long_spc565[]  = "MPIX_Irecv_enqueue_c(buf=%p, count=%c, %D, %i, %t, %C, request=%p) failed";
-static const char short_spc566[] = "**mpix_isend_enqueue %p %d %D %i %t %C %p";
-static const char long_spc566[]  = "MPIX_Isend_enqueue(buf=%p, count=%d, %D, %i, %t, %C, request=%p) failed";
-static const char short_spc567[] = "**mpix_isend_enqueue_c %p %c %D %i %t %C %p";
-static const char long_spc567[]  = "MPIX_Isend_enqueue_c(buf=%p, count=%c, %D, %i, %t, %C, request=%p) failed";
-static const char short_spc568[] = "**mpix_recv_enqueue %p %d %D %i %t %C %p";
-static const char long_spc568[]  = "MPIX_Recv_enqueue(buf=%p, count=%d, %D, %i, %t, %C, status=%p) failed";
-static const char short_spc569[] = "**mpix_recv_enqueue_c %p %c %D %i %t %C %p";
-static const char long_spc569[]  = "MPIX_Recv_enqueue_c(buf=%p, count=%c, %D, %i, %t, %C, status=%p) failed";
-static const char short_spc570[] = "**mpix_send_enqueue %p %d %D %i %t %C";
-static const char long_spc570[]  = "MPIX_Send_enqueue(buf=%p, count=%d, %D, %i, %t, %C) failed";
-static const char short_spc571[] = "**mpix_send_enqueue_c %p %c %D %i %t %C";
-static const char long_spc571[]  = "MPIX_Send_enqueue_c(buf=%p, count=%c, %D, %i, %t, %C) failed";
-static const char short_spc572[] = "**mpix_start_progress_thread %x";
-static const char long_spc572[]  = "MPIX_Start_progress_thread(%x) failed";
-static const char short_spc573[] = "**mpix_stop_progress_thread %x";
-static const char long_spc573[]  = "MPIX_Stop_progress_thread(%x) failed";
-static const char short_spc574[] = "**mpix_stream_comm_create %C %x %p";
-static const char long_spc574[]  = "MPIX_Stream_comm_create(%C, %x, newcomm=%p) failed";
-static const char short_spc575[] = "**mpix_stream_comm_create_multiplex %C %d %p %p";
-static const char long_spc575[]  = "MPIX_Stream_comm_create_multiplex(%C, count=%d, array_of_streams=%p, newcomm=%p) failed";
-static const char short_spc576[] = "**mpix_stream_create %I %p";
-static const char long_spc576[]  = "MPIX_Stream_create(%I, stream=%p) failed";
-static const char short_spc577[] = "**mpix_stream_free %p";
-static const char long_spc577[]  = "MPIX_Stream_free(stream=%p) failed";
-static const char short_spc578[] = "**mpix_stream_irecv %p %d %D %i %t %C %d %d %p";
-static const char long_spc578[]  = "MPIX_Stream_irecv(buf=%p, count=%d, %D, %i, %t, %C, source_stream_index=%d, dest_stream_index=%d, request=%p) failed";
-static const char short_spc579[] = "**mpix_stream_irecv_c %p %c %D %i %t %C %d %d %p";
-static const char long_spc579[]  = "MPIX_Stream_irecv_c(buf=%p, count=%c, %D, %i, %t, %C, source_stream_index=%d, dest_stream_index=%d, request=%p) failed";
-static const char short_spc580[] = "**mpix_stream_isend %p %d %D %i %t %C %d %d %p";
-static const char long_spc580[]  = "MPIX_Stream_isend(buf=%p, count=%d, %D, %i, %t, %C, source_stream_index=%d, dest_stream_index=%d, request=%p) failed";
-static const char short_spc581[] = "**mpix_stream_isend_c %p %c %D %i %t %C %d %d %p";
-static const char long_spc581[]  = "MPIX_Stream_isend_c(buf=%p, count=%c, %D, %i, %t, %C, source_stream_index=%d, dest_stream_index=%d, request=%p) failed";
-static const char short_spc582[] = "**mpix_stream_progress %x";
-static const char long_spc582[]  = "MPIX_Stream_progress(%x) failed";
-static const char short_spc583[] = "**mpix_stream_recv %p %d %D %i %t %C %d %d %p";
-static const char long_spc583[]  = "MPIX_Stream_recv(buf=%p, count=%d, %D, %i, %t, %C, source_stream_index=%d, dest_stream_index=%d, status=%p) failed";
-static const char short_spc584[] = "**mpix_stream_recv_c %p %c %D %i %t %C %d %d %p";
-static const char long_spc584[]  = "MPIX_Stream_recv_c(buf=%p, count=%c, %D, %i, %t, %C, source_stream_index=%d, dest_stream_index=%d, status=%p) failed";
-static const char short_spc585[] = "**mpix_stream_send %p %d %D %i %t %C %d %d";
-static const char long_spc585[]  = "MPIX_Stream_send(buf=%p, count=%d, %D, %i, %t, %C, source_stream_index=%d, dest_stream_index=%d) failed";
-static const char short_spc586[] = "**mpix_stream_send_c %p %c %D %i %t %C %d %d";
-static const char long_spc586[]  = "MPIX_Stream_send_c(buf=%p, count=%c, %D, %i, %t, %C, source_stream_index=%d, dest_stream_index=%d) failed";
-static const char short_spc587[] = "**mpix_type_iov %D %c %p %c %p";
-static const char long_spc587[]  = "MPIX_Type_iov(%D, iov_offset=%c, iov=%p, max_iov_len=%c, actual_iov_len=%p) failed";
-static const char short_spc588[] = "**mpix_type_iov_len %D %c %p %p";
-static const char long_spc588[]  = "MPIX_Type_iov_len(%D, max_iov_bytes=%c, iov_len=%p, actual_iov_bytes=%p) failed";
-static const char short_spc589[] = "**mpix_wait_enqueue %p %p";
-static const char long_spc589[]  = "MPIX_Wait_enqueue(request=%p, status=%p) failed";
-static const char short_spc590[] = "**mpix_waitall_enqueue %d %p %p";
-static const char long_spc590[]  = "MPIX_Waitall_enqueue(count=%d, array_of_requests=%p, array_of_statuses=%p) failed";
-static const char short_spc591[] = "**msgnotreq %d";
-static const char long_spc591[]  = " Invalid MPI_Request at array index %d (MPI_Message passed)";
-static const char short_spc592[] = "**namepubfile %s %s %s";
-static const char long_spc592[]  = "Unable to publish service name %s using file %s for reason %s";
-static const char short_spc593[] = "**namepubnotfound %s";
-static const char long_spc593[]  = "Lookup failed for service name %s";
-static const char short_spc594[] = "**namepubnotpub %s";
-static const char long_spc594[]  = "Publish failed for service name %s";
-static const char short_spc595[] = "**namepubnotunpub %s";
-static const char long_spc595[]  = "Failed to unpublish service name %s";
-static const char short_spc596[] = "**nomem %d";
-static const char long_spc596[]  = "Out of memory (unable to allocate %d bytes)";
-static const char short_spc597[] = "**nomem %s";
-static const char long_spc597[]  = "Out of memory (unable to allocate a '%s')";
-static const char short_spc598[] = "**nomem %s %d";
-static const char long_spc598[]  = "Out of memory (unable to allocate a '%s' of size %d)";
-static const char short_spc599[] = "**nomem2 %d %s";
-static const char long_spc599[]  = "Unable to allocate %d bytes of memory for %s (probably out of memory)";
-static const char short_spc600[] = "**nomemuereq %d";
-static const char long_spc600[]  = "Failed to allocate memory for an unexpected message. %d unexpected messages queued.";
-static const char short_spc601[] = "**notimpl %s";
-static const char long_spc601[]  = "Function %s not implemented";
-static const char short_spc602[] = "**notsame %s %s";
-static const char long_spc602[]  = "Inconsistent arguments %s to collective routine %s";
-static const char short_spc603[] = "**nullptr %s";
-static const char long_spc603[]  = "Null pointer in parameter %s";
-static const char short_spc604[] = "**nullptrtype %s";
-static const char long_spc604[]  = "Null %s pointer";
-static const char short_spc605[] = "**ofid_alias %s %d %s %s";
-static const char long_spc605[]  = "OFI cq alias failed (%s:%d:%s:%s)";
-static const char short_spc606[] = "**ofid_avclose %s %d %s %s";
-static const char long_spc606[]  = "OFI av close failed (%s:%d:%s:%s)";
-static const char short_spc607[] = "**ofid_avlookup %s %d %s %s";
-static const char long_spc607[]  = "OFI address vector lookup failed (%s:%d:%s:%s)";
-static const char short_spc608[] = "**ofid_avmap %s %d %s %s";
-static const char long_spc608[]  = "OFI address vector map failed (%s:%d:%s:%s)";
-static const char short_spc609[] = "**ofid_avopen %s %d %s %s";
-static const char long_spc609[]  = "OFI address vector open failed (%s:%d:%s:%s)";
-static const char short_spc610[] = "**ofid_avsync %s %d %s %s";
-static const char long_spc610[]  = "OFI address vector sync failed (%s:%d:%s:%s)";
-static const char short_spc611[] = "**ofid_bind %s %d %s %s";
-static const char long_spc611[]  = "OFI resource bind failed (%s:%d:%s:%s)";
-static const char short_spc612[] = "**ofid_cancel %s %d %s %s";
-static const char long_spc612[]  = "OFI cancel failed (%s:%d:%s:%s)";
-static const char short_spc613[] = "**ofid_cntr_wait %s %d %s %s";
-static const char long_spc613[]  = "OFI OFI Counter wait failed (%s:%d:%s:%s)";
-static const char short_spc614[] = "**ofid_cqclose %s %d %s %s";
-static const char long_spc614[]  = "OFI cq close failed (%s:%d:%s:%s)";
-static const char short_spc615[] = "**ofid_ctrlcancel %s %d %s %s";
-static const char long_spc615[]  = "OFI control cancel failed (%s:%d:%s:%s)";
-static const char short_spc616[] = "**ofid_domainclose %s %d %s %s";
-static const char long_spc616[]  = "OFI domain close failed (%s:%d:%s:%s)";
-static const char short_spc617[] = "**ofid_ep %s %d %s %s";
-static const char long_spc617[]  = "OFI endpoint open failed (%s:%d:%s:%s)";
-static const char short_spc618[] = "**ofid_ep_enable %s %d %s %s";
-static const char long_spc618[]  = "OFI EP enable failed (%s:%d:%s:%s)";
-static const char short_spc619[] = "**ofid_epclose %s %d %s %s";
-static const char long_spc619[]  = "OFI endpoint close failed (%s:%d:%s:%s)";
-static const char short_spc620[] = "**ofid_epsync %s %d %s %s";
-static const char long_spc620[]  = "OFI endpoint synchronization failed (%s:%d:%s:%s)";
-static const char short_spc621[] = "**ofid_fabric %s %d %s %s";
-static const char long_spc621[]  = "OFI fi_fabric failed (%s:%d:%s:%s)";
-static const char short_spc622[] = "**ofid_getinfo %s %d %s %s";
-static const char long_spc622[]  = "OFI fi_getinfo() failed (%s:%d:%s:%s)";
-static const char short_spc623[] = "**ofid_getname %s %d %s %s";
-static const char long_spc623[]  = "OFI get endpoint name failed (%s:%d:%s:%s)";
-static const char short_spc624[] = "**ofid_getopt %s %d %s %s";
-static const char long_spc624[]  = "OFI getopt failed (%s:%d:%s:%s)";
-static const char short_spc625[] = "**ofid_inject %s %d %s %s";
-static const char long_spc625[]  = "OFI inject failed (%s:%d:%s:%s)";
-static const char short_spc626[] = "**ofid_mr_reg %s %d %s %s";
-static const char long_spc626[]  = "OFI memory registration failed (%s:%d:%s:%s)";
-static const char short_spc627[] = "**ofid_mr_unreg %s %d %s %s";
-static const char long_spc627[]  = "OFI memory deregistration failed (%s:%d:%s:%s)";
-static const char short_spc628[] = "**ofid_opencq %s %d %s %s";
-static const char long_spc628[]  = "OFI event queue create failed (%s:%d:%s:%s)";
-static const char short_spc629[] = "**ofid_openct %s %d %s %s";
-static const char long_spc629[]  = "OFI event counter create failed (%s:%d:%s:%s)";
-static const char short_spc630[] = "**ofid_opendomain %s %d %s %s";
-static const char long_spc630[]  = "OFI fi_open domain failed (%s:%d:%s:%s)";
-static const char short_spc631[] = "**ofid_peek %s %d %s %s";
-static const char long_spc631[]  = "OFI peek failed (%s:%d:%s:%s)";
-static const char short_spc632[] = "**ofid_pmi %s %d %s %s";
-static const char long_spc632[]  = "pmi failed (%s:%d:%s:%s)";
-static const char short_spc633[] = "**ofid_poll %s %d %s %s";
-static const char long_spc633[]  = "OFI poll failed (%s:%d:%s:%s)";
-static const char short_spc634[] = "**ofid_prepost %s %d %s %s";
-static const char long_spc634[]  = "OFI preposting receives failed (%s:%d:%s:%s)";
-static const char short_spc635[] = "**ofid_rdma_atomicto %s %d %s %s";
-static const char long_spc635[]  = "OFI rdma atomicto failed (%s:%d:%s:%s)";
-static const char short_spc636[] = "**ofid_rdma_cswap %s %d %s %s";
-static const char long_spc636[]  = "OFI rdma cswap failed (%s:%d:%s:%s)";
-static const char short_spc637[] = "**ofid_rdma_inject_write %s %d %s %s";
-static const char long_spc637[]  = "OFI rdma write immediate failed (%s:%d:%s:%s)";
-static const char short_spc638[] = "**ofid_rdma_readfrom %s %d %s %s";
-static const char long_spc638[]  = "OFI read failed (%s:%d:%s:%s)";
-static const char short_spc639[] = "**ofid_rdma_write %s %d %s %s";
-static const char long_spc639[]  = "OFI rdma write failed (%s:%d:%s:%s)";
-static const char short_spc640[] = "**ofid_send %s %d %s %s";
-static const char long_spc640[]  = "OFI send failed (%s:%d:%s:%s)";
-static const char short_spc641[] = "**ofid_sendv %s %d %s %s";
-static const char long_spc641[]  = "OFI send failed (%s:%d:%s:%s)";
-static const char short_spc642[] = "**ofid_setopt %s %d %s %s";
-static const char long_spc642[]  = "OFI setopt failed (%s:%d:%s:%s)";
-static const char short_spc643[] = "**ofid_tinject %s %d %s %s";
-static const char long_spc643[]  = "OFI tagged inject failed (%s:%d:%s:%s)";
-static const char short_spc644[] = "**ofid_trecv %s %d %s %s";
-static const char long_spc644[]  = "OFI tagged recv failed (%s:%d:%s:%s)";
-static const char short_spc645[] = "**ofid_trecvsync %s %d %s %s";
-static const char long_spc645[]  = "OFI tagged recv sync failed (%s:%d:%s:%s)";
-static const char short_spc646[] = "**ofid_tsend %s %d %s %s";
-static const char long_spc646[]  = "OFI tagged send failed (%s:%d:%s:%s)";
-static const char short_spc647[] = "**ofid_tsendsync %s %d %s %s";
-static const char long_spc647[]  = "OFI tagged send sync failed (%s:%d:%s:%s)";
-static const char short_spc648[] = "**opnotpredefined %d";
-static const char long_spc648[]  = "only predefined ops are valid (op = %d)";
-static const char short_spc649[] = "**opundefined %s";
-static const char long_spc649[]  = "MPI_Op %s operation not defined for this datatype ";
-static const char short_spc650[] = "**parse_thread_affinity %s";
-static const char long_spc650[]  = "Failed to parse async thread affinity string [%s]";
-static const char short_spc651[] = "**partitioninvalid %d";
-static const char long_spc651[]  = " Invalid partition, value is %d ";
-static const char short_spc652[] = "**partitioninvalid %d %d";
-static const char long_spc652[]  = " Invalid partition range, values are %d %d";
-static const char short_spc653[] = "**pglookup %s";
-static const char long_spc653[]  = "unable to find the process group structure with id <%s>";
-static const char short_spc654[] = "**pmi2_info_getjobattr %d";
-static const char long_spc654[]  = " PMI2_Info_GetJobAttr returned %d";
-static const char short_spc655[] = "**pmi_barrier %d";
-static const char long_spc655[]  = "PMI_Barrier returned %d";
-static const char short_spc656[] = "**pmi_get_appnum %d";
-static const char long_spc656[]  = "PMI_Get_appnum returned %d";
-static const char short_spc657[] = "**pmi_get_rank %d";
-static const char long_spc657[]  = "PMI_Get_rank returned %d";
-static const char short_spc658[] = "**pmi_get_size %d";
-static const char long_spc658[]  = "PMI_Get_size returned %d";
-static const char short_spc659[] = "**pmi_get_universe_size %d";
-static const char long_spc659[]  = "PMI_Get_universe_size returned %d";
-static const char short_spc660[] = "**pmi_getjobattr %d";
-static const char long_spc660[]  = " PMI2 GetJobAttr failed: %d";
-static const char short_spc661[] = "**pmi_init %d";
-static const char long_spc661[]  = "PMI_Init returned %d";
-static const char short_spc662[] = "**pmi_job_getid %d";
-static const char long_spc662[]  = "PMI2_Job_GetId returned %d";
-static const char short_spc663[] = "**pmi_kvs_commit %d";
-static const char long_spc663[]  = "PMI_KVS_Commit returned %d";
-static const char short_spc664[] = "**pmi_kvs_get %d";
-static const char long_spc664[]  = "PMI_KVS_Get returned %d";
-static const char short_spc665[] = "**pmi_kvs_get_key_length_max %d";
-static const char long_spc665[]  = "PMI_KVS_Get_key_length_max returned %d";
-static const char short_spc666[] = "**pmi_kvs_get_my_name %d";
-static const char long_spc666[]  = "PMI_KVS_Get_my_name returned %d";
-static const char short_spc667[] = "**pmi_kvs_get_name_length_max %d";
-static const char long_spc667[]  = "PMI_KVS_Get_name_length_max returned %d";
-static const char short_spc668[] = "**pmi_kvs_get_value_length_max %d";
-static const char long_spc668[]  = "PMI_KVS_Get_value_length_max returned %d";
-static const char short_spc669[] = "**pmi_kvs_put %d";
-static const char long_spc669[]  = "PMI_KVS_Put returned %d";
-static const char short_spc670[] = "**pmi_kvsfence %d";
-static const char long_spc670[]  = " PMI2 KVS_Fence failed: %d";
-static const char short_spc671[] = "**pmi_kvsget %d";
-static const char long_spc671[]  = " PMI2 KVS_Get failed: %d";
-static const char short_spc672[] = "**pmi_kvsput %d";
-static const char long_spc672[]  = " PMI2 KVS_Put failed: %d";
-static const char short_spc673[] = "**pmi_spawn_multiple %d";
-static const char long_spc673[]  = "PMI_Spawn_multiple returned %d";
-static const char short_spc674[] = "**pmix_commit %d";
-static const char long_spc674[]  = "PMIx_Commit returned %d";
-static const char short_spc675[] = "**pmix_fence %d";
-static const char long_spc675[]  = "PMIx_Fence returned %d";
-static const char short_spc676[] = "**pmix_get %d";
-static const char long_spc676[]  = "PMIx_Get returned %d";
-static const char short_spc677[] = "**pmix_init %d";
-static const char long_spc677[]  = "PMIX_Init returned %d";
-static const char short_spc678[] = "**pmix_put %d";
-static const char long_spc678[]  = "PMIx_Put returned %d";
-static const char short_spc679[] = "**pmix_resolve_nodes %d";
-static const char long_spc679[]  = " PMIx_Resolve_nodes returned %d";
-static const char short_spc680[] = "**pmix_resolve_peers %d";
-static const char long_spc680[]  = " PMIx_Resolve_peers returned %d";
-static const char short_spc681[] = "**poll %s";
-static const char long_spc681[]  = "poll of socket fds failed - %s";
-static const char short_spc682[] = "**portexist %s";
-static const char long_spc682[]  = "Named port %s does not exist";
-static const char short_spc683[] = "**psetinvalidn %d";
-static const char long_spc683[]  = "Invalid pset number - %d";
-static const char short_spc684[] = "**pthread_mutex %s";
-static const char long_spc684[]  = "pthread mutex routine failed (%s)";
-static const char short_spc685[] = "**qmpi_invalid_name %s";
-static const char long_spc685[]  = " tool name is invalid (name=%s)";
-static const char short_spc686[] = "**rangedup %d %d %d";
-static const char long_spc686[]  = "The range array specifies duplicate entries; process %d specified in range array %d was previously specified in range array %d";
-static const char short_spc687[] = "**rangeendinvalid %d %d %d";
-static const char long_spc687[]  = "The %dth element of a range array ends at %d but must be nonnegative and less than %d";
-static const char short_spc688[] = "**rangestartinvalid %d %d %d";
-static const char long_spc688[]  = "The %dth element of a range array starts at %d but must be nonnegative and less than %d";
-static const char short_spc689[] = "**rank %d %d";
-static const char long_spc689[]  = "Invalid rank has value %d but must be nonnegative and less than %d";
-static const char short_spc690[] = "**rankarray %d %d %d";
-static const char long_spc690[]  = "Invalid rank in rank array at index %d; value is %d but must be in the range 0 to %d";
-static const char short_spc691[] = "**rankdup %d %d %d";
-static const char long_spc691[]  = "Duplicate ranks in rank array at index %d, has value %d which is also the value at index %d";
-static const char short_spc692[] = "**ranklocal %d %d";
-static const char long_spc692[]  = "Error specifying local_leader; rank given was %d but must be in the range 0 to %d";
-static const char short_spc693[] = "**rankremote %d %d";
-static const char long_spc693[]  = "Error specifying remote_leader; rank given was %d but must be in the range 0 to %d";
-static const char short_spc694[] = "**read %d %s";
-static const char long_spc694[]  = "read from socket failed - nread=%d %s";
-static const char short_spc695[] = "**read %s";
-static const char long_spc695[]  = "read from socket failed - %s";
-static const char short_spc696[] = "**request %d";
-static const char long_spc696[]  = "Invalid MPI_Request in array element %d (from 0)";
-static const char short_spc697[] = "**request_invalid_kind %d";
-static const char long_spc697[]  = "The supplied request was invalid (kind=%d)";
-static const char short_spc698[] = "**request_invalid_kind %d %d";
-static const char long_spc698[]  = "The supplied request in array element %d was invalid (kind=%d)";
-static const char short_spc699[] = "**rmasize %d";
-static const char long_spc699[]  = "Invalid size argument in RMA call (value is %d)";
-static const char short_spc700[] = "**rmatypenotatomic %D";
-static const char long_spc700[]  = " Datatype (%D) not permitted for atomic operations";
-static const char short_spc701[] = "**root %d";
-static const char long_spc701[]  = "Invalid root (value given was %d)";
-static const char short_spc702[] = "**rsendnomatch %d %d";
-static const char long_spc702[]  = "Ready send from source %d and with tag %d had no matching receive";
-static const char short_spc703[] = "**sem_destroy %s";
-static const char long_spc703[]  = "sem_destroy() failed %s";
-static const char short_spc704[] = "**sem_init %s";
-static const char long_spc704[]  = "sem_init() failed %s";
-static const char short_spc705[] = "**sem_post %s";
-static const char long_spc705[]  = "sem_post() failed %s";
-static const char short_spc706[] = "**sem_wait %s";
-static const char long_spc706[]  = "sem_wait() failed %s";
-static const char short_spc707[] = "**set_thread_affinity %d";
-static const char long_spc707[]  = "Failed to set the async thread affinity to the logical processor [%d]";
-static const char short_spc708[] = "**signal %s";
-static const char long_spc708[]  = "signal() failed: %s";
-static const char short_spc709[] = "**snprintf %d";
-static const char long_spc709[]  = "snprintf returned %d";
-static const char short_spc710[] = "**sock_accept %s";
-static const char long_spc710[]  = "accept of socket fd failed - %s";
-static const char short_spc711[] = "**sock_connect %d %s";
-static const char long_spc711[]  = "connect failed - %s (errno %d)";
-static const char short_spc712[] = "**sock_create %s %d";
-static const char long_spc712[]  = "unable to create a socket, %s (errno %d)";
-static const char short_spc713[] = "**sock_gethost %s %d";
-static const char long_spc713[]  = "gethostname failed, %s (errno %d)";
-static const char short_spc714[] = "**sock|badiovn %d %d %d";
-static const char long_spc714[]  = "size of iov is invalid (set=%d,sock=%d,iov_n=%d)";
-static const char short_spc715[] = "**sock|badlen %d %d %d %d";
-static const char long_spc715[]  = "bad length parameter(s) (set=%d,sock=%d,min=%d,max=%d)";
-static const char short_spc716[] = "**sock|badport %d";
-static const char long_spc716[]  = "port number is out of range (sock=%d)";
-static const char short_spc717[] = "**sock|closing %d %d";
-static const char long_spc717[]  = "sock is in the process of being closed locally (set=%d,sock=%d)";
-static const char short_spc718[] = "**sock|closing_already %d %d";
-static const char long_spc718[]  = "a close operation is already post (set=%d,sock=%d)";
-static const char short_spc719[] = "**sock|connclosed %d %d";
-static const char long_spc719[]  = "connection closed by peer (set=%d,sock=%d)";
-static const char short_spc720[] = "**sock|listener_bad_sock %d %d";
-static const char long_spc720[]  = "supplied sock is not a listener (set=%d,sock=%d)";
-static const char short_spc721[] = "**sock|listener_bad_state %d %d %d";
-static const char long_spc721[]  = "supplied listener sock is in a bad state (set=%d,sock=%d,state=%d)";
-static const char short_spc722[] = "**sock|listener_read %d %d";
-static const char long_spc722[]  = "read operation not allowed on a listener (set=%d,sock=%d)";
-static const char short_spc723[] = "**sock|listener_write %d %d";
-static const char long_spc723[]  = "write operation not allowed on a listener (set=%d,sock=%d)";
-static const char short_spc724[] = "**sock|notconnected %d %d";
-static const char long_spc724[]  = "sock is not connected (set=%d,sock=%d)";
-static const char short_spc725[] = "**sock|osnomem %s %d %d";
-static const char long_spc725[]  = "operating system routine %s failed due to lack of memory (set=%d,sock=%d)";
-static const char short_spc726[] = "**sock|poll|accept %d %s";
-static const char long_spc726[]  = "accept failed to acquire a new socket (errno=%d:%s)";
-static const char short_spc727[] = "**sock|poll|badbuf %d %d %d %s";
-static const char long_spc727[]  = "the supplied buffer contains invalid memory (set=%d,sock=%d,errno=%d:%s)";
-static const char short_spc728[] = "**sock|poll|badhandle %d %d %d";
-static const char long_spc728[]  = "sock contains an invalid file descriptor (set=%d,sock=%d,fd=%d)";
-static const char short_spc729[] = "**sock|poll|badhandle %d %d %d %d";
-static const char long_spc729[]  = "sock contains an invalid file descriptor (set=%d,sock=%d,fd=%d:%d)";
-static const char short_spc730[] = "**sock|poll|bind %d %d %s";
-static const char long_spc730[]  = "unable to bind socket to port (port=%d,errno=%d:%s)";
-static const char short_spc731[] = "**sock|poll|connclosed %d %d %d %s";
-static const char long_spc731[]  = "connection closed by peer (set=%d,sock=%d,errno=%d:%s)";
-static const char short_spc732[] = "**sock|poll|connfailed %d %d %d %s";
-static const char long_spc732[]  = "connection failure (set=%d,sock=%d,errno=%d:%s)";
-static const char short_spc733[] = "**sock|poll|connrefused %d %d %s";
-static const char long_spc733[]  = "connection refused (set=%d,sock=%d,host=%s)";
-static const char short_spc734[] = "**sock|poll|eqfail %d %d %d";
-static const char long_spc734[]  = "fatal error: failed to enqueue an event; event was lost (set=%d,sock=%d,op=%d)";
-static const char short_spc735[] = "**sock|poll|listen %d %s";
-static const char long_spc735[]  = "listen() failed (errno=%d:%s)";
-static const char short_spc736[] = "**sock|poll|nodelay %d %s";
-static const char long_spc736[]  = "unable to set TCP no delay attribute on socket (errno=%d:%s)";
-static const char short_spc737[] = "**sock|poll|nonblock %d %s";
-static const char long_spc737[]  = "unable to set socket to nonblocking (errno=%d:%s)";
-static const char short_spc738[] = "**sock|poll|oserror %d %d %d %s";
-static const char long_spc738[]  = "unexpected operating system error (set=%d,sock=%d,errno=%d:%s)";
-static const char short_spc739[] = "**sock|poll|oserror %d %s";
-static const char long_spc739[]  = "unexpected operating system error (errno=%d:%s)";
-static const char short_spc740[] = "**sock|poll|oserror %s %d %d %d %s";
-static const char long_spc740[]  = "unpected operating system error from %s (set=%d,sock=%d,errno=%d:%s)";
-static const char short_spc741[] = "**sock|poll|osnomem %d %d %d %s";
-static const char long_spc741[]  = "operating system routine failed due to lack of memory (set=%d,sock=%d,errno=%d:%s)";
-static const char short_spc742[] = "**sock|poll|pipe %d %s";
-static const char long_spc742[]  = "unable to allocate pipe to wakeup a blocking poll() (errno=%d:%s)";
-static const char short_spc743[] = "**sock|poll|pipenonblock %d %s";
-static const char long_spc743[]  = "unable to set wakeup pipe to nonblocking (errno=%d:%s)";
-static const char short_spc744[] = "**sock|poll|reuseaddr %d %s";
-static const char long_spc744[]  = "unable to set reuseaddr attribute on socket (errno=%d:%s)";
-static const char short_spc745[] = "**sock|poll|setrcvbufsz %d %d %s";
-static const char long_spc745[]  = " unable to set the receive socket buffer size (size=%d,errno=%d:%s)";
-static const char short_spc746[] = "**sock|poll|setsndbufsz %d %d %s";
-static const char long_spc746[]  = " unable to set the send socket buffer size (size=%d,errno=%d:%s)";
-static const char short_spc747[] = "**sock|poll|socket %d %s";
-static const char long_spc747[]  = "unable to obtain new socket (errno=%d:%s)";
-static const char short_spc748[] = "**sock|poll|unhandledstate %d";
-static const char long_spc748[]  = "encountered an unexpected state (%d)";
-static const char short_spc749[] = "**sock|poll|unhandledtype %d";
-static const char long_spc749[]  = "encountered an unexpected sock type (%d)";
-static const char short_spc750[] = "**sock|reads %d %d";
-static const char long_spc750[]  = "attempt to perform multiple simultaneous reads (set=%d,sock=%d)";
-static const char short_spc751[] = "**sock|writes %d %d";
-static const char long_spc751[]  = "attempt to perform multiple simultaneous writes (set=%d,sock=%d)";
-static const char short_spc752[] = "**splittype %d";
-static const char long_spc752[]  = "Invalid split_type argument (%d)";
-static const char short_spc753[] = "**storageorder %d";
-static const char long_spc753[]  = " Invalid storage order (%d)";
-static const char short_spc754[] = "**stride %d %d %d";
-static const char long_spc754[]  = "Range (start = %d, end = %d, stride = %d) does not terminate";
-static const char short_spc755[] = "**tag %d";
-static const char long_spc755[]  = "Invalid tag, value is %d";
-static const char short_spc756[] = "**thread_level %d";
-static const char long_spc756[]  = " Invalid thread level (%d)";
-static const char short_spc757[] = "**too_big_for_input %s";
-static const char long_spc757[]  = "The input argument %s is too big to fit for internal routines";
-static const char short_spc758[] = "**toomanycomm %d %d %d";
-static const char long_spc758[]  = "Too many communicators (%d/%d free on this process; ignore_id=%d)";
-static const char short_spc759[] = "**toomanycommfrag %d %d %d";
-static const char long_spc759[]  = " Cannot allocate context ID because of fragmentation (%d/%d free on this process; ignore_id=%d)";
-static const char short_spc760[] = "**topotoolarge %d %d";
-static const char long_spc760[]  = "Topology size %d is larger than communicator size (%d)";
-static const char short_spc761[] = "**treetype %d";
-static const char long_spc761[]  = " Invalid tree type (%d) used for initializing Tree algorithms";
-static const char short_spc762[] = "**truncate %d %d";
-static const char long_spc762[]  = "Message truncated; %d bytes received but buffer size is %d";
-static const char short_spc763[] = "**truncate %d %d %d %d";
-static const char long_spc763[]  = "Message from rank %d and tag %d truncated; %d bytes received but buffer size is %d";
-static const char short_spc764[] = "**typeinitbadmem %d";
-static const char long_spc764[]  = "%dth builtin datatype handle references invalid memory";
-static const char short_spc765[] = "**typematchsize %s %d";
-static const char long_spc765[]  = "No MPI datatype available for typeclass %s and size %d";
-static const char short_spc766[] = "**ucx_nm_rq_error %s %d %s %s";
-static const char long_spc766[]  = " returned failed request in UCX netmod(%s %d %s %s)";
-static const char short_spc767[] = "**ucx_nm_status %s %d %s %s";
-static const char long_spc767[]  = " ucx function returned with failed status(%s %d %s %s)";
-static const char short_spc768[] = "**unknowngpid %d %d";
-static const char long_spc768[]  = "Internal MPI error: Unknown gpid (%d)%d";
-static const char short_spc769[] = "**usercancel %d";
-static const char long_spc769[]  = "user request cancel function returned error code %d";
-static const char short_spc770[] = "**usercopy %d";
-static const char long_spc770[]  = "user copy function returned error code %d";
-static const char short_spc771[] = "**userdel %d";
-static const char long_spc771[]  = "user delete function returned error code %d";
-static const char short_spc772[] = "**userfree %d";
-static const char long_spc772[]  = "user request free function returned error code %d";
-static const char short_spc773[] = "**userquery %d";
-static const char long_spc773[]  = "user request query function returned error code %d";
-static const char short_spc774[] = "**windows_mutex %s";
-static const char long_spc774[]  = "Windows mutex routine failed (%s)";
-static const char short_spc775[] = "**winflavor %s";
-static const char long_spc775[]  = " Window flavor is not compatible with the given operation (expected %s)";
-static const char short_spc776[] = "**write %s";
-static const char long_spc776[]  = "write to socket failed - %s";
-static const char short_spc777[] = "**writev %s";
-static const char long_spc777[]  = "writev to socket failed - %s";
+static const char short_spc40[] = "**cvar_val %s %s";
+static const char long_spc40[]  = "Invalid %s value (%s)";
+static const char short_spc41[] = "**darrayblock %d";
+static const char long_spc41[]  = "Value of m in block(m) distribution is %d must must be positive";
+static const char short_spc42[] = "**darrayblock2 %d %d";
+static const char long_spc42[]  = "m * nprocs is %d but must equal the array size %d and is not valid for block(m) distribution";
+static const char short_spc43[] = "**darraycyclic %d";
+static const char long_spc43[]  = "Value of m is %d but must be positive for a cyclic(m) distribution";
+static const char short_spc44[] = "**datarepused %s";
+static const char long_spc44[]  = "The requested datarep name %s has already been specified to MPI_REGISTER_DATAREP";
+static const char short_spc45[] = "**dev|pg_not_found %p";
+static const char long_spc45[]  = "the specified process group object could not be located (pg=%p)";
+static const char short_spc46[] = "**dev|vcrt_create %s";
+static const char long_spc46[]  = "failed to create VCRT for %s";
+static const char short_spc47[] = "**dimsmany %d %d";
+static const char long_spc47[]  = "Number of dimensions %d is too large (maximum is %d)";
+static const char short_spc48[] = "**dispunit %d";
+static const char long_spc48[]  = "disp_unit argument is not positive integer (value is %d)";
+static const char short_spc49[] = "**dtypenull %s";
+static const char long_spc49[]  = "Datatype for argument %s is a null datatype";
+static const char short_spc50[] = "**dupprocesses %d";
+static const char long_spc50[]  = "Local and remote groups in MPI_Intercomm_create must not contain the same processes; both contain process %d";
+static const char short_spc51[] = "**edgeoutrange %d %d %d";
+static const char long_spc51[]  = "Edge index edges[%d] is %d but must be nonnegative and less than %d";
+static const char short_spc52[] = "**envvarparse %s";
+static const char long_spc52[]  = "Unable to parse environment variable (%s)";
+static const char short_spc53[] = "**exceeded_connect_tries %d";
+static const char long_spc53[]  = "Unable to establish connection to rank %d";
+static const char short_spc54[] = "**f90typecomplexnone %d %d";
+static const char long_spc54[]  = " No complex type with both %d digits of precision and an exponent range of %d is available";
+static const char short_spc55[] = "**f90typeintnone %d";
+static const char long_spc55[]  = " No integer type with %d digits of range is available";
+static const char short_spc56[] = "**f90typerealnone %d %d";
+static const char long_spc56[]  = " No real type with both %d digits of precision and an exponent range of %d is available";
+static const char short_spc57[] = "**fail %s %d";
+static const char long_spc57[]  = "%s (errno %d)";
+static const char short_spc58[] = "**fileaccess %s";
+static const char long_spc58[]  = "Access denied to file %s";
+static const char short_spc59[] = "**filename %s";
+static const char long_spc59[]  = "Invalid file name %s";
+static const char short_spc60[] = "**filenamedir %s";
+static const char long_spc60[]  = "Invalid or missing directory %s";
+static const char short_spc61[] = "**filenamelong %s %d";
+static const char long_spc61[]  = "Pathname %s too long (%d characters)";
+static const char short_spc62[] = "**filenoexist %s";
+static const char long_spc62[]  = "File %s does not exist";
+static const char short_spc63[] = "**flag %d";
+static const char long_spc63[]  = "invalid flag parameter (flag = %d)";
+static const char short_spc64[] = "**gethostbyname %s %d";
+static const char long_spc64[]  = "gethostbyname failed, %s (errno %d)";
+static const char short_spc65[] = "**getsockname %s";
+static const char long_spc65[]  = "getsockname failed - %s";
+static const char short_spc66[] = "**groupnotincomm %d";
+static const char long_spc66[]  = "Rank %d of the specified group is not a member of this communicator";
+static const char short_spc67[] = "**hcoll_wrong_arg %p %d";
+static const char long_spc67[]  = "Error in hcolrte api: wrong null argument (ec_h.handle = %p, ec_h.rank = %d)";
+static const char short_spc68[] = "**iface_notfound %s";
+static const char long_spc68[]  = "The network interface, \"%s\", specified in MPIR_CVAR_CH3_NETWORK_IFACE was not found.";
+static const char short_spc69[] = "**indexneg %d %d";
+static const char long_spc69[]  = "Index value for index[%d] is %d but must be nonnegative";
+static const char short_spc70[] = "**indexnonmonotone %d %d %d";
+static const char long_spc70[]  = "Index values in graph topology must be monotone nondecreasing but index[%d] is %d but the next index value is %d";
+static const char short_spc71[] = "**infonkey %d %d";
+static const char long_spc71[]  = "Requested key %d but this MPI_Info only has %d keys";
+static const char short_spc72[] = "**infonokey %s";
+static const char long_spc72[]  = "MPI_Info key %s is not defined ";
+static const char short_spc73[] = "**infonoteq %s";
+static const char long_spc73[]  = "MPI_Info value with key %s is not consistent for all processes";
+static const char short_spc74[] = "**intern %s";
+static const char long_spc74[]  = "Internal MPI error!  %s";
+static const char short_spc75[] = "**invalid_handle %d";
+static const char long_spc75[]  = "invalid handle (%d)";
+static const char short_spc76[] = "**invalid_netmod %s";
+static const char long_spc76[]  = "Invalid netmod specified (%s)";
+static const char short_spc77[] = "**invalid_refcount %d";
+static const char long_spc77[]  = "invalid reference count (%d)";
+static const char short_spc78[] = "**invalidmembind %d";
+static const char long_spc78[]  = " cannot bind memory to object (%d). A memory object id was expected but a non-memory object id was passed instead";
+static const char short_spc79[] = "**invalidpkt %d";
+static const char long_spc79[]  = " Invalid packet type (%d)";
+static const char short_spc80[] = "**io %s";
+static const char long_spc80[]  = "Other I/O error %s";
+static const char short_spc81[] = "**join_portname %s %s";
+static const char long_spc81[]  = "local %s, remote %s";
+static const char short_spc82[] = "**join_recv %d";
+static const char long_spc82[]  = "recv from the socket failed (errno %d)";
+static const char short_spc83[] = "**join_send %d";
+static const char long_spc83[]  = "send on the socket failed (errno %d)";
+static const char short_spc84[] = "**keyvalobj %s";
+static const char long_spc84[]  = "Keyval was not defined for %s objects";
+static const char short_spc85[] = "**listen %s %d";
+static const char long_spc85[]  = "listen failed, %s (errno %d)";
+static const char short_spc86[] = "**locktype %d";
+static const char long_spc86[]  = "Invalid locktype argument (%d)";
+static const char short_spc87[] = "**memcpyalias %p %p %L";
+static const char long_spc87[]  = "memcpy arguments alias each other, dst=%p src=%p len=%L";
+static const char short_spc88[] = "**mpi_abort %C %d";
+static const char long_spc88[]  = "MPI_Abort(%C, errorcode=%d) failed";
+static const char short_spc89[] = "**mpi_accumulate %p %d %D %d %L %d %D %O %W";
+static const char long_spc89[]  = "MPI_Accumulate(origin_addr=%p, origin_count=%d, %D, target_rank=%d, target_disp=%L, target_count=%d, %D, %O, %W) failed";
+static const char short_spc90[] = "**mpi_accumulate_c %p %c %D %d %L %c %D %O %W";
+static const char long_spc90[]  = "MPI_Accumulate_c(origin_addr=%p, origin_count=%c, %D, target_rank=%d, target_disp=%L, target_count=%c, %D, %O, %W) failed";
+static const char short_spc91[] = "**mpi_add_error_class %p";
+static const char long_spc91[]  = "MPI_Add_error_class(errorclass=%p) failed";
+static const char short_spc92[] = "**mpi_add_error_code %d %p";
+static const char long_spc92[]  = "MPI_Add_error_code(errorclass=%d, errorcode=%p) failed";
+static const char short_spc93[] = "**mpi_add_error_string %d %s";
+static const char long_spc93[]  = "MPI_Add_error_string(errorcode=%d, string=%s) failed";
+static const char short_spc94[] = "**mpi_allgather %p %d %D %p %d %D %C";
+static const char long_spc94[]  = "MPI_Allgather(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcount=%d, %D, %C) failed";
+static const char short_spc95[] = "**mpi_allgather_c %p %c %D %p %c %D %C";
+static const char long_spc95[]  = "MPI_Allgather_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcount=%c, %D, %C) failed";
+static const char short_spc96[] = "**mpi_allgather_init %p %d %D %p %d %D %C %I %p";
+static const char long_spc96[]  = "MPI_Allgather_init(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcount=%d, %D, %C, %I, request=%p) failed";
+static const char short_spc97[] = "**mpi_allgather_init_c %p %c %D %p %c %D %C %I %p";
+static const char long_spc97[]  = "MPI_Allgather_init_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcount=%c, %D, %C, %I, request=%p) failed";
+static const char short_spc98[] = "**mpi_allgatherv %p %d %D %p %p %p %D %C";
+static const char long_spc98[]  = "MPI_Allgatherv(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcounts=%p, displs=%p, %D, %C) failed";
+static const char short_spc99[] = "**mpi_allgatherv_c %p %c %D %p %p %p %D %C";
+static const char long_spc99[]  = "MPI_Allgatherv_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcounts=%p, displs=%p, %D, %C) failed";
+static const char short_spc100[] = "**mpi_allgatherv_init %p %d %D %p %p %p %D %C %I %p";
+static const char long_spc100[]  = "MPI_Allgatherv_init(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcounts=%p, displs=%p, %D, %C, %I, request=%p) failed";
+static const char short_spc101[] = "**mpi_allgatherv_init_c %p %c %D %p %p %p %D %C %I %p";
+static const char long_spc101[]  = "MPI_Allgatherv_init_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcounts=%p, displs=%p, %D, %C, %I, request=%p) failed";
+static const char short_spc102[] = "**mpi_alloc_mem %L %I %p";
+static const char long_spc102[]  = "MPI_Alloc_mem(size=%L, %I, baseptr=%p) failed";
+static const char short_spc103[] = "**mpi_allreduce %p %p %d %D %O %C";
+static const char long_spc103[]  = "MPI_Allreduce(sendbuf=%p, recvbuf=%p, count=%d, %D, %O, %C) failed";
+static const char short_spc104[] = "**mpi_allreduce_c %p %p %c %D %O %C";
+static const char long_spc104[]  = "MPI_Allreduce_c(sendbuf=%p, recvbuf=%p, count=%c, %D, %O, %C) failed";
+static const char short_spc105[] = "**mpi_allreduce_init %p %p %d %D %O %C %I %p";
+static const char long_spc105[]  = "MPI_Allreduce_init(sendbuf=%p, recvbuf=%p, count=%d, %D, %O, %C, %I, request=%p) failed";
+static const char short_spc106[] = "**mpi_allreduce_init_c %p %p %c %D %O %C %I %p";
+static const char long_spc106[]  = "MPI_Allreduce_init_c(sendbuf=%p, recvbuf=%p, count=%c, %D, %O, %C, %I, request=%p) failed";
+static const char short_spc107[] = "**mpi_alltoall %p %d %D %p %d %D %C";
+static const char long_spc107[]  = "MPI_Alltoall(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcount=%d, %D, %C) failed";
+static const char short_spc108[] = "**mpi_alltoall_c %p %c %D %p %c %D %C";
+static const char long_spc108[]  = "MPI_Alltoall_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcount=%c, %D, %C) failed";
+static const char short_spc109[] = "**mpi_alltoall_init %p %d %D %p %d %D %C %I %p";
+static const char long_spc109[]  = "MPI_Alltoall_init(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcount=%d, %D, %C, %I, request=%p) failed";
+static const char short_spc110[] = "**mpi_alltoall_init_c %p %c %D %p %c %D %C %I %p";
+static const char long_spc110[]  = "MPI_Alltoall_init_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcount=%c, %D, %C, %I, request=%p) failed";
+static const char short_spc111[] = "**mpi_alltoallv %p %p %p %D %p %p %p %D %C";
+static const char long_spc111[]  = "MPI_Alltoallv(sendbuf=%p, sendcounts=%p, sdispls=%p, %D, recvbuf=%p, recvcounts=%p, rdispls=%p, %D, %C) failed";
+static const char short_spc112[] = "**mpi_alltoallv_c %p %p %p %D %p %p %p %D %C";
+static const char long_spc112[]  = "MPI_Alltoallv_c(sendbuf=%p, sendcounts=%p, sdispls=%p, %D, recvbuf=%p, recvcounts=%p, rdispls=%p, %D, %C) failed";
+static const char short_spc113[] = "**mpi_alltoallv_init %p %p %p %D %p %p %p %D %C %I %p";
+static const char long_spc113[]  = "MPI_Alltoallv_init(sendbuf=%p, sendcounts=%p, sdispls=%p, %D, recvbuf=%p, recvcounts=%p, rdispls=%p, %D, %C, %I, request=%p) failed";
+static const char short_spc114[] = "**mpi_alltoallv_init_c %p %p %p %D %p %p %p %D %C %I %p";
+static const char long_spc114[]  = "MPI_Alltoallv_init_c(sendbuf=%p, sendcounts=%p, sdispls=%p, %D, recvbuf=%p, recvcounts=%p, rdispls=%p, %D, %C, %I, request=%p) failed";
+static const char short_spc115[] = "**mpi_alltoallw %p %p %p %p %p %p %p %p %C";
+static const char long_spc115[]  = "MPI_Alltoallw(sendbuf=%p, sendcounts=%p, sdispls=%p, sendtypes=%p, recvbuf=%p, recvcounts=%p, rdispls=%p, recvtypes=%p, %C) failed";
+static const char short_spc116[] = "**mpi_alltoallw_c %p %p %p %p %p %p %p %p %C";
+static const char long_spc116[]  = "MPI_Alltoallw_c(sendbuf=%p, sendcounts=%p, sdispls=%p, sendtypes=%p, recvbuf=%p, recvcounts=%p, rdispls=%p, recvtypes=%p, %C) failed";
+static const char short_spc117[] = "**mpi_alltoallw_init %p %p %p %p %p %p %p %p %C %I %p";
+static const char long_spc117[]  = "MPI_Alltoallw_init(sendbuf=%p, sendcounts=%p, sdispls=%p, sendtypes=%p, recvbuf=%p, recvcounts=%p, rdispls=%p, recvtypes=%p, %C, %I, request=%p) failed";
+static const char short_spc118[] = "**mpi_alltoallw_init_c %p %p %p %p %p %p %p %p %C %I %p";
+static const char long_spc118[]  = "MPI_Alltoallw_init_c(sendbuf=%p, sendcounts=%p, sdispls=%p, sendtypes=%p, recvbuf=%p, recvcounts=%p, rdispls=%p, recvtypes=%p, %C, %I, request=%p) failed";
+static const char short_spc119[] = "**mpi_barrier %C";
+static const char long_spc119[]  = "MPI_Barrier(%C) failed";
+static const char short_spc120[] = "**mpi_barrier_init %C %I %p";
+static const char long_spc120[]  = "MPI_Barrier_init(%C, %I, request=%p) failed";
+static const char short_spc121[] = "**mpi_bcast %p %d %D %i %C";
+static const char long_spc121[]  = "MPI_Bcast(buffer=%p, count=%d, %D, %i, %C) failed";
+static const char short_spc122[] = "**mpi_bcast_c %p %c %D %i %C";
+static const char long_spc122[]  = "MPI_Bcast_c(buffer=%p, count=%c, %D, %i, %C) failed";
+static const char short_spc123[] = "**mpi_bcast_init %p %d %D %i %C %I %p";
+static const char long_spc123[]  = "MPI_Bcast_init(buffer=%p, count=%d, %D, %i, %C, %I, request=%p) failed";
+static const char short_spc124[] = "**mpi_bcast_init_c %p %c %D %i %C %I %p";
+static const char long_spc124[]  = "MPI_Bcast_init_c(buffer=%p, count=%c, %D, %i, %C, %I, request=%p) failed";
+static const char short_spc125[] = "**mpi_bsend %p %d %D %i %t %C";
+static const char long_spc125[]  = "MPI_Bsend(buf=%p, count=%d, %D, %i, %t, %C) failed";
+static const char short_spc126[] = "**mpi_bsend_c %p %c %D %i %t %C";
+static const char long_spc126[]  = "MPI_Bsend_c(buf=%p, count=%c, %D, %i, %t, %C) failed";
+static const char short_spc127[] = "**mpi_bsend_init %p %d %D %i %t %C %p";
+static const char long_spc127[]  = "MPI_Bsend_init(buf=%p, count=%d, %D, %i, %t, %C, request=%p) failed";
+static const char short_spc128[] = "**mpi_bsend_init_c %p %c %D %i %t %C %p";
+static const char long_spc128[]  = "MPI_Bsend_init_c(buf=%p, count=%c, %D, %i, %t, %C, request=%p) failed";
+static const char short_spc129[] = "**mpi_buffer_attach %p %d";
+static const char long_spc129[]  = "MPI_Buffer_attach(buffer=%p, size=%d) failed";
+static const char short_spc130[] = "**mpi_buffer_attach_c %p %c";
+static const char long_spc130[]  = "MPI_Buffer_attach_c(buffer=%p, size=%c) failed";
+static const char short_spc131[] = "**mpi_buffer_detach %p %p";
+static const char long_spc131[]  = "MPI_Buffer_detach(buffer_addr=%p, size=%p) failed";
+static const char short_spc132[] = "**mpi_buffer_detach_c %p %p";
+static const char long_spc132[]  = "MPI_Buffer_detach_c(buffer_addr=%p, size=%p) failed";
+static const char short_spc133[] = "**mpi_cancel %p";
+static const char long_spc133[]  = "MPI_Cancel(request=%p) failed";
+static const char short_spc134[] = "**mpi_cart_coords %C %i %d %p";
+static const char long_spc134[]  = "MPI_Cart_coords(%C, %i, maxdims=%d, coords=%p) failed";
+static const char short_spc135[] = "**mpi_cart_create %C %d %p %p %d %p";
+static const char long_spc135[]  = "MPI_Cart_create(%C, ndims=%d, dims=%p, periods=%p, reorder=%d, comm_cart=%p) failed";
+static const char short_spc136[] = "**mpi_cart_get %C %d %p %p %p";
+static const char long_spc136[]  = "MPI_Cart_get(%C, maxdims=%d, dims=%p, periods=%p, coords=%p) failed";
+static const char short_spc137[] = "**mpi_cart_map %C %d %p %p %p";
+static const char long_spc137[]  = "MPI_Cart_map(%C, ndims=%d, dims=%p, periods=%p, newrank=%p) failed";
+static const char short_spc138[] = "**mpi_cart_rank %C %p %p";
+static const char long_spc138[]  = "MPI_Cart_rank(%C, coords=%p, rank=%p) failed";
+static const char short_spc139[] = "**mpi_cart_shift %C %d %d %p %p";
+static const char long_spc139[]  = "MPI_Cart_shift(%C, direction=%d, disp=%d, rank_source=%p, rank_dest=%p) failed";
+static const char short_spc140[] = "**mpi_cart_sub %C %p %p";
+static const char long_spc140[]  = "MPI_Cart_sub(%C, remain_dims=%p, newcomm=%p) failed";
+static const char short_spc141[] = "**mpi_cartdim_get %C %p";
+static const char long_spc141[]  = "MPI_Cartdim_get(%C, ndims=%p) failed";
+static const char short_spc142[] = "**mpi_close_port %s";
+static const char long_spc142[]  = "MPI_Close_port(port_name=%s) failed";
+static const char short_spc143[] = "**mpi_comm_accept %s %I %i %C %p";
+static const char long_spc143[]  = "MPI_Comm_accept(port_name=%s, %I, %i, %C, newcomm=%p) failed";
+static const char short_spc144[] = "**mpi_comm_call_errhandler %C %d";
+static const char long_spc144[]  = "MPI_Comm_call_errhandler(%C, errorcode=%d) failed";
+static const char short_spc145[] = "**mpi_comm_compare %C %C %p";
+static const char long_spc145[]  = "MPI_Comm_compare(%C, %C, result=%p) failed";
+static const char short_spc146[] = "**mpi_comm_connect %s %I %i %C %p";
+static const char long_spc146[]  = "MPI_Comm_connect(port_name=%s, %I, %i, %C, newcomm=%p) failed";
+static const char short_spc147[] = "**mpi_comm_create %C %G %p";
+static const char long_spc147[]  = "MPI_Comm_create(%C, %G, newcomm=%p) failed";
+static const char short_spc148[] = "**mpi_comm_create_errhandler %p %p";
+static const char long_spc148[]  = "MPI_Comm_create_errhandler(comm_errhandler_fn=%p, errhandler=%p) failed";
+static const char short_spc149[] = "**mpi_comm_create_from_group %G %s %I %E %p";
+static const char long_spc149[]  = "MPI_Comm_create_from_group(%G, stringtag=%s, %I, %E, newcomm=%p) failed";
+static const char short_spc150[] = "**mpi_comm_create_group %C %G %t %p";
+static const char long_spc150[]  = "MPI_Comm_create_group(%C, %G, %t, newcomm=%p) failed";
+static const char short_spc151[] = "**mpi_comm_create_keyval %p %p %p %p";
+static const char long_spc151[]  = "MPI_Comm_create_keyval(comm_copy_attr_fn=%p, comm_delete_attr_fn=%p, comm_keyval=%p, extra_state=%p) failed";
+static const char short_spc152[] = "**mpi_comm_delete_attr %C %K";
+static const char long_spc152[]  = "MPI_Comm_delete_attr(%C, %K) failed";
+static const char short_spc153[] = "**mpi_comm_disconnect %p";
+static const char long_spc153[]  = "MPI_Comm_disconnect(comm=%p) failed";
+static const char short_spc154[] = "**mpi_comm_dup %C %p";
+static const char long_spc154[]  = "MPI_Comm_dup(%C, newcomm=%p) failed";
+static const char short_spc155[] = "**mpi_comm_dup_with_info %C %I %p";
+static const char long_spc155[]  = "MPI_Comm_dup_with_info(%C, %I, newcomm=%p) failed";
+static const char short_spc156[] = "**mpi_comm_free %p";
+static const char long_spc156[]  = "MPI_Comm_free(comm=%p) failed";
+static const char short_spc157[] = "**mpi_comm_free_keyval %p";
+static const char long_spc157[]  = "MPI_Comm_free_keyval(comm_keyval=%p) failed";
+static const char short_spc158[] = "**mpi_comm_get_attr %C %K %p %p";
+static const char long_spc158[]  = "MPI_Comm_get_attr(%C, %K, attribute_val=%p, flag=%p) failed";
+static const char short_spc159[] = "**mpi_comm_get_errhandler %C %p";
+static const char long_spc159[]  = "MPI_Comm_get_errhandler(%C, errhandler=%p) failed";
+static const char short_spc160[] = "**mpi_comm_get_info %C %p";
+static const char long_spc160[]  = "MPI_Comm_get_info(%C, info_used=%p) failed";
+static const char short_spc161[] = "**mpi_comm_get_name %C %p %p";
+static const char long_spc161[]  = "MPI_Comm_get_name(%C, comm_name=%p, resultlen=%p) failed";
+static const char short_spc162[] = "**mpi_comm_get_parent %p";
+static const char long_spc162[]  = "MPI_Comm_get_parent(parent=%p) failed";
+static const char short_spc163[] = "**mpi_comm_group %C %p";
+static const char long_spc163[]  = "MPI_Comm_group(%C, group=%p) failed";
+static const char short_spc164[] = "**mpi_comm_idup %C %p %p";
+static const char long_spc164[]  = "MPI_Comm_idup(%C, newcomm=%p, request=%p) failed";
+static const char short_spc165[] = "**mpi_comm_idup_with_info %C %I %p %p";
+static const char long_spc165[]  = "MPI_Comm_idup_with_info(%C, %I, newcomm=%p, request=%p) failed";
+static const char short_spc166[] = "**mpi_comm_join %d %p";
+static const char long_spc166[]  = "MPI_Comm_join(fd=%d, intercomm=%p) failed";
+static const char short_spc167[] = "**mpi_comm_rank %C %p";
+static const char long_spc167[]  = "MPI_Comm_rank(%C, rank=%p) failed";
+static const char short_spc168[] = "**mpi_comm_remote_group %C %p";
+static const char long_spc168[]  = "MPI_Comm_remote_group(%C, group=%p) failed";
+static const char short_spc169[] = "**mpi_comm_remote_size %C %p";
+static const char long_spc169[]  = "MPI_Comm_remote_size(%C, size=%p) failed";
+static const char short_spc170[] = "**mpi_comm_set_attr %C %K %p";
+static const char long_spc170[]  = "MPI_Comm_set_attr(%C, %K, attribute_val=%p) failed";
+static const char short_spc171[] = "**mpi_comm_set_errhandler %C %E";
+static const char long_spc171[]  = "MPI_Comm_set_errhandler(%C, %E) failed";
+static const char short_spc172[] = "**mpi_comm_set_info %C %I";
+static const char long_spc172[]  = "MPI_Comm_set_info(%C, %I) failed";
+static const char short_spc173[] = "**mpi_comm_set_name %C %s";
+static const char long_spc173[]  = "MPI_Comm_set_name(%C, comm_name=%s) failed";
+static const char short_spc174[] = "**mpi_comm_size %C %p";
+static const char long_spc174[]  = "MPI_Comm_size(%C, size=%p) failed";
+static const char short_spc175[] = "**mpi_comm_spawn %s %p %d %I %i %C %p %p";
+static const char long_spc175[]  = "MPI_Comm_spawn(command=%s, argv=%p, maxprocs=%d, %I, %i, %C, intercomm=%p, array_of_errcodes=%p) failed";
+static const char short_spc176[] = "**mpi_comm_spawn_multiple %d %p %p %p %p %i %C %p %p";
+static const char long_spc176[]  = "MPI_Comm_spawn_multiple(count=%d, array_of_commands=%p, array_of_argv=%p, array_of_maxprocs=%p, array_of_info=%p, %i, %C, intercomm=%p, array_of_errcodes=%p) failed";
+static const char short_spc177[] = "**mpi_comm_split %C %d %d %p";
+static const char long_spc177[]  = "MPI_Comm_split(%C, color=%d, key=%d, newcomm=%p) failed";
+static const char short_spc178[] = "**mpi_comm_split_type %C %d %d %I %p";
+static const char long_spc178[]  = "MPI_Comm_split_type(%C, split_type=%d, key=%d, %I, newcomm=%p) failed";
+static const char short_spc179[] = "**mpi_comm_test_inter %C %p";
+static const char long_spc179[]  = "MPI_Comm_test_inter(%C, flag=%p) failed";
+static const char short_spc180[] = "**mpi_compare_and_swap %p %p %p %D %d %L %W";
+static const char long_spc180[]  = "MPI_Compare_and_swap(origin_addr=%p, compare_addr=%p, result_addr=%p, %D, target_rank=%d, target_disp=%L, %W) failed";
+static const char short_spc181[] = "**mpi_dims_create %d %d %p";
+static const char long_spc181[]  = "MPI_Dims_create(nnodes=%d, ndims=%d, dims=%p) failed";
+static const char short_spc182[] = "**mpi_dist_graph_create %C %d %p %p %p %p %I %d %p";
+static const char long_spc182[]  = "MPI_Dist_graph_create(%C, n=%d, sources=%p, degrees=%p, destinations=%p, weights=%p, %I, reorder=%d, comm_dist_graph=%p) failed";
+static const char short_spc183[] = "**mpi_dist_graph_create_adjacent %C %d %p %p %d %p %p %I %d %p";
+static const char long_spc183[]  = "MPI_Dist_graph_create_adjacent(%C, indegree=%d, sources=%p, sourceweights=%p, outdegree=%d, destinations=%p, destweights=%p, %I, reorder=%d, comm_dist_graph=%p) failed";
+static const char short_spc184[] = "**mpi_dist_graph_neighbors %C %d %p %p %d %p %p";
+static const char long_spc184[]  = "MPI_Dist_graph_neighbors(%C, maxindegree=%d, sources=%p, sourceweights=%p, maxoutdegree=%d, destinations=%p, destweights=%p) failed";
+static const char short_spc185[] = "**mpi_dist_graph_neighbors_count %C %p %p %p";
+static const char long_spc185[]  = "MPI_Dist_graph_neighbors_count(%C, indegree=%p, outdegree=%p, weighted=%p) failed";
+static const char short_spc186[] = "**mpi_errhandler_free %p";
+static const char long_spc186[]  = "MPI_Errhandler_free(errhandler=%p) failed";
+static const char short_spc187[] = "**mpi_error_class %d %p";
+static const char long_spc187[]  = "MPI_Error_class(errorcode=%d, errorclass=%p) failed";
+static const char short_spc188[] = "**mpi_error_string %d %p %p";
+static const char long_spc188[]  = "MPI_Error_string(errorcode=%d, string=%p, resultlen=%p) failed";
+static const char short_spc189[] = "**mpi_exscan %p %p %d %D %O %C";
+static const char long_spc189[]  = "MPI_Exscan(sendbuf=%p, recvbuf=%p, count=%d, %D, %O, %C) failed";
+static const char short_spc190[] = "**mpi_exscan_c %p %p %c %D %O %C";
+static const char long_spc190[]  = "MPI_Exscan_c(sendbuf=%p, recvbuf=%p, count=%c, %D, %O, %C) failed";
+static const char short_spc191[] = "**mpi_exscan_init %p %p %d %D %O %C %I %p";
+static const char long_spc191[]  = "MPI_Exscan_init(sendbuf=%p, recvbuf=%p, count=%d, %D, %O, %C, %I, request=%p) failed";
+static const char short_spc192[] = "**mpi_exscan_init_c %p %p %c %D %O %C %I %p";
+static const char long_spc192[]  = "MPI_Exscan_init_c(sendbuf=%p, recvbuf=%p, count=%c, %D, %O, %C, %I, request=%p) failed";
+static const char short_spc193[] = "**mpi_fetch_and_op %p %p %D %d %L %O %W";
+static const char long_spc193[]  = "MPI_Fetch_and_op(origin_addr=%p, result_addr=%p, %D, target_rank=%d, target_disp=%L, %O, %W) failed";
+static const char short_spc194[] = "**mpi_file_call_errhandler %F %d";
+static const char long_spc194[]  = "MPI_File_call_errhandler(%F, errorcode=%d) failed";
+static const char short_spc195[] = "**mpi_file_create_errhandler %p %p";
+static const char long_spc195[]  = "MPI_File_create_errhandler(file_errhandler_fn=%p, errhandler=%p) failed";
+static const char short_spc196[] = "**mpi_file_get_errhandler %F %p";
+static const char long_spc196[]  = "MPI_File_get_errhandler(%F, errhandler=%p) failed";
+static const char short_spc197[] = "**mpi_file_set_errhandler %F %E";
+static const char long_spc197[]  = "MPI_File_set_errhandler(%F, %E) failed";
+static const char short_spc198[] = "**mpi_finalized %p";
+static const char long_spc198[]  = "MPI_Finalized(flag=%p) failed";
+static const char short_spc199[] = "**mpi_free_mem %p";
+static const char long_spc199[]  = "MPI_Free_mem(base=%p) failed";
+static const char short_spc200[] = "**mpi_gather %p %d %D %p %d %D %i %C";
+static const char long_spc200[]  = "MPI_Gather(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcount=%d, %D, %i, %C) failed";
+static const char short_spc201[] = "**mpi_gather_c %p %c %D %p %c %D %i %C";
+static const char long_spc201[]  = "MPI_Gather_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcount=%c, %D, %i, %C) failed";
+static const char short_spc202[] = "**mpi_gather_init %p %d %D %p %d %D %i %C %I %p";
+static const char long_spc202[]  = "MPI_Gather_init(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcount=%d, %D, %i, %C, %I, request=%p) failed";
+static const char short_spc203[] = "**mpi_gather_init_c %p %c %D %p %c %D %i %C %I %p";
+static const char long_spc203[]  = "MPI_Gather_init_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcount=%c, %D, %i, %C, %I, request=%p) failed";
+static const char short_spc204[] = "**mpi_gatherv %p %d %D %p %p %p %D %i %C";
+static const char long_spc204[]  = "MPI_Gatherv(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcounts=%p, displs=%p, %D, %i, %C) failed";
+static const char short_spc205[] = "**mpi_gatherv_c %p %c %D %p %p %p %D %i %C";
+static const char long_spc205[]  = "MPI_Gatherv_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcounts=%p, displs=%p, %D, %i, %C) failed";
+static const char short_spc206[] = "**mpi_gatherv_init %p %d %D %p %p %p %D %i %C %I %p";
+static const char long_spc206[]  = "MPI_Gatherv_init(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcounts=%p, displs=%p, %D, %i, %C, %I, request=%p) failed";
+static const char short_spc207[] = "**mpi_gatherv_init_c %p %c %D %p %p %p %D %i %C %I %p";
+static const char long_spc207[]  = "MPI_Gatherv_init_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcounts=%p, displs=%p, %D, %i, %C, %I, request=%p) failed";
+static const char short_spc208[] = "**mpi_get %p %d %D %d %L %d %D %W";
+static const char long_spc208[]  = "MPI_Get(origin_addr=%p, origin_count=%d, %D, target_rank=%d, target_disp=%L, target_count=%d, %D, %W) failed";
+static const char short_spc209[] = "**mpi_get_accumulate %p %d %D %p %d %D %d %L %d %D %O %W";
+static const char long_spc209[]  = "MPI_Get_accumulate(origin_addr=%p, origin_count=%d, %D, result_addr=%p, result_count=%d, %D, target_rank=%d, target_disp=%L, target_count=%d, %D, %O, %W) failed";
+static const char short_spc210[] = "**mpi_get_accumulate_c %p %c %D %p %c %D %d %L %c %D %O %W";
+static const char long_spc210[]  = "MPI_Get_accumulate_c(origin_addr=%p, origin_count=%c, %D, result_addr=%p, result_count=%c, %D, target_rank=%d, target_disp=%L, target_count=%c, %D, %O, %W) failed";
+static const char short_spc211[] = "**mpi_get_address %p %p";
+static const char long_spc211[]  = "MPI_Get_address(location=%p, address=%p) failed";
+static const char short_spc212[] = "**mpi_get_c %p %c %D %d %L %c %D %W";
+static const char long_spc212[]  = "MPI_Get_c(origin_addr=%p, origin_count=%c, %D, target_rank=%d, target_disp=%L, target_count=%c, %D, %W) failed";
+static const char short_spc213[] = "**mpi_get_count %p %D %p";
+static const char long_spc213[]  = "MPI_Get_count(status=%p, %D, count=%p) failed";
+static const char short_spc214[] = "**mpi_get_count_c %p %D %p";
+static const char long_spc214[]  = "MPI_Get_count_c(status=%p, %D, count=%p) failed";
+static const char short_spc215[] = "**mpi_get_elements %p %D %p";
+static const char long_spc215[]  = "MPI_Get_elements(status=%p, %D, count=%p) failed";
+static const char short_spc216[] = "**mpi_get_elements_c %p %D %p";
+static const char long_spc216[]  = "MPI_Get_elements_c(status=%p, %D, count=%p) failed";
+static const char short_spc217[] = "**mpi_get_elements_x %p %D %p";
+static const char long_spc217[]  = "MPI_Get_elements_x(status=%p, %D, count=%p) failed";
+static const char short_spc218[] = "**mpi_get_library_version %p %p";
+static const char long_spc218[]  = "MPI_Get_library_version(version=%p, resultlen=%p) failed";
+static const char short_spc219[] = "**mpi_get_processor_name %p %p";
+static const char long_spc219[]  = "MPI_Get_processor_name(name=%p, resultlen=%p) failed";
+static const char short_spc220[] = "**mpi_get_version %p %p";
+static const char long_spc220[]  = "MPI_Get_version(version=%p, subversion=%p) failed";
+static const char short_spc221[] = "**mpi_graph_create %C %d %p %p %d %p";
+static const char long_spc221[]  = "MPI_Graph_create(%C, nnodes=%d, indx=%p, edges=%p, reorder=%d, comm_graph=%p) failed";
+static const char short_spc222[] = "**mpi_graph_get %C %d %d %p %p";
+static const char long_spc222[]  = "MPI_Graph_get(%C, maxindex=%d, maxedges=%d, indx=%p, edges=%p) failed";
+static const char short_spc223[] = "**mpi_graph_map %C %d %p %p %p";
+static const char long_spc223[]  = "MPI_Graph_map(%C, nnodes=%d, indx=%p, edges=%p, newrank=%p) failed";
+static const char short_spc224[] = "**mpi_graph_neighbors %C %i %d %p";
+static const char long_spc224[]  = "MPI_Graph_neighbors(%C, %i, maxneighbors=%d, neighbors=%p) failed";
+static const char short_spc225[] = "**mpi_graph_neighbors_count %C %i %p";
+static const char long_spc225[]  = "MPI_Graph_neighbors_count(%C, %i, nneighbors=%p) failed";
+static const char short_spc226[] = "**mpi_graphdims_get %C %p %p";
+static const char long_spc226[]  = "MPI_Graphdims_get(%C, nnodes=%p, nedges=%p) failed";
+static const char short_spc227[] = "**mpi_grequest_complete %R";
+static const char long_spc227[]  = "MPI_Grequest_complete(%R) failed";
+static const char short_spc228[] = "**mpi_grequest_start %p %p %p %p %p";
+static const char long_spc228[]  = "MPI_Grequest_start(query_fn=%p, free_fn=%p, cancel_fn=%p, extra_state=%p, request=%p) failed";
+static const char short_spc229[] = "**mpi_group_compare %G %G %p";
+static const char long_spc229[]  = "MPI_Group_compare(%G, %G, result=%p) failed";
+static const char short_spc230[] = "**mpi_group_difference %G %G %p";
+static const char long_spc230[]  = "MPI_Group_difference(%G, %G, newgroup=%p) failed";
+static const char short_spc231[] = "**mpi_group_excl %G %d %p %p";
+static const char long_spc231[]  = "MPI_Group_excl(%G, n=%d, ranks=%p, newgroup=%p) failed";
+static const char short_spc232[] = "**mpi_group_free %p";
+static const char long_spc232[]  = "MPI_Group_free(group=%p) failed";
+static const char short_spc233[] = "**mpi_group_from_session_pset %S %s %p";
+static const char long_spc233[]  = "MPI_Group_from_session_pset(%S, pset_name=%s, newgroup=%p) failed";
+static const char short_spc234[] = "**mpi_group_incl %G %d %p %p";
+static const char long_spc234[]  = "MPI_Group_incl(%G, n=%d, ranks=%p, newgroup=%p) failed";
+static const char short_spc235[] = "**mpi_group_intersection %G %G %p";
+static const char long_spc235[]  = "MPI_Group_intersection(%G, %G, newgroup=%p) failed";
+static const char short_spc236[] = "**mpi_group_range_excl %G %d %p %p";
+static const char long_spc236[]  = "MPI_Group_range_excl(%G, n=%d, ranges=%p, newgroup=%p) failed";
+static const char short_spc237[] = "**mpi_group_range_incl %G %d %p %p";
+static const char long_spc237[]  = "MPI_Group_range_incl(%G, n=%d, ranges=%p, newgroup=%p) failed";
+static const char short_spc238[] = "**mpi_group_rank %G %p";
+static const char long_spc238[]  = "MPI_Group_rank(%G, rank=%p) failed";
+static const char short_spc239[] = "**mpi_group_size %G %p";
+static const char long_spc239[]  = "MPI_Group_size(%G, size=%p) failed";
+static const char short_spc240[] = "**mpi_group_translate_ranks %G %d %p %G %p";
+static const char long_spc240[]  = "MPI_Group_translate_ranks(%G, n=%d, ranks1=%p, %G, ranks2=%p) failed";
+static const char short_spc241[] = "**mpi_group_union %G %G %p";
+static const char long_spc241[]  = "MPI_Group_union(%G, %G, newgroup=%p) failed";
+static const char short_spc242[] = "**mpi_iallgather %p %d %D %p %d %D %C %p";
+static const char long_spc242[]  = "MPI_Iallgather(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcount=%d, %D, %C, request=%p) failed";
+static const char short_spc243[] = "**mpi_iallgather_c %p %c %D %p %c %D %C %p";
+static const char long_spc243[]  = "MPI_Iallgather_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcount=%c, %D, %C, request=%p) failed";
+static const char short_spc244[] = "**mpi_iallgatherv %p %d %D %p %p %p %D %C %p";
+static const char long_spc244[]  = "MPI_Iallgatherv(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcounts=%p, displs=%p, %D, %C, request=%p) failed";
+static const char short_spc245[] = "**mpi_iallgatherv_c %p %c %D %p %p %p %D %C %p";
+static const char long_spc245[]  = "MPI_Iallgatherv_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcounts=%p, displs=%p, %D, %C, request=%p) failed";
+static const char short_spc246[] = "**mpi_iallreduce %p %p %d %D %O %C %p";
+static const char long_spc246[]  = "MPI_Iallreduce(sendbuf=%p, recvbuf=%p, count=%d, %D, %O, %C, request=%p) failed";
+static const char short_spc247[] = "**mpi_iallreduce_c %p %p %c %D %O %C %p";
+static const char long_spc247[]  = "MPI_Iallreduce_c(sendbuf=%p, recvbuf=%p, count=%c, %D, %O, %C, request=%p) failed";
+static const char short_spc248[] = "**mpi_ialltoall %p %d %D %p %d %D %C %p";
+static const char long_spc248[]  = "MPI_Ialltoall(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcount=%d, %D, %C, request=%p) failed";
+static const char short_spc249[] = "**mpi_ialltoall_c %p %c %D %p %c %D %C %p";
+static const char long_spc249[]  = "MPI_Ialltoall_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcount=%c, %D, %C, request=%p) failed";
+static const char short_spc250[] = "**mpi_ialltoallv %p %p %p %D %p %p %p %D %C %p";
+static const char long_spc250[]  = "MPI_Ialltoallv(sendbuf=%p, sendcounts=%p, sdispls=%p, %D, recvbuf=%p, recvcounts=%p, rdispls=%p, %D, %C, request=%p) failed";
+static const char short_spc251[] = "**mpi_ialltoallv_c %p %p %p %D %p %p %p %D %C %p";
+static const char long_spc251[]  = "MPI_Ialltoallv_c(sendbuf=%p, sendcounts=%p, sdispls=%p, %D, recvbuf=%p, recvcounts=%p, rdispls=%p, %D, %C, request=%p) failed";
+static const char short_spc252[] = "**mpi_ialltoallw %p %p %p %p %p %p %p %p %C %p";
+static const char long_spc252[]  = "MPI_Ialltoallw(sendbuf=%p, sendcounts=%p, sdispls=%p, sendtypes=%p, recvbuf=%p, recvcounts=%p, rdispls=%p, recvtypes=%p, %C, request=%p) failed";
+static const char short_spc253[] = "**mpi_ialltoallw_c %p %p %p %p %p %p %p %p %C %p";
+static const char long_spc253[]  = "MPI_Ialltoallw_c(sendbuf=%p, sendcounts=%p, sdispls=%p, sendtypes=%p, recvbuf=%p, recvcounts=%p, rdispls=%p, recvtypes=%p, %C, request=%p) failed";
+static const char short_spc254[] = "**mpi_ibarrier %C %p";
+static const char long_spc254[]  = "MPI_Ibarrier(%C, request=%p) failed";
+static const char short_spc255[] = "**mpi_ibcast %p %d %D %i %C %p";
+static const char long_spc255[]  = "MPI_Ibcast(buffer=%p, count=%d, %D, %i, %C, request=%p) failed";
+static const char short_spc256[] = "**mpi_ibcast_c %p %c %D %i %C %p";
+static const char long_spc256[]  = "MPI_Ibcast_c(buffer=%p, count=%c, %D, %i, %C, request=%p) failed";
+static const char short_spc257[] = "**mpi_ibsend %p %d %D %i %t %C %p";
+static const char long_spc257[]  = "MPI_Ibsend(buf=%p, count=%d, %D, %i, %t, %C, request=%p) failed";
+static const char short_spc258[] = "**mpi_ibsend_c %p %c %D %i %t %C %p";
+static const char long_spc258[]  = "MPI_Ibsend_c(buf=%p, count=%c, %D, %i, %t, %C, request=%p) failed";
+static const char short_spc259[] = "**mpi_iexscan %p %p %d %D %O %C %p";
+static const char long_spc259[]  = "MPI_Iexscan(sendbuf=%p, recvbuf=%p, count=%d, %D, %O, %C, request=%p) failed";
+static const char short_spc260[] = "**mpi_iexscan_c %p %p %c %D %O %C %p";
+static const char long_spc260[]  = "MPI_Iexscan_c(sendbuf=%p, recvbuf=%p, count=%c, %D, %O, %C, request=%p) failed";
+static const char short_spc261[] = "**mpi_igather %p %d %D %p %d %D %i %C %p";
+static const char long_spc261[]  = "MPI_Igather(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcount=%d, %D, %i, %C, request=%p) failed";
+static const char short_spc262[] = "**mpi_igather_c %p %c %D %p %c %D %i %C %p";
+static const char long_spc262[]  = "MPI_Igather_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcount=%c, %D, %i, %C, request=%p) failed";
+static const char short_spc263[] = "**mpi_igatherv %p %d %D %p %p %p %D %i %C %p";
+static const char long_spc263[]  = "MPI_Igatherv(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcounts=%p, displs=%p, %D, %i, %C, request=%p) failed";
+static const char short_spc264[] = "**mpi_igatherv_c %p %c %D %p %p %p %D %i %C %p";
+static const char long_spc264[]  = "MPI_Igatherv_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcounts=%p, displs=%p, %D, %i, %C, request=%p) failed";
+static const char short_spc265[] = "**mpi_improbe %i %t %C %p %p %p";
+static const char long_spc265[]  = "MPI_Improbe(%i, %t, %C, flag=%p, message=%p, status=%p) failed";
+static const char short_spc266[] = "**mpi_imrecv %p %d %D %p %p";
+static const char long_spc266[]  = "MPI_Imrecv(buf=%p, count=%d, %D, message=%p, request=%p) failed";
+static const char short_spc267[] = "**mpi_imrecv_c %p %c %D %p %p";
+static const char long_spc267[]  = "MPI_Imrecv_c(buf=%p, count=%c, %D, message=%p, request=%p) failed";
+static const char short_spc268[] = "**mpi_ineighbor_allgather %p %d %D %p %d %D %C %p";
+static const char long_spc268[]  = "MPI_Ineighbor_allgather(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcount=%d, %D, %C, request=%p) failed";
+static const char short_spc269[] = "**mpi_ineighbor_allgather_c %p %c %D %p %c %D %C %p";
+static const char long_spc269[]  = "MPI_Ineighbor_allgather_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcount=%c, %D, %C, request=%p) failed";
+static const char short_spc270[] = "**mpi_ineighbor_allgatherv %p %d %D %p %p %p %D %C %p";
+static const char long_spc270[]  = "MPI_Ineighbor_allgatherv(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcounts=%p, displs=%p, %D, %C, request=%p) failed";
+static const char short_spc271[] = "**mpi_ineighbor_allgatherv_c %p %c %D %p %p %p %D %C %p";
+static const char long_spc271[]  = "MPI_Ineighbor_allgatherv_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcounts=%p, displs=%p, %D, %C, request=%p) failed";
+static const char short_spc272[] = "**mpi_ineighbor_alltoall %p %d %D %p %d %D %C %p";
+static const char long_spc272[]  = "MPI_Ineighbor_alltoall(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcount=%d, %D, %C, request=%p) failed";
+static const char short_spc273[] = "**mpi_ineighbor_alltoall_c %p %c %D %p %c %D %C %p";
+static const char long_spc273[]  = "MPI_Ineighbor_alltoall_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcount=%c, %D, %C, request=%p) failed";
+static const char short_spc274[] = "**mpi_ineighbor_alltoallv %p %p %p %D %p %p %p %D %C %p";
+static const char long_spc274[]  = "MPI_Ineighbor_alltoallv(sendbuf=%p, sendcounts=%p, sdispls=%p, %D, recvbuf=%p, recvcounts=%p, rdispls=%p, %D, %C, request=%p) failed";
+static const char short_spc275[] = "**mpi_ineighbor_alltoallv_c %p %p %p %D %p %p %p %D %C %p";
+static const char long_spc275[]  = "MPI_Ineighbor_alltoallv_c(sendbuf=%p, sendcounts=%p, sdispls=%p, %D, recvbuf=%p, recvcounts=%p, rdispls=%p, %D, %C, request=%p) failed";
+static const char short_spc276[] = "**mpi_ineighbor_alltoallw %p %p %p %p %p %p %p %p %C %p";
+static const char long_spc276[]  = "MPI_Ineighbor_alltoallw(sendbuf=%p, sendcounts=%p, sdispls=%p, sendtypes=%p, recvbuf=%p, recvcounts=%p, rdispls=%p, recvtypes=%p, %C, request=%p) failed";
+static const char short_spc277[] = "**mpi_ineighbor_alltoallw_c %p %p %p %p %p %p %p %p %C %p";
+static const char long_spc277[]  = "MPI_Ineighbor_alltoallw_c(sendbuf=%p, sendcounts=%p, sdispls=%p, sendtypes=%p, recvbuf=%p, recvcounts=%p, rdispls=%p, recvtypes=%p, %C, request=%p) failed";
+static const char short_spc278[] = "**mpi_info_create %p";
+static const char long_spc278[]  = "MPI_Info_create(info=%p) failed";
+static const char short_spc279[] = "**mpi_info_create_env %p %p %p";
+static const char long_spc279[]  = "MPI_Info_create_env(argc=%p, argv=%p, info=%p) failed";
+static const char short_spc280[] = "**mpi_info_delete %I %s";
+static const char long_spc280[]  = "MPI_Info_delete(%I, key=%s) failed";
+static const char short_spc281[] = "**mpi_info_dup %I %p";
+static const char long_spc281[]  = "MPI_Info_dup(%I, newinfo=%p) failed";
+static const char short_spc282[] = "**mpi_info_free %p";
+static const char long_spc282[]  = "MPI_Info_free(info=%p) failed";
+static const char short_spc283[] = "**mpi_info_get %I %s %d %p %p";
+static const char long_spc283[]  = "MPI_Info_get(%I, key=%s, valuelen=%d, value=%p, flag=%p) failed";
+static const char short_spc284[] = "**mpi_info_get_nkeys %I %p";
+static const char long_spc284[]  = "MPI_Info_get_nkeys(%I, nkeys=%p) failed";
+static const char short_spc285[] = "**mpi_info_get_nthkey %I %d %p";
+static const char long_spc285[]  = "MPI_Info_get_nthkey(%I, n=%d, key=%p) failed";
+static const char short_spc286[] = "**mpi_info_get_string %I %s %p %p %p";
+static const char long_spc286[]  = "MPI_Info_get_string(%I, key=%s, buflen=%p, value=%p, flag=%p) failed";
+static const char short_spc287[] = "**mpi_info_get_valuelen %I %s %p %p";
+static const char long_spc287[]  = "MPI_Info_get_valuelen(%I, key=%s, valuelen=%p, flag=%p) failed";
+static const char short_spc288[] = "**mpi_info_set %I %s %s";
+static const char long_spc288[]  = "MPI_Info_set(%I, key=%s, value=%s) failed";
+static const char short_spc289[] = "**mpi_init %p %p";
+static const char long_spc289[]  = "MPI_Init(argc=%p, argv=%p) failed";
+static const char short_spc290[] = "**mpi_init_thread %p %p %d %p";
+static const char long_spc290[]  = "MPI_Init_thread(argc=%p, argv=%p, required=%d, provided=%p) failed";
+static const char short_spc291[] = "**mpi_initialized %p";
+static const char long_spc291[]  = "MPI_Initialized(flag=%p) failed";
+static const char short_spc292[] = "**mpi_intercomm_create %C %i %C %i %t %p";
+static const char long_spc292[]  = "MPI_Intercomm_create(%C, %i, %C, %i, %t, newintercomm=%p) failed";
+static const char short_spc293[] = "**mpi_intercomm_create_from_groups %G %i %G %i %s %I %E %p";
+static const char long_spc293[]  = "MPI_Intercomm_create_from_groups(%G, %i, %G, %i, stringtag=%s, %I, %E, newintercomm=%p) failed";
+static const char short_spc294[] = "**mpi_intercomm_merge %C %d %p";
+static const char long_spc294[]  = "MPI_Intercomm_merge(%C, high=%d, newintracomm=%p) failed";
+static const char short_spc295[] = "**mpi_iprobe %i %t %C %p %p";
+static const char long_spc295[]  = "MPI_Iprobe(%i, %t, %C, flag=%p, status=%p) failed";
+static const char short_spc296[] = "**mpi_irecv %p %d %D %i %t %C %p";
+static const char long_spc296[]  = "MPI_Irecv(buf=%p, count=%d, %D, %i, %t, %C, request=%p) failed";
+static const char short_spc297[] = "**mpi_irecv_c %p %c %D %i %t %C %p";
+static const char long_spc297[]  = "MPI_Irecv_c(buf=%p, count=%c, %D, %i, %t, %C, request=%p) failed";
+static const char short_spc298[] = "**mpi_ireduce %p %p %d %D %O %i %C %p";
+static const char long_spc298[]  = "MPI_Ireduce(sendbuf=%p, recvbuf=%p, count=%d, %D, %O, %i, %C, request=%p) failed";
+static const char short_spc299[] = "**mpi_ireduce_c %p %p %c %D %O %i %C %p";
+static const char long_spc299[]  = "MPI_Ireduce_c(sendbuf=%p, recvbuf=%p, count=%c, %D, %O, %i, %C, request=%p) failed";
+static const char short_spc300[] = "**mpi_ireduce_scatter %p %p %p %D %O %C %p";
+static const char long_spc300[]  = "MPI_Ireduce_scatter(sendbuf=%p, recvbuf=%p, recvcounts=%p, %D, %O, %C, request=%p) failed";
+static const char short_spc301[] = "**mpi_ireduce_scatter_block %p %p %d %D %O %C %p";
+static const char long_spc301[]  = "MPI_Ireduce_scatter_block(sendbuf=%p, recvbuf=%p, recvcount=%d, %D, %O, %C, request=%p) failed";
+static const char short_spc302[] = "**mpi_ireduce_scatter_block_c %p %p %c %D %O %C %p";
+static const char long_spc302[]  = "MPI_Ireduce_scatter_block_c(sendbuf=%p, recvbuf=%p, recvcount=%c, %D, %O, %C, request=%p) failed";
+static const char short_spc303[] = "**mpi_ireduce_scatter_c %p %p %p %D %O %C %p";
+static const char long_spc303[]  = "MPI_Ireduce_scatter_c(sendbuf=%p, recvbuf=%p, recvcounts=%p, %D, %O, %C, request=%p) failed";
+static const char short_spc304[] = "**mpi_irsend %p %d %D %i %t %C %p";
+static const char long_spc304[]  = "MPI_Irsend(buf=%p, count=%d, %D, %i, %t, %C, request=%p) failed";
+static const char short_spc305[] = "**mpi_irsend_c %p %c %D %i %t %C %p";
+static const char long_spc305[]  = "MPI_Irsend_c(buf=%p, count=%c, %D, %i, %t, %C, request=%p) failed";
+static const char short_spc306[] = "**mpi_is_thread_main %p";
+static const char long_spc306[]  = "MPI_Is_thread_main(flag=%p) failed";
+static const char short_spc307[] = "**mpi_iscan %p %p %d %D %O %C %p";
+static const char long_spc307[]  = "MPI_Iscan(sendbuf=%p, recvbuf=%p, count=%d, %D, %O, %C, request=%p) failed";
+static const char short_spc308[] = "**mpi_iscan_c %p %p %c %D %O %C %p";
+static const char long_spc308[]  = "MPI_Iscan_c(sendbuf=%p, recvbuf=%p, count=%c, %D, %O, %C, request=%p) failed";
+static const char short_spc309[] = "**mpi_iscatter %p %d %D %p %d %D %i %C %p";
+static const char long_spc309[]  = "MPI_Iscatter(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcount=%d, %D, %i, %C, request=%p) failed";
+static const char short_spc310[] = "**mpi_iscatter_c %p %c %D %p %c %D %i %C %p";
+static const char long_spc310[]  = "MPI_Iscatter_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcount=%c, %D, %i, %C, request=%p) failed";
+static const char short_spc311[] = "**mpi_iscatterv %p %p %p %D %p %d %D %i %C %p";
+static const char long_spc311[]  = "MPI_Iscatterv(sendbuf=%p, sendcounts=%p, displs=%p, %D, recvbuf=%p, recvcount=%d, %D, %i, %C, request=%p) failed";
+static const char short_spc312[] = "**mpi_iscatterv_c %p %p %p %D %p %c %D %i %C %p";
+static const char long_spc312[]  = "MPI_Iscatterv_c(sendbuf=%p, sendcounts=%p, displs=%p, %D, recvbuf=%p, recvcount=%c, %D, %i, %C, request=%p) failed";
+static const char short_spc313[] = "**mpi_isend %p %d %D %i %t %C %p";
+static const char long_spc313[]  = "MPI_Isend(buf=%p, count=%d, %D, %i, %t, %C, request=%p) failed";
+static const char short_spc314[] = "**mpi_isend_c %p %c %D %i %t %C %p";
+static const char long_spc314[]  = "MPI_Isend_c(buf=%p, count=%c, %D, %i, %t, %C, request=%p) failed";
+static const char short_spc315[] = "**mpi_isendrecv %p %d %D %i %t %p %d %D %i %t %C %p";
+static const char long_spc315[]  = "MPI_Isendrecv(sendbuf=%p, sendcount=%d, %D, %i, %t, recvbuf=%p, recvcount=%d, %D, %i, %t, %C, request=%p) failed";
+static const char short_spc316[] = "**mpi_isendrecv_c %p %c %D %i %t %p %c %D %i %t %C %p";
+static const char long_spc316[]  = "MPI_Isendrecv_c(sendbuf=%p, sendcount=%c, %D, %i, %t, recvbuf=%p, recvcount=%c, %D, %i, %t, %C, request=%p) failed";
+static const char short_spc317[] = "**mpi_isendrecv_replace %p %d %D %i %t %i %t %C %p";
+static const char long_spc317[]  = "MPI_Isendrecv_replace(buf=%p, count=%d, %D, %i, %t, %i, %t, %C, request=%p) failed";
+static const char short_spc318[] = "**mpi_isendrecv_replace_c %p %c %D %i %t %i %t %C %p";
+static const char long_spc318[]  = "MPI_Isendrecv_replace_c(buf=%p, count=%c, %D, %i, %t, %i, %t, %C, request=%p) failed";
+static const char short_spc319[] = "**mpi_issend %p %d %D %i %t %C %p";
+static const char long_spc319[]  = "MPI_Issend(buf=%p, count=%d, %D, %i, %t, %C, request=%p) failed";
+static const char short_spc320[] = "**mpi_issend_c %p %c %D %i %t %C %p";
+static const char long_spc320[]  = "MPI_Issend_c(buf=%p, count=%c, %D, %i, %t, %C, request=%p) failed";
+static const char short_spc321[] = "**mpi_lookup_name %s %I %p";
+static const char long_spc321[]  = "MPI_Lookup_name(service_name=%s, %I, port_name=%p) failed";
+static const char short_spc322[] = "**mpi_mprobe %i %t %C %p %p";
+static const char long_spc322[]  = "MPI_Mprobe(%i, %t, %C, message=%p, status=%p) failed";
+static const char short_spc323[] = "**mpi_mrecv %p %d %D %p %p";
+static const char long_spc323[]  = "MPI_Mrecv(buf=%p, count=%d, %D, message=%p, status=%p) failed";
+static const char short_spc324[] = "**mpi_mrecv_c %p %c %D %p %p";
+static const char long_spc324[]  = "MPI_Mrecv_c(buf=%p, count=%c, %D, message=%p, status=%p) failed";
+static const char short_spc325[] = "**mpi_neighbor_allgather %p %d %D %p %d %D %C";
+static const char long_spc325[]  = "MPI_Neighbor_allgather(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcount=%d, %D, %C) failed";
+static const char short_spc326[] = "**mpi_neighbor_allgather_c %p %c %D %p %c %D %C";
+static const char long_spc326[]  = "MPI_Neighbor_allgather_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcount=%c, %D, %C) failed";
+static const char short_spc327[] = "**mpi_neighbor_allgather_init %p %d %D %p %d %D %C %I %p";
+static const char long_spc327[]  = "MPI_Neighbor_allgather_init(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcount=%d, %D, %C, %I, request=%p) failed";
+static const char short_spc328[] = "**mpi_neighbor_allgather_init_c %p %c %D %p %c %D %C %I %p";
+static const char long_spc328[]  = "MPI_Neighbor_allgather_init_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcount=%c, %D, %C, %I, request=%p) failed";
+static const char short_spc329[] = "**mpi_neighbor_allgatherv %p %d %D %p %p %p %D %C";
+static const char long_spc329[]  = "MPI_Neighbor_allgatherv(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcounts=%p, displs=%p, %D, %C) failed";
+static const char short_spc330[] = "**mpi_neighbor_allgatherv_c %p %c %D %p %p %p %D %C";
+static const char long_spc330[]  = "MPI_Neighbor_allgatherv_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcounts=%p, displs=%p, %D, %C) failed";
+static const char short_spc331[] = "**mpi_neighbor_allgatherv_init %p %d %D %p %p %p %D %C %I %p";
+static const char long_spc331[]  = "MPI_Neighbor_allgatherv_init(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcounts=%p, displs=%p, %D, %C, %I, request=%p) failed";
+static const char short_spc332[] = "**mpi_neighbor_allgatherv_init_c %p %c %D %p %p %p %D %C %I %p";
+static const char long_spc332[]  = "MPI_Neighbor_allgatherv_init_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcounts=%p, displs=%p, %D, %C, %I, request=%p) failed";
+static const char short_spc333[] = "**mpi_neighbor_alltoall %p %d %D %p %d %D %C";
+static const char long_spc333[]  = "MPI_Neighbor_alltoall(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcount=%d, %D, %C) failed";
+static const char short_spc334[] = "**mpi_neighbor_alltoall_c %p %c %D %p %c %D %C";
+static const char long_spc334[]  = "MPI_Neighbor_alltoall_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcount=%c, %D, %C) failed";
+static const char short_spc335[] = "**mpi_neighbor_alltoall_init %p %d %D %p %d %D %C %I %p";
+static const char long_spc335[]  = "MPI_Neighbor_alltoall_init(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcount=%d, %D, %C, %I, request=%p) failed";
+static const char short_spc336[] = "**mpi_neighbor_alltoall_init_c %p %c %D %p %c %D %C %I %p";
+static const char long_spc336[]  = "MPI_Neighbor_alltoall_init_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcount=%c, %D, %C, %I, request=%p) failed";
+static const char short_spc337[] = "**mpi_neighbor_alltoallv %p %p %p %D %p %p %p %D %C";
+static const char long_spc337[]  = "MPI_Neighbor_alltoallv(sendbuf=%p, sendcounts=%p, sdispls=%p, %D, recvbuf=%p, recvcounts=%p, rdispls=%p, %D, %C) failed";
+static const char short_spc338[] = "**mpi_neighbor_alltoallv_c %p %p %p %D %p %p %p %D %C";
+static const char long_spc338[]  = "MPI_Neighbor_alltoallv_c(sendbuf=%p, sendcounts=%p, sdispls=%p, %D, recvbuf=%p, recvcounts=%p, rdispls=%p, %D, %C) failed";
+static const char short_spc339[] = "**mpi_neighbor_alltoallv_init %p %p %p %D %p %p %p %D %C %I %p";
+static const char long_spc339[]  = "MPI_Neighbor_alltoallv_init(sendbuf=%p, sendcounts=%p, sdispls=%p, %D, recvbuf=%p, recvcounts=%p, rdispls=%p, %D, %C, %I, request=%p) failed";
+static const char short_spc340[] = "**mpi_neighbor_alltoallv_init_c %p %p %p %D %p %p %p %D %C %I %p";
+static const char long_spc340[]  = "MPI_Neighbor_alltoallv_init_c(sendbuf=%p, sendcounts=%p, sdispls=%p, %D, recvbuf=%p, recvcounts=%p, rdispls=%p, %D, %C, %I, request=%p) failed";
+static const char short_spc341[] = "**mpi_neighbor_alltoallw %p %p %p %p %p %p %p %p %C";
+static const char long_spc341[]  = "MPI_Neighbor_alltoallw(sendbuf=%p, sendcounts=%p, sdispls=%p, sendtypes=%p, recvbuf=%p, recvcounts=%p, rdispls=%p, recvtypes=%p, %C) failed";
+static const char short_spc342[] = "**mpi_neighbor_alltoallw_c %p %p %p %p %p %p %p %p %C";
+static const char long_spc342[]  = "MPI_Neighbor_alltoallw_c(sendbuf=%p, sendcounts=%p, sdispls=%p, sendtypes=%p, recvbuf=%p, recvcounts=%p, rdispls=%p, recvtypes=%p, %C) failed";
+static const char short_spc343[] = "**mpi_neighbor_alltoallw_init %p %p %p %p %p %p %p %p %C %I %p";
+static const char long_spc343[]  = "MPI_Neighbor_alltoallw_init(sendbuf=%p, sendcounts=%p, sdispls=%p, sendtypes=%p, recvbuf=%p, recvcounts=%p, rdispls=%p, recvtypes=%p, %C, %I, request=%p) failed";
+static const char short_spc344[] = "**mpi_neighbor_alltoallw_init_c %p %p %p %p %p %p %p %p %C %I %p";
+static const char long_spc344[]  = "MPI_Neighbor_alltoallw_init_c(sendbuf=%p, sendcounts=%p, sdispls=%p, sendtypes=%p, recvbuf=%p, recvcounts=%p, rdispls=%p, recvtypes=%p, %C, %I, request=%p) failed";
+static const char short_spc345[] = "**mpi_op_commutative %O %p";
+static const char long_spc345[]  = "MPI_Op_commutative(%O, commute=%p) failed";
+static const char short_spc346[] = "**mpi_op_create %p %d %p";
+static const char long_spc346[]  = "MPI_Op_create(user_fn=%p, commute=%d, op=%p) failed";
+static const char short_spc347[] = "**mpi_op_create_c %p %d %p";
+static const char long_spc347[]  = "MPI_Op_create_c(user_fn=%p, commute=%d, op=%p) failed";
+static const char short_spc348[] = "**mpi_op_free %p";
+static const char long_spc348[]  = "MPI_Op_free(op=%p) failed";
+static const char short_spc349[] = "**mpi_open_port %I %p";
+static const char long_spc349[]  = "MPI_Open_port(%I, port_name=%p) failed";
+static const char short_spc350[] = "**mpi_pack %p %d %D %p %d %p %C";
+static const char long_spc350[]  = "MPI_Pack(inbuf=%p, incount=%d, %D, outbuf=%p, outsize=%d, position=%p, %C) failed";
+static const char short_spc351[] = "**mpi_pack_c %p %c %D %p %c %p %C";
+static const char long_spc351[]  = "MPI_Pack_c(inbuf=%p, incount=%c, %D, outbuf=%p, outsize=%c, position=%p, %C) failed";
+static const char short_spc352[] = "**mpi_pack_external %s %p %d %D %p %L %p";
+static const char long_spc352[]  = "MPI_Pack_external(datarep=%s, inbuf=%p, incount=%d, %D, outbuf=%p, outsize=%L, position=%p) failed";
+static const char short_spc353[] = "**mpi_pack_external_c %s %p %c %D %p %c %p";
+static const char long_spc353[]  = "MPI_Pack_external_c(datarep=%s, inbuf=%p, incount=%c, %D, outbuf=%p, outsize=%c, position=%p) failed";
+static const char short_spc354[] = "**mpi_pack_external_size %s %d %D %p";
+static const char long_spc354[]  = "MPI_Pack_external_size(datarep=%s, incount=%d, %D, size=%p) failed";
+static const char short_spc355[] = "**mpi_pack_external_size_c %s %c %D %p";
+static const char long_spc355[]  = "MPI_Pack_external_size_c(datarep=%s, incount=%c, %D, size=%p) failed";
+static const char short_spc356[] = "**mpi_pack_size %d %D %C %p";
+static const char long_spc356[]  = "MPI_Pack_size(incount=%d, %D, %C, size=%p) failed";
+static const char short_spc357[] = "**mpi_pack_size_c %c %D %C %p";
+static const char long_spc357[]  = "MPI_Pack_size_c(incount=%c, %D, %C, size=%p) failed";
+static const char short_spc358[] = "**mpi_parrived %R %d %p";
+static const char long_spc358[]  = "MPI_Parrived(%R, partition=%d, flag=%p) failed";
+static const char short_spc359[] = "**mpi_pready %d %R";
+static const char long_spc359[]  = "MPI_Pready(partition=%d, %R) failed";
+static const char short_spc360[] = "**mpi_pready_list %d %p %R";
+static const char long_spc360[]  = "MPI_Pready_list(length=%d, array_of_partitions=%p, %R) failed";
+static const char short_spc361[] = "**mpi_pready_range %d %d %R";
+static const char long_spc361[]  = "MPI_Pready_range(partition_low=%d, partition_high=%d, %R) failed";
+static const char short_spc362[] = "**mpi_precv_init %p %d %c %D %i %t %C %I %p";
+static const char long_spc362[]  = "MPI_Precv_init(buf=%p, partitions=%d, count=%c, %D, %i, %t, %C, %I, request=%p) failed";
+static const char short_spc363[] = "**mpi_probe %i %t %C %p";
+static const char long_spc363[]  = "MPI_Probe(%i, %t, %C, status=%p) failed";
+static const char short_spc364[] = "**mpi_psend_init %p %d %c %D %i %t %C %I %p";
+static const char long_spc364[]  = "MPI_Psend_init(buf=%p, partitions=%d, count=%c, %D, %i, %t, %C, %I, request=%p) failed";
+static const char short_spc365[] = "**mpi_publish_name %s %I %s";
+static const char long_spc365[]  = "MPI_Publish_name(service_name=%s, %I, port_name=%s) failed";
+static const char short_spc366[] = "**mpi_put %p %d %D %d %L %d %D %W";
+static const char long_spc366[]  = "MPI_Put(origin_addr=%p, origin_count=%d, %D, target_rank=%d, target_disp=%L, target_count=%d, %D, %W) failed";
+static const char short_spc367[] = "**mpi_put_c %p %c %D %d %L %c %D %W";
+static const char long_spc367[]  = "MPI_Put_c(origin_addr=%p, origin_count=%c, %D, target_rank=%d, target_disp=%L, target_count=%c, %D, %W) failed";
+static const char short_spc368[] = "**mpi_query_thread %p";
+static const char long_spc368[]  = "MPI_Query_thread(provided=%p) failed";
+static const char short_spc369[] = "**mpi_raccumulate %p %d %D %d %L %d %D %O %W %p";
+static const char long_spc369[]  = "MPI_Raccumulate(origin_addr=%p, origin_count=%d, %D, target_rank=%d, target_disp=%L, target_count=%d, %D, %O, %W, request=%p) failed";
+static const char short_spc370[] = "**mpi_raccumulate_c %p %c %D %d %L %c %D %O %W %p";
+static const char long_spc370[]  = "MPI_Raccumulate_c(origin_addr=%p, origin_count=%c, %D, target_rank=%d, target_disp=%L, target_count=%c, %D, %O, %W, request=%p) failed";
+static const char short_spc371[] = "**mpi_recv %p %d %D %i %t %C %p";
+static const char long_spc371[]  = "MPI_Recv(buf=%p, count=%d, %D, %i, %t, %C, status=%p) failed";
+static const char short_spc372[] = "**mpi_recv_c %p %c %D %i %t %C %p";
+static const char long_spc372[]  = "MPI_Recv_c(buf=%p, count=%c, %D, %i, %t, %C, status=%p) failed";
+static const char short_spc373[] = "**mpi_recv_init %p %d %D %i %t %C %p";
+static const char long_spc373[]  = "MPI_Recv_init(buf=%p, count=%d, %D, %i, %t, %C, request=%p) failed";
+static const char short_spc374[] = "**mpi_recv_init_c %p %c %D %i %t %C %p";
+static const char long_spc374[]  = "MPI_Recv_init_c(buf=%p, count=%c, %D, %i, %t, %C, request=%p) failed";
+static const char short_spc375[] = "**mpi_reduce %p %p %d %D %O %i %C";
+static const char long_spc375[]  = "MPI_Reduce(sendbuf=%p, recvbuf=%p, count=%d, %D, %O, %i, %C) failed";
+static const char short_spc376[] = "**mpi_reduce_c %p %p %c %D %O %i %C";
+static const char long_spc376[]  = "MPI_Reduce_c(sendbuf=%p, recvbuf=%p, count=%c, %D, %O, %i, %C) failed";
+static const char short_spc377[] = "**mpi_reduce_init %p %p %d %D %O %i %C %I %p";
+static const char long_spc377[]  = "MPI_Reduce_init(sendbuf=%p, recvbuf=%p, count=%d, %D, %O, %i, %C, %I, request=%p) failed";
+static const char short_spc378[] = "**mpi_reduce_init_c %p %p %c %D %O %i %C %I %p";
+static const char long_spc378[]  = "MPI_Reduce_init_c(sendbuf=%p, recvbuf=%p, count=%c, %D, %O, %i, %C, %I, request=%p) failed";
+static const char short_spc379[] = "**mpi_reduce_local %p %p %d %D %O";
+static const char long_spc379[]  = "MPI_Reduce_local(inbuf=%p, inoutbuf=%p, count=%d, %D, %O) failed";
+static const char short_spc380[] = "**mpi_reduce_local_c %p %p %c %D %O";
+static const char long_spc380[]  = "MPI_Reduce_local_c(inbuf=%p, inoutbuf=%p, count=%c, %D, %O) failed";
+static const char short_spc381[] = "**mpi_reduce_scatter %p %p %p %D %O %C";
+static const char long_spc381[]  = "MPI_Reduce_scatter(sendbuf=%p, recvbuf=%p, recvcounts=%p, %D, %O, %C) failed";
+static const char short_spc382[] = "**mpi_reduce_scatter_block %p %p %d %D %O %C";
+static const char long_spc382[]  = "MPI_Reduce_scatter_block(sendbuf=%p, recvbuf=%p, recvcount=%d, %D, %O, %C) failed";
+static const char short_spc383[] = "**mpi_reduce_scatter_block_c %p %p %c %D %O %C";
+static const char long_spc383[]  = "MPI_Reduce_scatter_block_c(sendbuf=%p, recvbuf=%p, recvcount=%c, %D, %O, %C) failed";
+static const char short_spc384[] = "**mpi_reduce_scatter_block_init %p %p %d %D %O %C %I %p";
+static const char long_spc384[]  = "MPI_Reduce_scatter_block_init(sendbuf=%p, recvbuf=%p, recvcount=%d, %D, %O, %C, %I, request=%p) failed";
+static const char short_spc385[] = "**mpi_reduce_scatter_block_init_c %p %p %c %D %O %C %I %p";
+static const char long_spc385[]  = "MPI_Reduce_scatter_block_init_c(sendbuf=%p, recvbuf=%p, recvcount=%c, %D, %O, %C, %I, request=%p) failed";
+static const char short_spc386[] = "**mpi_reduce_scatter_c %p %p %p %D %O %C";
+static const char long_spc386[]  = "MPI_Reduce_scatter_c(sendbuf=%p, recvbuf=%p, recvcounts=%p, %D, %O, %C) failed";
+static const char short_spc387[] = "**mpi_reduce_scatter_init %p %p %p %D %O %C %I %p";
+static const char long_spc387[]  = "MPI_Reduce_scatter_init(sendbuf=%p, recvbuf=%p, recvcounts=%p, %D, %O, %C, %I, request=%p) failed";
+static const char short_spc388[] = "**mpi_reduce_scatter_init_c %p %p %p %D %O %C %I %p";
+static const char long_spc388[]  = "MPI_Reduce_scatter_init_c(sendbuf=%p, recvbuf=%p, recvcounts=%p, %D, %O, %C, %I, request=%p) failed";
+static const char short_spc389[] = "**mpi_request_free %p";
+static const char long_spc389[]  = "MPI_Request_free(request=%p) failed";
+static const char short_spc390[] = "**mpi_request_get_status %R %p %p";
+static const char long_spc390[]  = "MPI_Request_get_status(%R, flag=%p, status=%p) failed";
+static const char short_spc391[] = "**mpi_rget %p %d %D %d %L %d %D %W %p";
+static const char long_spc391[]  = "MPI_Rget(origin_addr=%p, origin_count=%d, %D, target_rank=%d, target_disp=%L, target_count=%d, %D, %W, request=%p) failed";
+static const char short_spc392[] = "**mpi_rget_accumulate %p %d %D %p %d %D %d %L %d %D %O %W %p";
+static const char long_spc392[]  = "MPI_Rget_accumulate(origin_addr=%p, origin_count=%d, %D, result_addr=%p, result_count=%d, %D, target_rank=%d, target_disp=%L, target_count=%d, %D, %O, %W, request=%p) failed";
+static const char short_spc393[] = "**mpi_rget_accumulate_c %p %c %D %p %c %D %d %L %c %D %O %W %p";
+static const char long_spc393[]  = "MPI_Rget_accumulate_c(origin_addr=%p, origin_count=%c, %D, result_addr=%p, result_count=%c, %D, target_rank=%d, target_disp=%L, target_count=%c, %D, %O, %W, request=%p) failed";
+static const char short_spc394[] = "**mpi_rget_c %p %c %D %d %L %c %D %W %p";
+static const char long_spc394[]  = "MPI_Rget_c(origin_addr=%p, origin_count=%c, %D, target_rank=%d, target_disp=%L, target_count=%c, %D, %W, request=%p) failed";
+static const char short_spc395[] = "**mpi_rput %p %d %D %d %L %d %D %W %p";
+static const char long_spc395[]  = "MPI_Rput(origin_addr=%p, origin_count=%d, %D, target_rank=%d, target_disp=%L, target_count=%d, %D, %W, request=%p) failed";
+static const char short_spc396[] = "**mpi_rput_c %p %c %D %d %L %c %D %W %p";
+static const char long_spc396[]  = "MPI_Rput_c(origin_addr=%p, origin_count=%c, %D, target_rank=%d, target_disp=%L, target_count=%c, %D, %W, request=%p) failed";
+static const char short_spc397[] = "**mpi_rsend %p %d %D %i %t %C";
+static const char long_spc397[]  = "MPI_Rsend(buf=%p, count=%d, %D, %i, %t, %C) failed";
+static const char short_spc398[] = "**mpi_rsend_c %p %c %D %i %t %C";
+static const char long_spc398[]  = "MPI_Rsend_c(buf=%p, count=%c, %D, %i, %t, %C) failed";
+static const char short_spc399[] = "**mpi_rsend_init %p %d %D %i %t %C %p";
+static const char long_spc399[]  = "MPI_Rsend_init(buf=%p, count=%d, %D, %i, %t, %C, request=%p) failed";
+static const char short_spc400[] = "**mpi_rsend_init_c %p %c %D %i %t %C %p";
+static const char long_spc400[]  = "MPI_Rsend_init_c(buf=%p, count=%c, %D, %i, %t, %C, request=%p) failed";
+static const char short_spc401[] = "**mpi_scan %p %p %d %D %O %C";
+static const char long_spc401[]  = "MPI_Scan(sendbuf=%p, recvbuf=%p, count=%d, %D, %O, %C) failed";
+static const char short_spc402[] = "**mpi_scan_c %p %p %c %D %O %C";
+static const char long_spc402[]  = "MPI_Scan_c(sendbuf=%p, recvbuf=%p, count=%c, %D, %O, %C) failed";
+static const char short_spc403[] = "**mpi_scan_init %p %p %d %D %O %C %I %p";
+static const char long_spc403[]  = "MPI_Scan_init(sendbuf=%p, recvbuf=%p, count=%d, %D, %O, %C, %I, request=%p) failed";
+static const char short_spc404[] = "**mpi_scan_init_c %p %p %c %D %O %C %I %p";
+static const char long_spc404[]  = "MPI_Scan_init_c(sendbuf=%p, recvbuf=%p, count=%c, %D, %O, %C, %I, request=%p) failed";
+static const char short_spc405[] = "**mpi_scatter %p %d %D %p %d %D %i %C";
+static const char long_spc405[]  = "MPI_Scatter(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcount=%d, %D, %i, %C) failed";
+static const char short_spc406[] = "**mpi_scatter_c %p %c %D %p %c %D %i %C";
+static const char long_spc406[]  = "MPI_Scatter_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcount=%c, %D, %i, %C) failed";
+static const char short_spc407[] = "**mpi_scatter_init %p %d %D %p %d %D %i %C %I %p";
+static const char long_spc407[]  = "MPI_Scatter_init(sendbuf=%p, sendcount=%d, %D, recvbuf=%p, recvcount=%d, %D, %i, %C, %I, request=%p) failed";
+static const char short_spc408[] = "**mpi_scatter_init_c %p %c %D %p %c %D %i %C %I %p";
+static const char long_spc408[]  = "MPI_Scatter_init_c(sendbuf=%p, sendcount=%c, %D, recvbuf=%p, recvcount=%c, %D, %i, %C, %I, request=%p) failed";
+static const char short_spc409[] = "**mpi_scatterv %p %p %p %D %p %d %D %i %C";
+static const char long_spc409[]  = "MPI_Scatterv(sendbuf=%p, sendcounts=%p, displs=%p, %D, recvbuf=%p, recvcount=%d, %D, %i, %C) failed";
+static const char short_spc410[] = "**mpi_scatterv_c %p %p %p %D %p %c %D %i %C";
+static const char long_spc410[]  = "MPI_Scatterv_c(sendbuf=%p, sendcounts=%p, displs=%p, %D, recvbuf=%p, recvcount=%c, %D, %i, %C) failed";
+static const char short_spc411[] = "**mpi_scatterv_init %p %p %p %D %p %d %D %i %C %I %p";
+static const char long_spc411[]  = "MPI_Scatterv_init(sendbuf=%p, sendcounts=%p, displs=%p, %D, recvbuf=%p, recvcount=%d, %D, %i, %C, %I, request=%p) failed";
+static const char short_spc412[] = "**mpi_scatterv_init_c %p %p %p %D %p %c %D %i %C %I %p";
+static const char long_spc412[]  = "MPI_Scatterv_init_c(sendbuf=%p, sendcounts=%p, displs=%p, %D, recvbuf=%p, recvcount=%c, %D, %i, %C, %I, request=%p) failed";
+static const char short_spc413[] = "**mpi_send %p %d %D %i %t %C";
+static const char long_spc413[]  = "MPI_Send(buf=%p, count=%d, %D, %i, %t, %C) failed";
+static const char short_spc414[] = "**mpi_send_c %p %c %D %i %t %C";
+static const char long_spc414[]  = "MPI_Send_c(buf=%p, count=%c, %D, %i, %t, %C) failed";
+static const char short_spc415[] = "**mpi_send_init %p %d %D %i %t %C %p";
+static const char long_spc415[]  = "MPI_Send_init(buf=%p, count=%d, %D, %i, %t, %C, request=%p) failed";
+static const char short_spc416[] = "**mpi_send_init_c %p %c %D %i %t %C %p";
+static const char long_spc416[]  = "MPI_Send_init_c(buf=%p, count=%c, %D, %i, %t, %C, request=%p) failed";
+static const char short_spc417[] = "**mpi_sendrecv %p %d %D %i %t %p %d %D %i %t %C %p";
+static const char long_spc417[]  = "MPI_Sendrecv(sendbuf=%p, sendcount=%d, %D, %i, %t, recvbuf=%p, recvcount=%d, %D, %i, %t, %C, status=%p) failed";
+static const char short_spc418[] = "**mpi_sendrecv_c %p %c %D %i %t %p %c %D %i %t %C %p";
+static const char long_spc418[]  = "MPI_Sendrecv_c(sendbuf=%p, sendcount=%c, %D, %i, %t, recvbuf=%p, recvcount=%c, %D, %i, %t, %C, status=%p) failed";
+static const char short_spc419[] = "**mpi_sendrecv_replace %p %d %D %i %t %i %t %C %p";
+static const char long_spc419[]  = "MPI_Sendrecv_replace(buf=%p, count=%d, %D, %i, %t, %i, %t, %C, status=%p) failed";
+static const char short_spc420[] = "**mpi_sendrecv_replace_c %p %c %D %i %t %i %t %C %p";
+static const char long_spc420[]  = "MPI_Sendrecv_replace_c(buf=%p, count=%c, %D, %i, %t, %i, %t, %C, status=%p) failed";
+static const char short_spc421[] = "**mpi_session_call_errhandler %S %d";
+static const char long_spc421[]  = "MPI_Session_call_errhandler(%S, errorcode=%d) failed";
+static const char short_spc422[] = "**mpi_session_create_errhandler %p %p";
+static const char long_spc422[]  = "MPI_Session_create_errhandler(session_errhandler_fn=%p, errhandler=%p) failed";
+static const char short_spc423[] = "**mpi_session_finalize %p";
+static const char long_spc423[]  = "MPI_Session_finalize(session=%p) failed";
+static const char short_spc424[] = "**mpi_session_get_errhandler %S %p";
+static const char long_spc424[]  = "MPI_Session_get_errhandler(%S, errhandler=%p) failed";
+static const char short_spc425[] = "**mpi_session_get_info %S %p";
+static const char long_spc425[]  = "MPI_Session_get_info(%S, info_used=%p) failed";
+static const char short_spc426[] = "**mpi_session_get_nth_pset %S %I %d %p %p";
+static const char long_spc426[]  = "MPI_Session_get_nth_pset(%S, %I, n=%d, pset_len=%p, pset_name=%p) failed";
+static const char short_spc427[] = "**mpi_session_get_num_psets %S %I %p";
+static const char long_spc427[]  = "MPI_Session_get_num_psets(%S, %I, npset_names=%p) failed";
+static const char short_spc428[] = "**mpi_session_get_pset_info %S %s %p";
+static const char long_spc428[]  = "MPI_Session_get_pset_info(%S, pset_name=%s, info=%p) failed";
+static const char short_spc429[] = "**mpi_session_init %I %E %p";
+static const char long_spc429[]  = "MPI_Session_init(%I, %E, session=%p) failed";
+static const char short_spc430[] = "**mpi_session_set_errhandler %S %E";
+static const char long_spc430[]  = "MPI_Session_set_errhandler(%S, %E) failed";
+static const char short_spc431[] = "**mpi_ssend %p %d %D %i %t %C";
+static const char long_spc431[]  = "MPI_Ssend(buf=%p, count=%d, %D, %i, %t, %C) failed";
+static const char short_spc432[] = "**mpi_ssend_c %p %c %D %i %t %C";
+static const char long_spc432[]  = "MPI_Ssend_c(buf=%p, count=%c, %D, %i, %t, %C) failed";
+static const char short_spc433[] = "**mpi_ssend_init %p %d %D %i %t %C %p";
+static const char long_spc433[]  = "MPI_Ssend_init(buf=%p, count=%d, %D, %i, %t, %C, request=%p) failed";
+static const char short_spc434[] = "**mpi_ssend_init_c %p %c %D %i %t %C %p";
+static const char long_spc434[]  = "MPI_Ssend_init_c(buf=%p, count=%c, %D, %i, %t, %C, request=%p) failed";
+static const char short_spc435[] = "**mpi_start %p";
+static const char long_spc435[]  = "MPI_Start(request=%p) failed";
+static const char short_spc436[] = "**mpi_startall %d %p";
+static const char long_spc436[]  = "MPI_Startall(count=%d, array_of_requests=%p) failed";
+static const char short_spc437[] = "**mpi_status_set_cancelled %p %d";
+static const char long_spc437[]  = "MPI_Status_set_cancelled(status=%p, flag=%d) failed";
+static const char short_spc438[] = "**mpi_status_set_elements %p %D %d";
+static const char long_spc438[]  = "MPI_Status_set_elements(status=%p, %D, count=%d) failed";
+static const char short_spc439[] = "**mpi_status_set_elements_c %p %D %c";
+static const char long_spc439[]  = "MPI_Status_set_elements_c(status=%p, %D, count=%c) failed";
+static const char short_spc440[] = "**mpi_status_set_elements_x %p %D %c";
+static const char long_spc440[]  = "MPI_Status_set_elements_x(status=%p, %D, count=%c) failed";
+static const char short_spc441[] = "**mpi_test %p %p %p";
+static const char long_spc441[]  = "MPI_Test(request=%p, flag=%p, status=%p) failed";
+static const char short_spc442[] = "**mpi_test_cancelled %p %p";
+static const char long_spc442[]  = "MPI_Test_cancelled(status=%p, flag=%p) failed";
+static const char short_spc443[] = "**mpi_testall %d %p %p %p";
+static const char long_spc443[]  = "MPI_Testall(count=%d, array_of_requests=%p, flag=%p, array_of_statuses=%p) failed";
+static const char short_spc444[] = "**mpi_testany %d %p %p %p %p";
+static const char long_spc444[]  = "MPI_Testany(count=%d, array_of_requests=%p, indx=%p, flag=%p, status=%p) failed";
+static const char short_spc445[] = "**mpi_testsome %d %p %p %p %p";
+static const char long_spc445[]  = "MPI_Testsome(incount=%d, array_of_requests=%p, outcount=%p, array_of_indices=%p, array_of_statuses=%p) failed";
+static const char short_spc446[] = "**mpi_topo_test %C %p";
+static const char long_spc446[]  = "MPI_Topo_test(%C, status=%p) failed";
+static const char short_spc447[] = "**mpi_type_commit %p";
+static const char long_spc447[]  = "MPI_Type_commit(datatype=%p) failed";
+static const char short_spc448[] = "**mpi_type_contiguous %d %D %p";
+static const char long_spc448[]  = "MPI_Type_contiguous(count=%d, %D, newtype=%p) failed";
+static const char short_spc449[] = "**mpi_type_contiguous_c %c %D %p";
+static const char long_spc449[]  = "MPI_Type_contiguous_c(count=%c, %D, newtype=%p) failed";
+static const char short_spc450[] = "**mpi_type_create_darray %d %d %d %p %p %p %p %d %D %p";
+static const char long_spc450[]  = "MPI_Type_create_darray(size=%d, rank=%d, ndims=%d, array_of_gsizes=%p, array_of_distribs=%p, array_of_dargs=%p, array_of_psizes=%p, order=%d, %D, newtype=%p) failed";
+static const char short_spc451[] = "**mpi_type_create_darray_c %d %d %d %p %p %p %p %d %D %p";
+static const char long_spc451[]  = "MPI_Type_create_darray_c(size=%d, rank=%d, ndims=%d, array_of_gsizes=%p, array_of_distribs=%p, array_of_dargs=%p, array_of_psizes=%p, order=%d, %D, newtype=%p) failed";
+static const char short_spc452[] = "**mpi_type_create_f90_complex %d %d";
+static const char long_spc452[]  = "MPI_Type_create_f90_complex (precision=%d, range=%d) failed";
+static const char short_spc453[] = "**mpi_type_create_f90_int %d";
+static const char long_spc453[]  = " MPI_Type_create_f90_int (range=%d) failed";
+static const char short_spc454[] = "**mpi_type_create_f90_real %d %d";
+static const char long_spc454[]  = "MPI_Type_create_f90_real (precision=%d, range=%d) failed";
+static const char short_spc455[] = "**mpi_type_create_hindexed %d %p %p %D %p";
+static const char long_spc455[]  = "MPI_Type_create_hindexed(count=%d, array_of_blocklengths=%p, array_of_displacements=%p, %D, newtype=%p) failed";
+static const char short_spc456[] = "**mpi_type_create_hindexed_block %d %d %p %D %p";
+static const char long_spc456[]  = "MPI_Type_create_hindexed_block(count=%d, blocklength=%d, array_of_displacements=%p, %D, newtype=%p) failed";
+static const char short_spc457[] = "**mpi_type_create_hindexed_block_c %c %c %p %D %p";
+static const char long_spc457[]  = "MPI_Type_create_hindexed_block_c(count=%c, blocklength=%c, array_of_displacements=%p, %D, newtype=%p) failed";
+static const char short_spc458[] = "**mpi_type_create_hindexed_c %c %p %p %D %p";
+static const char long_spc458[]  = "MPI_Type_create_hindexed_c(count=%c, array_of_blocklengths=%p, array_of_displacements=%p, %D, newtype=%p) failed";
+static const char short_spc459[] = "**mpi_type_create_hvector %d %d %L %D %p";
+static const char long_spc459[]  = "MPI_Type_create_hvector(count=%d, blocklength=%d, stride=%L, %D, newtype=%p) failed";
+static const char short_spc460[] = "**mpi_type_create_hvector_c %c %c %c %D %p";
+static const char long_spc460[]  = "MPI_Type_create_hvector_c(count=%c, blocklength=%c, stride=%c, %D, newtype=%p) failed";
+static const char short_spc461[] = "**mpi_type_create_indexed_block %d %d %p %D %p";
+static const char long_spc461[]  = "MPI_Type_create_indexed_block(count=%d, blocklength=%d, array_of_displacements=%p, %D, newtype=%p) failed";
+static const char short_spc462[] = "**mpi_type_create_indexed_block_c %c %c %p %D %p";
+static const char long_spc462[]  = "MPI_Type_create_indexed_block_c(count=%c, blocklength=%c, array_of_displacements=%p, %D, newtype=%p) failed";
+static const char short_spc463[] = "**mpi_type_create_keyval %p %p %p %p";
+static const char long_spc463[]  = "MPI_Type_create_keyval(type_copy_attr_fn=%p, type_delete_attr_fn=%p, type_keyval=%p, extra_state=%p) failed";
+static const char short_spc464[] = "**mpi_type_create_resized %D %L %L %p";
+static const char long_spc464[]  = "MPI_Type_create_resized(%D, lb=%L, extent=%L, newtype=%p) failed";
+static const char short_spc465[] = "**mpi_type_create_resized_c %D %c %c %p";
+static const char long_spc465[]  = "MPI_Type_create_resized_c(%D, lb=%c, extent=%c, newtype=%p) failed";
+static const char short_spc466[] = "**mpi_type_create_struct %d %p %p %p %p";
+static const char long_spc466[]  = "MPI_Type_create_struct(count=%d, array_of_blocklengths=%p, array_of_displacements=%p, array_of_types=%p, newtype=%p) failed";
+static const char short_spc467[] = "**mpi_type_create_struct_c %c %p %p %p %p";
+static const char long_spc467[]  = "MPI_Type_create_struct_c(count=%c, array_of_blocklengths=%p, array_of_displacements=%p, array_of_types=%p, newtype=%p) failed";
+static const char short_spc468[] = "**mpi_type_create_subarray %d %p %p %p %d %D %p";
+static const char long_spc468[]  = "MPI_Type_create_subarray(ndims=%d, array_of_sizes=%p, array_of_subsizes=%p, array_of_starts=%p, order=%d, %D, newtype=%p) failed";
+static const char short_spc469[] = "**mpi_type_create_subarray_c %d %p %p %p %d %D %p";
+static const char long_spc469[]  = "MPI_Type_create_subarray_c(ndims=%d, array_of_sizes=%p, array_of_subsizes=%p, array_of_starts=%p, order=%d, %D, newtype=%p) failed";
+static const char short_spc470[] = "**mpi_type_delete_attr %D %K";
+static const char long_spc470[]  = "MPI_Type_delete_attr(%D, %K) failed";
+static const char short_spc471[] = "**mpi_type_dup %D %p";
+static const char long_spc471[]  = "MPI_Type_dup(%D, newtype=%p) failed";
+static const char short_spc472[] = "**mpi_type_extent %D %p";
+static const char long_spc472[]  = "MPI_Type_extent(%D, extent=%p) failed";
+static const char short_spc473[] = "**mpi_type_free %p";
+static const char long_spc473[]  = "MPI_Type_free(datatype=%p) failed";
+static const char short_spc474[] = "**mpi_type_free_keyval %p";
+static const char long_spc474[]  = "MPI_Type_free_keyval(type_keyval=%p) failed";
+static const char short_spc475[] = "**mpi_type_get_attr %D %K %p %p";
+static const char long_spc475[]  = "MPI_Type_get_attr(%D, %K, attribute_val=%p, flag=%p) failed";
+static const char short_spc476[] = "**mpi_type_get_contents %D %d %d %d %p %p %p";
+static const char long_spc476[]  = "MPI_Type_get_contents(%D, max_integers=%d, max_addresses=%d, max_datatypes=%d, array_of_integers=%p, array_of_addresses=%p, array_of_datatypes=%p) failed";
+static const char short_spc477[] = "**mpi_type_get_contents_c %D %c %c %c %c %p %p %p %p";
+static const char long_spc477[]  = "MPI_Type_get_contents_c(%D, max_integers=%c, max_addresses=%c, max_large_counts=%c, max_datatypes=%c, array_of_integers=%p, array_of_addresses=%p, array_of_large_counts=%p, array_of_datatypes=%p) failed";
+static const char short_spc478[] = "**mpi_type_get_envelope %D %p %p %p %p";
+static const char long_spc478[]  = "MPI_Type_get_envelope(%D, num_integers=%p, num_addresses=%p, num_datatypes=%p, combiner=%p) failed";
+static const char short_spc479[] = "**mpi_type_get_envelope_c %D %p %p %p %p %p";
+static const char long_spc479[]  = "MPI_Type_get_envelope_c(%D, num_integers=%p, num_addresses=%p, num_large_counts=%p, num_datatypes=%p, combiner=%p) failed";
+static const char short_spc480[] = "**mpi_type_get_extent %D %p %p";
+static const char long_spc480[]  = "MPI_Type_get_extent(%D, lb=%p, extent=%p) failed";
+static const char short_spc481[] = "**mpi_type_get_extent_c %D %p %p";
+static const char long_spc481[]  = "MPI_Type_get_extent_c(%D, lb=%p, extent=%p) failed";
+static const char short_spc482[] = "**mpi_type_get_extent_x %D %p %p";
+static const char long_spc482[]  = "MPI_Type_get_extent_x(%D, lb=%p, extent=%p) failed";
+static const char short_spc483[] = "**mpi_type_get_name %D %p %p";
+static const char long_spc483[]  = "MPI_Type_get_name(%D, type_name=%p, resultlen=%p) failed";
+static const char short_spc484[] = "**mpi_type_get_true_extent %D %p %p";
+static const char long_spc484[]  = "MPI_Type_get_true_extent(%D, true_lb=%p, true_extent=%p) failed";
+static const char short_spc485[] = "**mpi_type_get_true_extent_c %D %p %p";
+static const char long_spc485[]  = "MPI_Type_get_true_extent_c(%D, true_lb=%p, true_extent=%p) failed";
+static const char short_spc486[] = "**mpi_type_get_true_extent_x %D %p %p";
+static const char long_spc486[]  = "MPI_Type_get_true_extent_x(%D, true_lb=%p, true_extent=%p) failed";
+static const char short_spc487[] = "**mpi_type_indexed %d %p %p %D %p";
+static const char long_spc487[]  = "MPI_Type_indexed(count=%d, array_of_blocklengths=%p, array_of_displacements=%p, %D, newtype=%p) failed";
+static const char short_spc488[] = "**mpi_type_indexed_c %c %p %p %D %p";
+static const char long_spc488[]  = "MPI_Type_indexed_c(count=%c, array_of_blocklengths=%p, array_of_displacements=%p, %D, newtype=%p) failed";
+static const char short_spc489[] = "**mpi_type_lb %D %p";
+static const char long_spc489[]  = "MPI_Type_lb(%D, displacement=%p) failed";
+static const char short_spc490[] = "**mpi_type_match_size %d %d %p";
+static const char long_spc490[]  = "MPI_Type_match_size(typeclass=%d, size=%d, datatype=%p) failed";
+static const char short_spc491[] = "**mpi_type_set_attr %D %K %p";
+static const char long_spc491[]  = "MPI_Type_set_attr(%D, %K, attribute_val=%p) failed";
+static const char short_spc492[] = "**mpi_type_set_name %D %s";
+static const char long_spc492[]  = "MPI_Type_set_name(%D, type_name=%s) failed";
+static const char short_spc493[] = "**mpi_type_size %D %p";
+static const char long_spc493[]  = "MPI_Type_size(%D, size=%p) failed";
+static const char short_spc494[] = "**mpi_type_size_c %D %p";
+static const char long_spc494[]  = "MPI_Type_size_c(%D, size=%p) failed";
+static const char short_spc495[] = "**mpi_type_size_x %D %p";
+static const char long_spc495[]  = "MPI_Type_size_x(%D, size=%p) failed";
+static const char short_spc496[] = "**mpi_type_ub %D %p";
+static const char long_spc496[]  = "MPI_Type_ub(%D, displacement=%p) failed";
+static const char short_spc497[] = "**mpi_type_vector %d %d %d %D %p";
+static const char long_spc497[]  = "MPI_Type_vector(count=%d, blocklength=%d, stride=%d, %D, newtype=%p) failed";
+static const char short_spc498[] = "**mpi_type_vector_c %c %c %c %D %p";
+static const char long_spc498[]  = "MPI_Type_vector_c(count=%c, blocklength=%c, stride=%c, %D, newtype=%p) failed";
+static const char short_spc499[] = "**mpi_unpack %p %d %p %p %d %D %C";
+static const char long_spc499[]  = "MPI_Unpack(inbuf=%p, insize=%d, position=%p, outbuf=%p, outcount=%d, %D, %C) failed";
+static const char short_spc500[] = "**mpi_unpack_c %p %c %p %p %c %D %C";
+static const char long_spc500[]  = "MPI_Unpack_c(inbuf=%p, insize=%c, position=%p, outbuf=%p, outcount=%c, %D, %C) failed";
+static const char short_spc501[] = "**mpi_unpack_external %s %p %L %p %p %d %D";
+static const char long_spc501[]  = "MPI_Unpack_external(datarep=%s, inbuf=%p, insize=%L, position=%p, outbuf=%p, outcount=%d, %D) failed";
+static const char short_spc502[] = "**mpi_unpack_external_c %s %p %c %p %p %c %D";
+static const char long_spc502[]  = "MPI_Unpack_external_c(datarep=%s, inbuf=%p, insize=%c, position=%p, outbuf=%p, outcount=%c, %D) failed";
+static const char short_spc503[] = "**mpi_unpublish_name %s %I %s";
+static const char long_spc503[]  = "MPI_Unpublish_name(service_name=%s, %I, port_name=%s) failed";
+static const char short_spc504[] = "**mpi_wait %p %p";
+static const char long_spc504[]  = "MPI_Wait(request=%p, status=%p) failed";
+static const char short_spc505[] = "**mpi_waitall %d %p %p";
+static const char long_spc505[]  = "MPI_Waitall(count=%d, array_of_requests=%p, array_of_statuses=%p) failed";
+static const char short_spc506[] = "**mpi_waitany %d %p %p %p";
+static const char long_spc506[]  = "MPI_Waitany(count=%d, array_of_requests=%p, indx=%p, status=%p) failed";
+static const char short_spc507[] = "**mpi_waitsome %d %p %p %p %p";
+static const char long_spc507[]  = "MPI_Waitsome(incount=%d, array_of_requests=%p, outcount=%p, array_of_indices=%p, array_of_statuses=%p) failed";
+static const char short_spc508[] = "**mpi_win_allocate %L %d %I %C %p %p";
+static const char long_spc508[]  = "MPI_Win_allocate(size=%L, disp_unit=%d, %I, %C, baseptr=%p, win=%p) failed";
+static const char short_spc509[] = "**mpi_win_allocate_c %L %L %I %C %p %p";
+static const char long_spc509[]  = "MPI_Win_allocate_c(size=%L, disp_unit=%L, %I, %C, baseptr=%p, win=%p) failed";
+static const char short_spc510[] = "**mpi_win_allocate_shared %L %d %I %C %p %p";
+static const char long_spc510[]  = "MPI_Win_allocate_shared(size=%L, disp_unit=%d, %I, %C, baseptr=%p, win=%p) failed";
+static const char short_spc511[] = "**mpi_win_allocate_shared_c %L %L %I %C %p %p";
+static const char long_spc511[]  = "MPI_Win_allocate_shared_c(size=%L, disp_unit=%L, %I, %C, baseptr=%p, win=%p) failed";
+static const char short_spc512[] = "**mpi_win_attach %W %p %L";
+static const char long_spc512[]  = "MPI_Win_attach(%W, base=%p, size=%L) failed";
+static const char short_spc513[] = "**mpi_win_call_errhandler %W %d";
+static const char long_spc513[]  = "MPI_Win_call_errhandler(%W, errorcode=%d) failed";
+static const char short_spc514[] = "**mpi_win_complete %W";
+static const char long_spc514[]  = "MPI_Win_complete(%W) failed";
+static const char short_spc515[] = "**mpi_win_create %p %L %d %I %C %p";
+static const char long_spc515[]  = "MPI_Win_create(base=%p, size=%L, disp_unit=%d, %I, %C, win=%p) failed";
+static const char short_spc516[] = "**mpi_win_create_c %p %L %L %I %C %p";
+static const char long_spc516[]  = "MPI_Win_create_c(base=%p, size=%L, disp_unit=%L, %I, %C, win=%p) failed";
+static const char short_spc517[] = "**mpi_win_create_dynamic %I %C %p";
+static const char long_spc517[]  = "MPI_Win_create_dynamic(%I, %C, win=%p) failed";
+static const char short_spc518[] = "**mpi_win_create_errhandler %p %p";
+static const char long_spc518[]  = "MPI_Win_create_errhandler(win_errhandler_fn=%p, errhandler=%p) failed";
+static const char short_spc519[] = "**mpi_win_create_keyval %p %p %p %p";
+static const char long_spc519[]  = "MPI_Win_create_keyval(win_copy_attr_fn=%p, win_delete_attr_fn=%p, win_keyval=%p, extra_state=%p) failed";
+static const char short_spc520[] = "**mpi_win_delete_attr %W %K";
+static const char long_spc520[]  = "MPI_Win_delete_attr(%W, %K) failed";
+static const char short_spc521[] = "**mpi_win_detach %W %p";
+static const char long_spc521[]  = "MPI_Win_detach(%W, base=%p) failed";
+static const char short_spc522[] = "**mpi_win_fence %A %W";
+static const char long_spc522[]  = "MPI_Win_fence(%A, %W) failed";
+static const char short_spc523[] = "**mpi_win_flush %d %W";
+static const char long_spc523[]  = "MPI_Win_flush(rank=%d, %W) failed";
+static const char short_spc524[] = "**mpi_win_flush_all %W";
+static const char long_spc524[]  = "MPI_Win_flush_all(%W) failed";
+static const char short_spc525[] = "**mpi_win_flush_local %d %W";
+static const char long_spc525[]  = "MPI_Win_flush_local(rank=%d, %W) failed";
+static const char short_spc526[] = "**mpi_win_flush_local_all %W";
+static const char long_spc526[]  = "MPI_Win_flush_local_all(%W) failed";
+static const char short_spc527[] = "**mpi_win_free %p";
+static const char long_spc527[]  = "MPI_Win_free(win=%p) failed";
+static const char short_spc528[] = "**mpi_win_free_keyval %p";
+static const char long_spc528[]  = "MPI_Win_free_keyval(win_keyval=%p) failed";
+static const char short_spc529[] = "**mpi_win_get_attr %W %K %p %p";
+static const char long_spc529[]  = "MPI_Win_get_attr(%W, %K, attribute_val=%p, flag=%p) failed";
+static const char short_spc530[] = "**mpi_win_get_errhandler %W %p";
+static const char long_spc530[]  = "MPI_Win_get_errhandler(%W, errhandler=%p) failed";
+static const char short_spc531[] = "**mpi_win_get_group %W %p";
+static const char long_spc531[]  = "MPI_Win_get_group(%W, group=%p) failed";
+static const char short_spc532[] = "**mpi_win_get_info %W %p";
+static const char long_spc532[]  = "MPI_Win_get_info(%W, info_used=%p) failed";
+static const char short_spc533[] = "**mpi_win_get_name %W %p %p";
+static const char long_spc533[]  = "MPI_Win_get_name(%W, win_name=%p, resultlen=%p) failed";
+static const char short_spc534[] = "**mpi_win_lock %d %d %A %W";
+static const char long_spc534[]  = "MPI_Win_lock(lock_type=%d, rank=%d, %A, %W) failed";
+static const char short_spc535[] = "**mpi_win_lock_all %A %W";
+static const char long_spc535[]  = "MPI_Win_lock_all(%A, %W) failed";
+static const char short_spc536[] = "**mpi_win_post %G %A %W";
+static const char long_spc536[]  = "MPI_Win_post(%G, %A, %W) failed";
+static const char short_spc537[] = "**mpi_win_set_attr %W %K %p";
+static const char long_spc537[]  = "MPI_Win_set_attr(%W, %K, attribute_val=%p) failed";
+static const char short_spc538[] = "**mpi_win_set_errhandler %W %E";
+static const char long_spc538[]  = "MPI_Win_set_errhandler(%W, %E) failed";
+static const char short_spc539[] = "**mpi_win_set_info %W %I";
+static const char long_spc539[]  = "MPI_Win_set_info(%W, %I) failed";
+static const char short_spc540[] = "**mpi_win_set_name %W %s";
+static const char long_spc540[]  = "MPI_Win_set_name(%W, win_name=%s) failed";
+static const char short_spc541[] = "**mpi_win_shared_query %W %d %p %p %p";
+static const char long_spc541[]  = "MPI_Win_shared_query(%W, rank=%d, size=%p, disp_unit=%p, baseptr=%p) failed";
+static const char short_spc542[] = "**mpi_win_shared_query_c %W %d %p %p %p";
+static const char long_spc542[]  = "MPI_Win_shared_query_c(%W, rank=%d, size=%p, disp_unit=%p, baseptr=%p) failed";
+static const char short_spc543[] = "**mpi_win_start %G %A %W";
+static const char long_spc543[]  = "MPI_Win_start(%G, %A, %W) failed";
+static const char short_spc544[] = "**mpi_win_sync %W";
+static const char long_spc544[]  = "MPI_Win_sync(%W) failed";
+static const char short_spc545[] = "**mpi_win_test %W %p";
+static const char long_spc545[]  = "MPI_Win_test(%W, flag=%p) failed";
+static const char short_spc546[] = "**mpi_win_unlock %d %W";
+static const char long_spc546[]  = "MPI_Win_unlock(rank=%d, %W) failed";
+static const char short_spc547[] = "**mpi_win_unlock_all %W";
+static const char long_spc547[]  = "MPI_Win_unlock_all(%W) failed";
+static const char short_spc548[] = "**mpi_win_wait %W";
+static const char long_spc548[]  = "MPI_Win_wait(%W) failed";
+static const char short_spc549[] = "**mpix_allreduce_enqueue %p %p %d %D %O %C";
+static const char long_spc549[]  = "MPIX_Allreduce_enqueue(sendbuf=%p, recvbuf=%p, count=%d, %D, %O, %C) failed";
+static const char short_spc550[] = "**mpix_allreduce_enqueue_c %p %p %c %D %O %C";
+static const char long_spc550[]  = "MPIX_Allreduce_enqueue_c(sendbuf=%p, recvbuf=%p, count=%c, %D, %O, %C) failed";
+static const char short_spc551[] = "**mpix_comm_agree %C %p";
+static const char long_spc551[]  = "MPIX_Comm_agree(%C, flag=%p) failed";
+static const char short_spc552[] = "**mpix_comm_failure_ack %C";
+static const char long_spc552[]  = "MPIX_Comm_failure_ack(%C) failed";
+static const char short_spc553[] = "**mpix_comm_failure_get_acked %C %p";
+static const char long_spc553[]  = "MPIX_Comm_failure_get_acked(%C, failedgrp=%p) failed";
+static const char short_spc554[] = "**mpix_comm_get_failed %C %p";
+static const char long_spc554[]  = "MPIX_Comm_get_failed(%C, failedgrp=%p) failed";
+static const char short_spc555[] = "**mpix_comm_get_stream %C %d %p";
+static const char long_spc555[]  = "MPIX_Comm_get_stream(%C, idx=%d, stream=%p) failed";
+static const char short_spc556[] = "**mpix_comm_revoke %C";
+static const char long_spc556[]  = "MPIX_Comm_revoke(%C) failed";
+static const char short_spc557[] = "**mpix_comm_shrink %C %p";
+static const char long_spc557[]  = "MPIX_Comm_shrink(%C, newcomm=%p) failed";
+static const char short_spc558[] = "**mpix_delete_error_class %d";
+static const char long_spc558[]  = "MPIX_Delete_error_class(errorclass=%d) failed";
+static const char short_spc559[] = "**mpix_delete_error_code %d";
+static const char long_spc559[]  = "MPIX_Delete_error_code(errorcode=%d) failed";
+static const char short_spc560[] = "**mpix_delete_error_string %d";
+static const char long_spc560[]  = "MPIX_Delete_error_string(errorcode=%d) failed";
+static const char short_spc561[] = "**mpix_gpu_query_support %d %p";
+static const char long_spc561[]  = "MPIX_GPU_query_support(gpu_type=%d, is_supported=%p) failed";
+static const char short_spc562[] = "**mpix_grequest_class_allocate %x %p %p";
+static const char long_spc562[]  = "MPIX_Grequest_class_allocate(%x, extra_state=%p, request=%p) failed";
+static const char short_spc563[] = "**mpix_grequest_class_create %p %p %p %p %p %p";
+static const char long_spc563[]  = "MPIX_Grequest_class_create(query_fn=%p, free_fn=%p, cancel_fn=%p, poll_fn=%p, wait_fn=%p, greq_class=%p) failed";
+static const char short_spc564[] = "**mpix_grequest_start %p %p %p %p %p %p %p";
+static const char long_spc564[]  = "MPIX_Grequest_start(query_fn=%p, free_fn=%p, cancel_fn=%p, poll_fn=%p, wait_fn=%p, extra_state=%p, request=%p) failed";
+static const char short_spc565[] = "**mpix_info_set_hex %I %s %p %d";
+static const char long_spc565[]  = "MPIX_Info_set_hex(%I, key=%s, value=%p, value_size=%d) failed";
+static const char short_spc566[] = "**mpix_irecv_enqueue %p %d %D %i %t %C %p";
+static const char long_spc566[]  = "MPIX_Irecv_enqueue(buf=%p, count=%d, %D, %i, %t, %C, request=%p) failed";
+static const char short_spc567[] = "**mpix_irecv_enqueue_c %p %c %D %i %t %C %p";
+static const char long_spc567[]  = "MPIX_Irecv_enqueue_c(buf=%p, count=%c, %D, %i, %t, %C, request=%p) failed";
+static const char short_spc568[] = "**mpix_isend_enqueue %p %d %D %i %t %C %p";
+static const char long_spc568[]  = "MPIX_Isend_enqueue(buf=%p, count=%d, %D, %i, %t, %C, request=%p) failed";
+static const char short_spc569[] = "**mpix_isend_enqueue_c %p %c %D %i %t %C %p";
+static const char long_spc569[]  = "MPIX_Isend_enqueue_c(buf=%p, count=%c, %D, %i, %t, %C, request=%p) failed";
+static const char short_spc570[] = "**mpix_recv_enqueue %p %d %D %i %t %C %p";
+static const char long_spc570[]  = "MPIX_Recv_enqueue(buf=%p, count=%d, %D, %i, %t, %C, status=%p) failed";
+static const char short_spc571[] = "**mpix_recv_enqueue_c %p %c %D %i %t %C %p";
+static const char long_spc571[]  = "MPIX_Recv_enqueue_c(buf=%p, count=%c, %D, %i, %t, %C, status=%p) failed";
+static const char short_spc572[] = "**mpix_send_enqueue %p %d %D %i %t %C";
+static const char long_spc572[]  = "MPIX_Send_enqueue(buf=%p, count=%d, %D, %i, %t, %C) failed";
+static const char short_spc573[] = "**mpix_send_enqueue_c %p %c %D %i %t %C";
+static const char long_spc573[]  = "MPIX_Send_enqueue_c(buf=%p, count=%c, %D, %i, %t, %C) failed";
+static const char short_spc574[] = "**mpix_start_progress_thread %x";
+static const char long_spc574[]  = "MPIX_Start_progress_thread(%x) failed";
+static const char short_spc575[] = "**mpix_stop_progress_thread %x";
+static const char long_spc575[]  = "MPIX_Stop_progress_thread(%x) failed";
+static const char short_spc576[] = "**mpix_stream_comm_create %C %x %p";
+static const char long_spc576[]  = "MPIX_Stream_comm_create(%C, %x, newcomm=%p) failed";
+static const char short_spc577[] = "**mpix_stream_comm_create_multiplex %C %d %p %p";
+static const char long_spc577[]  = "MPIX_Stream_comm_create_multiplex(%C, count=%d, array_of_streams=%p, newcomm=%p) failed";
+static const char short_spc578[] = "**mpix_stream_create %I %p";
+static const char long_spc578[]  = "MPIX_Stream_create(%I, stream=%p) failed";
+static const char short_spc579[] = "**mpix_stream_free %p";
+static const char long_spc579[]  = "MPIX_Stream_free(stream=%p) failed";
+static const char short_spc580[] = "**mpix_stream_irecv %p %d %D %i %t %C %d %d %p";
+static const char long_spc580[]  = "MPIX_Stream_irecv(buf=%p, count=%d, %D, %i, %t, %C, source_stream_index=%d, dest_stream_index=%d, request=%p) failed";
+static const char short_spc581[] = "**mpix_stream_irecv_c %p %c %D %i %t %C %d %d %p";
+static const char long_spc581[]  = "MPIX_Stream_irecv_c(buf=%p, count=%c, %D, %i, %t, %C, source_stream_index=%d, dest_stream_index=%d, request=%p) failed";
+static const char short_spc582[] = "**mpix_stream_isend %p %d %D %i %t %C %d %d %p";
+static const char long_spc582[]  = "MPIX_Stream_isend(buf=%p, count=%d, %D, %i, %t, %C, source_stream_index=%d, dest_stream_index=%d, request=%p) failed";
+static const char short_spc583[] = "**mpix_stream_isend_c %p %c %D %i %t %C %d %d %p";
+static const char long_spc583[]  = "MPIX_Stream_isend_c(buf=%p, count=%c, %D, %i, %t, %C, source_stream_index=%d, dest_stream_index=%d, request=%p) failed";
+static const char short_spc584[] = "**mpix_stream_progress %x";
+static const char long_spc584[]  = "MPIX_Stream_progress(%x) failed";
+static const char short_spc585[] = "**mpix_stream_recv %p %d %D %i %t %C %d %d %p";
+static const char long_spc585[]  = "MPIX_Stream_recv(buf=%p, count=%d, %D, %i, %t, %C, source_stream_index=%d, dest_stream_index=%d, status=%p) failed";
+static const char short_spc586[] = "**mpix_stream_recv_c %p %c %D %i %t %C %d %d %p";
+static const char long_spc586[]  = "MPIX_Stream_recv_c(buf=%p, count=%c, %D, %i, %t, %C, source_stream_index=%d, dest_stream_index=%d, status=%p) failed";
+static const char short_spc587[] = "**mpix_stream_send %p %d %D %i %t %C %d %d";
+static const char long_spc587[]  = "MPIX_Stream_send(buf=%p, count=%d, %D, %i, %t, %C, source_stream_index=%d, dest_stream_index=%d) failed";
+static const char short_spc588[] = "**mpix_stream_send_c %p %c %D %i %t %C %d %d";
+static const char long_spc588[]  = "MPIX_Stream_send_c(buf=%p, count=%c, %D, %i, %t, %C, source_stream_index=%d, dest_stream_index=%d) failed";
+static const char short_spc589[] = "**mpix_type_iov %D %c %p %c %p";
+static const char long_spc589[]  = "MPIX_Type_iov(%D, iov_offset=%c, iov=%p, max_iov_len=%c, actual_iov_len=%p) failed";
+static const char short_spc590[] = "**mpix_type_iov_len %D %c %p %p";
+static const char long_spc590[]  = "MPIX_Type_iov_len(%D, max_iov_bytes=%c, iov_len=%p, actual_iov_bytes=%p) failed";
+static const char short_spc591[] = "**mpix_wait_enqueue %p %p";
+static const char long_spc591[]  = "MPIX_Wait_enqueue(request=%p, status=%p) failed";
+static const char short_spc592[] = "**mpix_waitall_enqueue %d %p %p";
+static const char long_spc592[]  = "MPIX_Waitall_enqueue(count=%d, array_of_requests=%p, array_of_statuses=%p) failed";
+static const char short_spc593[] = "**msgnotreq %d";
+static const char long_spc593[]  = " Invalid MPI_Request at array index %d (MPI_Message passed)";
+static const char short_spc594[] = "**namepubfile %s %s %s";
+static const char long_spc594[]  = "Unable to publish service name %s using file %s for reason %s";
+static const char short_spc595[] = "**namepubnotfound %s";
+static const char long_spc595[]  = "Lookup failed for service name %s";
+static const char short_spc596[] = "**namepubnotpub %s";
+static const char long_spc596[]  = "Publish failed for service name %s";
+static const char short_spc597[] = "**namepubnotunpub %s";
+static const char long_spc597[]  = "Failed to unpublish service name %s";
+static const char short_spc598[] = "**nomem %d";
+static const char long_spc598[]  = "Out of memory (unable to allocate %d bytes)";
+static const char short_spc599[] = "**nomem %s";
+static const char long_spc599[]  = "Out of memory (unable to allocate a '%s')";
+static const char short_spc600[] = "**nomem %s %d";
+static const char long_spc600[]  = "Out of memory (unable to allocate a '%s' of size %d)";
+static const char short_spc601[] = "**nomem2 %d %s";
+static const char long_spc601[]  = "Unable to allocate %d bytes of memory for %s (probably out of memory)";
+static const char short_spc602[] = "**nomemuereq %d";
+static const char long_spc602[]  = "Failed to allocate memory for an unexpected message. %d unexpected messages queued.";
+static const char short_spc603[] = "**notimpl %s";
+static const char long_spc603[]  = "Function %s not implemented";
+static const char short_spc604[] = "**notsame %s %s";
+static const char long_spc604[]  = "Inconsistent arguments %s to collective routine %s";
+static const char short_spc605[] = "**nullptr %s";
+static const char long_spc605[]  = "Null pointer in parameter %s";
+static const char short_spc606[] = "**nullptrtype %s";
+static const char long_spc606[]  = "Null %s pointer";
+static const char short_spc607[] = "**ofid_alias %s %d %s %s";
+static const char long_spc607[]  = "OFI cq alias failed (%s:%d:%s:%s)";
+static const char short_spc608[] = "**ofid_avclose %s %d %s %s";
+static const char long_spc608[]  = "OFI av close failed (%s:%d:%s:%s)";
+static const char short_spc609[] = "**ofid_avlookup %s %d %s %s";
+static const char long_spc609[]  = "OFI address vector lookup failed (%s:%d:%s:%s)";
+static const char short_spc610[] = "**ofid_avmap %s %d %s %s";
+static const char long_spc610[]  = "OFI address vector map failed (%s:%d:%s:%s)";
+static const char short_spc611[] = "**ofid_avopen %s %d %s %s";
+static const char long_spc611[]  = "OFI address vector open failed (%s:%d:%s:%s)";
+static const char short_spc612[] = "**ofid_avsync %s %d %s %s";
+static const char long_spc612[]  = "OFI address vector sync failed (%s:%d:%s:%s)";
+static const char short_spc613[] = "**ofid_bind %s %d %s %s";
+static const char long_spc613[]  = "OFI resource bind failed (%s:%d:%s:%s)";
+static const char short_spc614[] = "**ofid_cancel %s %d %s %s";
+static const char long_spc614[]  = "OFI cancel failed (%s:%d:%s:%s)";
+static const char short_spc615[] = "**ofid_cntr_wait %s %d %s %s";
+static const char long_spc615[]  = "OFI OFI Counter wait failed (%s:%d:%s:%s)";
+static const char short_spc616[] = "**ofid_cqclose %s %d %s %s";
+static const char long_spc616[]  = "OFI cq close failed (%s:%d:%s:%s)";
+static const char short_spc617[] = "**ofid_ctrlcancel %s %d %s %s";
+static const char long_spc617[]  = "OFI control cancel failed (%s:%d:%s:%s)";
+static const char short_spc618[] = "**ofid_domainclose %s %d %s %s";
+static const char long_spc618[]  = "OFI domain close failed (%s:%d:%s:%s)";
+static const char short_spc619[] = "**ofid_ep %s %d %s %s";
+static const char long_spc619[]  = "OFI endpoint open failed (%s:%d:%s:%s)";
+static const char short_spc620[] = "**ofid_ep_enable %s %d %s %s";
+static const char long_spc620[]  = "OFI EP enable failed (%s:%d:%s:%s)";
+static const char short_spc621[] = "**ofid_epclose %s %d %s %s";
+static const char long_spc621[]  = "OFI endpoint close failed (%s:%d:%s:%s)";
+static const char short_spc622[] = "**ofid_epsync %s %d %s %s";
+static const char long_spc622[]  = "OFI endpoint synchronization failed (%s:%d:%s:%s)";
+static const char short_spc623[] = "**ofid_fabric %s %d %s %s";
+static const char long_spc623[]  = "OFI fi_fabric failed (%s:%d:%s:%s)";
+static const char short_spc624[] = "**ofid_getinfo %s %d %s %s";
+static const char long_spc624[]  = "OFI fi_getinfo() failed (%s:%d:%s:%s)";
+static const char short_spc625[] = "**ofid_getname %s %d %s %s";
+static const char long_spc625[]  = "OFI get endpoint name failed (%s:%d:%s:%s)";
+static const char short_spc626[] = "**ofid_getopt %s %d %s %s";
+static const char long_spc626[]  = "OFI getopt failed (%s:%d:%s:%s)";
+static const char short_spc627[] = "**ofid_inject %s %d %s %s";
+static const char long_spc627[]  = "OFI inject failed (%s:%d:%s:%s)";
+static const char short_spc628[] = "**ofid_mr_reg %s %d %s %s";
+static const char long_spc628[]  = "OFI memory registration failed (%s:%d:%s:%s)";
+static const char short_spc629[] = "**ofid_mr_unreg %s %d %s %s";
+static const char long_spc629[]  = "OFI memory deregistration failed (%s:%d:%s:%s)";
+static const char short_spc630[] = "**ofid_opencq %s %d %s %s";
+static const char long_spc630[]  = "OFI event queue create failed (%s:%d:%s:%s)";
+static const char short_spc631[] = "**ofid_openct %s %d %s %s";
+static const char long_spc631[]  = "OFI event counter create failed (%s:%d:%s:%s)";
+static const char short_spc632[] = "**ofid_opendomain %s %d %s %s";
+static const char long_spc632[]  = "OFI fi_open domain failed (%s:%d:%s:%s)";
+static const char short_spc633[] = "**ofid_peek %s %d %s %s";
+static const char long_spc633[]  = "OFI peek failed (%s:%d:%s:%s)";
+static const char short_spc634[] = "**ofid_pmi %s %d %s %s";
+static const char long_spc634[]  = "pmi failed (%s:%d:%s:%s)";
+static const char short_spc635[] = "**ofid_poll %s %d %s %s";
+static const char long_spc635[]  = "OFI poll failed (%s:%d:%s:%s)";
+static const char short_spc636[] = "**ofid_prepost %s %d %s %s";
+static const char long_spc636[]  = "OFI preposting receives failed (%s:%d:%s:%s)";
+static const char short_spc637[] = "**ofid_rdma_atomicto %s %d %s %s";
+static const char long_spc637[]  = "OFI rdma atomicto failed (%s:%d:%s:%s)";
+static const char short_spc638[] = "**ofid_rdma_cswap %s %d %s %s";
+static const char long_spc638[]  = "OFI rdma cswap failed (%s:%d:%s:%s)";
+static const char short_spc639[] = "**ofid_rdma_inject_write %s %d %s %s";
+static const char long_spc639[]  = "OFI rdma write immediate failed (%s:%d:%s:%s)";
+static const char short_spc640[] = "**ofid_rdma_readfrom %s %d %s %s";
+static const char long_spc640[]  = "OFI read failed (%s:%d:%s:%s)";
+static const char short_spc641[] = "**ofid_rdma_write %s %d %s %s";
+static const char long_spc641[]  = "OFI rdma write failed (%s:%d:%s:%s)";
+static const char short_spc642[] = "**ofid_send %s %d %s %s";
+static const char long_spc642[]  = "OFI send failed (%s:%d:%s:%s)";
+static const char short_spc643[] = "**ofid_sendv %s %d %s %s";
+static const char long_spc643[]  = "OFI send failed (%s:%d:%s:%s)";
+static const char short_spc644[] = "**ofid_setopt %s %d %s %s";
+static const char long_spc644[]  = "OFI setopt failed (%s:%d:%s:%s)";
+static const char short_spc645[] = "**ofid_tinject %s %d %s %s";
+static const char long_spc645[]  = "OFI tagged inject failed (%s:%d:%s:%s)";
+static const char short_spc646[] = "**ofid_trecv %s %d %s %s";
+static const char long_spc646[]  = "OFI tagged recv failed (%s:%d:%s:%s)";
+static const char short_spc647[] = "**ofid_trecvsync %s %d %s %s";
+static const char long_spc647[]  = "OFI tagged recv sync failed (%s:%d:%s:%s)";
+static const char short_spc648[] = "**ofid_tsend %s %d %s %s";
+static const char long_spc648[]  = "OFI tagged send failed (%s:%d:%s:%s)";
+static const char short_spc649[] = "**ofid_tsendsync %s %d %s %s";
+static const char long_spc649[]  = "OFI tagged send sync failed (%s:%d:%s:%s)";
+static const char short_spc650[] = "**opnotpredefined %d";
+static const char long_spc650[]  = "only predefined ops are valid (op = %d)";
+static const char short_spc651[] = "**opundefined %s";
+static const char long_spc651[]  = "MPI_Op %s operation not defined for this datatype ";
+static const char short_spc652[] = "**parse_thread_affinity %s";
+static const char long_spc652[]  = "Failed to parse async thread affinity string [%s]";
+static const char short_spc653[] = "**partitioninvalid %d";
+static const char long_spc653[]  = " Invalid partition, value is %d ";
+static const char short_spc654[] = "**partitioninvalid %d %d";
+static const char long_spc654[]  = " Invalid partition range, values are %d %d";
+static const char short_spc655[] = "**pglookup %s";
+static const char long_spc655[]  = "unable to find the process group structure with id <%s>";
+static const char short_spc656[] = "**pmi2_info_getjobattr %d";
+static const char long_spc656[]  = " PMI2_Info_GetJobAttr returned %d";
+static const char short_spc657[] = "**pmi_barrier %d";
+static const char long_spc657[]  = "PMI_Barrier returned %d";
+static const char short_spc658[] = "**pmi_get_appnum %d";
+static const char long_spc658[]  = "PMI_Get_appnum returned %d";
+static const char short_spc659[] = "**pmi_get_rank %d";
+static const char long_spc659[]  = "PMI_Get_rank returned %d";
+static const char short_spc660[] = "**pmi_get_size %d";
+static const char long_spc660[]  = "PMI_Get_size returned %d";
+static const char short_spc661[] = "**pmi_get_universe_size %d";
+static const char long_spc661[]  = "PMI_Get_universe_size returned %d";
+static const char short_spc662[] = "**pmi_getjobattr %d";
+static const char long_spc662[]  = " PMI2 GetJobAttr failed: %d";
+static const char short_spc663[] = "**pmi_init %d";
+static const char long_spc663[]  = "PMI_Init returned %d";
+static const char short_spc664[] = "**pmi_job_getid %d";
+static const char long_spc664[]  = "PMI2_Job_GetId returned %d";
+static const char short_spc665[] = "**pmi_kvs_commit %d";
+static const char long_spc665[]  = "PMI_KVS_Commit returned %d";
+static const char short_spc666[] = "**pmi_kvs_get %d";
+static const char long_spc666[]  = "PMI_KVS_Get returned %d";
+static const char short_spc667[] = "**pmi_kvs_get_key_length_max %d";
+static const char long_spc667[]  = "PMI_KVS_Get_key_length_max returned %d";
+static const char short_spc668[] = "**pmi_kvs_get_my_name %d";
+static const char long_spc668[]  = "PMI_KVS_Get_my_name returned %d";
+static const char short_spc669[] = "**pmi_kvs_get_name_length_max %d";
+static const char long_spc669[]  = "PMI_KVS_Get_name_length_max returned %d";
+static const char short_spc670[] = "**pmi_kvs_get_value_length_max %d";
+static const char long_spc670[]  = "PMI_KVS_Get_value_length_max returned %d";
+static const char short_spc671[] = "**pmi_kvs_put %d";
+static const char long_spc671[]  = "PMI_KVS_Put returned %d";
+static const char short_spc672[] = "**pmi_kvsfence %d";
+static const char long_spc672[]  = " PMI2 KVS_Fence failed: %d";
+static const char short_spc673[] = "**pmi_kvsget %d";
+static const char long_spc673[]  = " PMI2 KVS_Get failed: %d";
+static const char short_spc674[] = "**pmi_kvsput %d";
+static const char long_spc674[]  = " PMI2 KVS_Put failed: %d";
+static const char short_spc675[] = "**pmi_spawn_multiple %d";
+static const char long_spc675[]  = "PMI_Spawn_multiple returned %d";
+static const char short_spc676[] = "**pmix_commit %d";
+static const char long_spc676[]  = "PMIx_Commit returned %d";
+static const char short_spc677[] = "**pmix_fence %d";
+static const char long_spc677[]  = "PMIx_Fence returned %d";
+static const char short_spc678[] = "**pmix_get %d";
+static const char long_spc678[]  = "PMIx_Get returned %d";
+static const char short_spc679[] = "**pmix_init %d";
+static const char long_spc679[]  = "PMIX_Init returned %d";
+static const char short_spc680[] = "**pmix_put %d";
+static const char long_spc680[]  = "PMIx_Put returned %d";
+static const char short_spc681[] = "**pmix_resolve_nodes %d";
+static const char long_spc681[]  = " PMIx_Resolve_nodes returned %d";
+static const char short_spc682[] = "**pmix_resolve_peers %d";
+static const char long_spc682[]  = " PMIx_Resolve_peers returned %d";
+static const char short_spc683[] = "**poll %s";
+static const char long_spc683[]  = "poll of socket fds failed - %s";
+static const char short_spc684[] = "**portexist %s";
+static const char long_spc684[]  = "Named port %s does not exist";
+static const char short_spc685[] = "**psetinvalidn %d";
+static const char long_spc685[]  = "Invalid pset number - %d";
+static const char short_spc686[] = "**pthread_mutex %s";
+static const char long_spc686[]  = "pthread mutex routine failed (%s)";
+static const char short_spc687[] = "**qmpi_invalid_name %s";
+static const char long_spc687[]  = " tool name is invalid (name=%s)";
+static const char short_spc688[] = "**rangedup %d %d %d";
+static const char long_spc688[]  = "The range array specifies duplicate entries; process %d specified in range array %d was previously specified in range array %d";
+static const char short_spc689[] = "**rangeendinvalid %d %d %d";
+static const char long_spc689[]  = "The %dth element of a range array ends at %d but must be nonnegative and less than %d";
+static const char short_spc690[] = "**rangestartinvalid %d %d %d";
+static const char long_spc690[]  = "The %dth element of a range array starts at %d but must be nonnegative and less than %d";
+static const char short_spc691[] = "**rank %d %d";
+static const char long_spc691[]  = "Invalid rank has value %d but must be nonnegative and less than %d";
+static const char short_spc692[] = "**rankarray %d %d %d";
+static const char long_spc692[]  = "Invalid rank in rank array at index %d; value is %d but must be in the range 0 to %d";
+static const char short_spc693[] = "**rankdup %d %d %d";
+static const char long_spc693[]  = "Duplicate ranks in rank array at index %d, has value %d which is also the value at index %d";
+static const char short_spc694[] = "**ranklocal %d %d";
+static const char long_spc694[]  = "Error specifying local_leader; rank given was %d but must be in the range 0 to %d";
+static const char short_spc695[] = "**rankremote %d %d";
+static const char long_spc695[]  = "Error specifying remote_leader; rank given was %d but must be in the range 0 to %d";
+static const char short_spc696[] = "**read %d %s";
+static const char long_spc696[]  = "read from socket failed - nread=%d %s";
+static const char short_spc697[] = "**read %s";
+static const char long_spc697[]  = "read from socket failed - %s";
+static const char short_spc698[] = "**request %d";
+static const char long_spc698[]  = "Invalid MPI_Request in array element %d (from 0)";
+static const char short_spc699[] = "**request_invalid_kind %d";
+static const char long_spc699[]  = "The supplied request was invalid (kind=%d)";
+static const char short_spc700[] = "**request_invalid_kind %d %d";
+static const char long_spc700[]  = "The supplied request in array element %d was invalid (kind=%d)";
+static const char short_spc701[] = "**rmasize %d";
+static const char long_spc701[]  = "Invalid size argument in RMA call (value is %d)";
+static const char short_spc702[] = "**rmatypenotatomic %D";
+static const char long_spc702[]  = " Datatype (%D) not permitted for atomic operations";
+static const char short_spc703[] = "**root %d";
+static const char long_spc703[]  = "Invalid root (value given was %d)";
+static const char short_spc704[] = "**rsendnomatch %d %d";
+static const char long_spc704[]  = "Ready send from source %d and with tag %d had no matching receive";
+static const char short_spc705[] = "**sem_destroy %s";
+static const char long_spc705[]  = "sem_destroy() failed %s";
+static const char short_spc706[] = "**sem_init %s";
+static const char long_spc706[]  = "sem_init() failed %s";
+static const char short_spc707[] = "**sem_post %s";
+static const char long_spc707[]  = "sem_post() failed %s";
+static const char short_spc708[] = "**sem_wait %s";
+static const char long_spc708[]  = "sem_wait() failed %s";
+static const char short_spc709[] = "**set_thread_affinity %d";
+static const char long_spc709[]  = "Failed to set the async thread affinity to the logical processor [%d]";
+static const char short_spc710[] = "**signal %s";
+static const char long_spc710[]  = "signal() failed: %s";
+static const char short_spc711[] = "**snprintf %d";
+static const char long_spc711[]  = "snprintf returned %d";
+static const char short_spc712[] = "**sock_accept %s";
+static const char long_spc712[]  = "accept of socket fd failed - %s";
+static const char short_spc713[] = "**sock_connect %d %s";
+static const char long_spc713[]  = "connect failed - %s (errno %d)";
+static const char short_spc714[] = "**sock_create %s %d";
+static const char long_spc714[]  = "unable to create a socket, %s (errno %d)";
+static const char short_spc715[] = "**sock_gethost %s %d";
+static const char long_spc715[]  = "gethostname failed, %s (errno %d)";
+static const char short_spc716[] = "**sock|badiovn %d %d %d";
+static const char long_spc716[]  = "size of iov is invalid (set=%d,sock=%d,iov_n=%d)";
+static const char short_spc717[] = "**sock|badlen %d %d %d %d";
+static const char long_spc717[]  = "bad length parameter(s) (set=%d,sock=%d,min=%d,max=%d)";
+static const char short_spc718[] = "**sock|badport %d";
+static const char long_spc718[]  = "port number is out of range (sock=%d)";
+static const char short_spc719[] = "**sock|closing %d %d";
+static const char long_spc719[]  = "sock is in the process of being closed locally (set=%d,sock=%d)";
+static const char short_spc720[] = "**sock|closing_already %d %d";
+static const char long_spc720[]  = "a close operation is already post (set=%d,sock=%d)";
+static const char short_spc721[] = "**sock|connclosed %d %d";
+static const char long_spc721[]  = "connection closed by peer (set=%d,sock=%d)";
+static const char short_spc722[] = "**sock|listener_bad_sock %d %d";
+static const char long_spc722[]  = "supplied sock is not a listener (set=%d,sock=%d)";
+static const char short_spc723[] = "**sock|listener_bad_state %d %d %d";
+static const char long_spc723[]  = "supplied listener sock is in a bad state (set=%d,sock=%d,state=%d)";
+static const char short_spc724[] = "**sock|listener_read %d %d";
+static const char long_spc724[]  = "read operation not allowed on a listener (set=%d,sock=%d)";
+static const char short_spc725[] = "**sock|listener_write %d %d";
+static const char long_spc725[]  = "write operation not allowed on a listener (set=%d,sock=%d)";
+static const char short_spc726[] = "**sock|notconnected %d %d";
+static const char long_spc726[]  = "sock is not connected (set=%d,sock=%d)";
+static const char short_spc727[] = "**sock|osnomem %s %d %d";
+static const char long_spc727[]  = "operating system routine %s failed due to lack of memory (set=%d,sock=%d)";
+static const char short_spc728[] = "**sock|poll|accept %d %s";
+static const char long_spc728[]  = "accept failed to acquire a new socket (errno=%d:%s)";
+static const char short_spc729[] = "**sock|poll|badbuf %d %d %d %s";
+static const char long_spc729[]  = "the supplied buffer contains invalid memory (set=%d,sock=%d,errno=%d:%s)";
+static const char short_spc730[] = "**sock|poll|badhandle %d %d %d";
+static const char long_spc730[]  = "sock contains an invalid file descriptor (set=%d,sock=%d,fd=%d)";
+static const char short_spc731[] = "**sock|poll|badhandle %d %d %d %d";
+static const char long_spc731[]  = "sock contains an invalid file descriptor (set=%d,sock=%d,fd=%d:%d)";
+static const char short_spc732[] = "**sock|poll|bind %d %d %s";
+static const char long_spc732[]  = "unable to bind socket to port (port=%d,errno=%d:%s)";
+static const char short_spc733[] = "**sock|poll|connclosed %d %d %d %s";
+static const char long_spc733[]  = "connection closed by peer (set=%d,sock=%d,errno=%d:%s)";
+static const char short_spc734[] = "**sock|poll|connfailed %d %d %d %s";
+static const char long_spc734[]  = "connection failure (set=%d,sock=%d,errno=%d:%s)";
+static const char short_spc735[] = "**sock|poll|connrefused %d %d %s";
+static const char long_spc735[]  = "connection refused (set=%d,sock=%d,host=%s)";
+static const char short_spc736[] = "**sock|poll|eqfail %d %d %d";
+static const char long_spc736[]  = "fatal error: failed to enqueue an event; event was lost (set=%d,sock=%d,op=%d)";
+static const char short_spc737[] = "**sock|poll|listen %d %s";
+static const char long_spc737[]  = "listen() failed (errno=%d:%s)";
+static const char short_spc738[] = "**sock|poll|nodelay %d %s";
+static const char long_spc738[]  = "unable to set TCP no delay attribute on socket (errno=%d:%s)";
+static const char short_spc739[] = "**sock|poll|nonblock %d %s";
+static const char long_spc739[]  = "unable to set socket to nonblocking (errno=%d:%s)";
+static const char short_spc740[] = "**sock|poll|oserror %d %d %d %s";
+static const char long_spc740[]  = "unexpected operating system error (set=%d,sock=%d,errno=%d:%s)";
+static const char short_spc741[] = "**sock|poll|oserror %d %s";
+static const char long_spc741[]  = "unexpected operating system error (errno=%d:%s)";
+static const char short_spc742[] = "**sock|poll|oserror %s %d %d %d %s";
+static const char long_spc742[]  = "unpected operating system error from %s (set=%d,sock=%d,errno=%d:%s)";
+static const char short_spc743[] = "**sock|poll|osnomem %d %d %d %s";
+static const char long_spc743[]  = "operating system routine failed due to lack of memory (set=%d,sock=%d,errno=%d:%s)";
+static const char short_spc744[] = "**sock|poll|pipe %d %s";
+static const char long_spc744[]  = "unable to allocate pipe to wakeup a blocking poll() (errno=%d:%s)";
+static const char short_spc745[] = "**sock|poll|pipenonblock %d %s";
+static const char long_spc745[]  = "unable to set wakeup pipe to nonblocking (errno=%d:%s)";
+static const char short_spc746[] = "**sock|poll|reuseaddr %d %s";
+static const char long_spc746[]  = "unable to set reuseaddr attribute on socket (errno=%d:%s)";
+static const char short_spc747[] = "**sock|poll|setrcvbufsz %d %d %s";
+static const char long_spc747[]  = " unable to set the receive socket buffer size (size=%d,errno=%d:%s)";
+static const char short_spc748[] = "**sock|poll|setsndbufsz %d %d %s";
+static const char long_spc748[]  = " unable to set the send socket buffer size (size=%d,errno=%d:%s)";
+static const char short_spc749[] = "**sock|poll|socket %d %s";
+static const char long_spc749[]  = "unable to obtain new socket (errno=%d:%s)";
+static const char short_spc750[] = "**sock|poll|unhandledstate %d";
+static const char long_spc750[]  = "encountered an unexpected state (%d)";
+static const char short_spc751[] = "**sock|poll|unhandledtype %d";
+static const char long_spc751[]  = "encountered an unexpected sock type (%d)";
+static const char short_spc752[] = "**sock|reads %d %d";
+static const char long_spc752[]  = "attempt to perform multiple simultaneous reads (set=%d,sock=%d)";
+static const char short_spc753[] = "**sock|writes %d %d";
+static const char long_spc753[]  = "attempt to perform multiple simultaneous writes (set=%d,sock=%d)";
+static const char short_spc754[] = "**splittype %d";
+static const char long_spc754[]  = "Invalid split_type argument (%d)";
+static const char short_spc755[] = "**storageorder %d";
+static const char long_spc755[]  = " Invalid storage order (%d)";
+static const char short_spc756[] = "**stride %d %d %d";
+static const char long_spc756[]  = "Range (start = %d, end = %d, stride = %d) does not terminate";
+static const char short_spc757[] = "**tag %d";
+static const char long_spc757[]  = "Invalid tag, value is %d";
+static const char short_spc758[] = "**thread_level %d";
+static const char long_spc758[]  = " Invalid thread level (%d)";
+static const char short_spc759[] = "**too_big_for_input %s";
+static const char long_spc759[]  = "The input argument %s is too big to fit for internal routines";
+static const char short_spc760[] = "**toomanycomm %d %d %d";
+static const char long_spc760[]  = "Too many communicators (%d/%d free on this process; ignore_id=%d)";
+static const char short_spc761[] = "**toomanycommfrag %d %d %d";
+static const char long_spc761[]  = " Cannot allocate context ID because of fragmentation (%d/%d free on this process; ignore_id=%d)";
+static const char short_spc762[] = "**topotoolarge %d %d";
+static const char long_spc762[]  = "Topology size %d is larger than communicator size (%d)";
+static const char short_spc763[] = "**treetype %d";
+static const char long_spc763[]  = " Invalid tree type (%d) used for initializing Tree algorithms";
+static const char short_spc764[] = "**truncate %d %d";
+static const char long_spc764[]  = "Message truncated; %d bytes received but buffer size is %d";
+static const char short_spc765[] = "**truncate %d %d %d %d";
+static const char long_spc765[]  = "Message from rank %d and tag %d truncated; %d bytes received but buffer size is %d";
+static const char short_spc766[] = "**typeinitbadmem %d";
+static const char long_spc766[]  = "%dth builtin datatype handle references invalid memory";
+static const char short_spc767[] = "**typematchsize %s %d";
+static const char long_spc767[]  = "No MPI datatype available for typeclass %s and size %d";
+static const char short_spc768[] = "**ucx_nm_rq_error %s %d %s %s";
+static const char long_spc768[]  = " returned failed request in UCX netmod(%s %d %s %s)";
+static const char short_spc769[] = "**ucx_nm_status %s %d %s %s";
+static const char long_spc769[]  = " ucx function returned with failed status(%s %d %s %s)";
+static const char short_spc770[] = "**unknowngpid %d %d";
+static const char long_spc770[]  = "Internal MPI error: Unknown gpid (%d)%d";
+static const char short_spc771[] = "**usercancel %d";
+static const char long_spc771[]  = "user request cancel function returned error code %d";
+static const char short_spc772[] = "**usercopy %d";
+static const char long_spc772[]  = "user copy function returned error code %d";
+static const char short_spc773[] = "**userdel %d";
+static const char long_spc773[]  = "user delete function returned error code %d";
+static const char short_spc774[] = "**userfree %d";
+static const char long_spc774[]  = "user request free function returned error code %d";
+static const char short_spc775[] = "**userquery %d";
+static const char long_spc775[]  = "user request query function returned error code %d";
+static const char short_spc776[] = "**windows_mutex %s";
+static const char long_spc776[]  = "Windows mutex routine failed (%s)";
+static const char short_spc777[] = "**winflavor %s";
+static const char long_spc777[]  = " Window flavor is not compatible with the given operation (expected %s)";
+static const char short_spc778[] = "**write %s";
+static const char long_spc778[]  = "write to socket failed - %s";
+static const char short_spc779[] = "**writev %s";
+static const char long_spc779[]  = "writev to socket failed - %s";
 
-static const int specific_msgs_len = 778;
+static const int specific_msgs_len = 780;
 static const msgpair specific_err_msgs[] = {
     { 0xacebad03, short_spc0, long_spc0, 0xcb0bfa11 },
     { 0xacebad03, short_spc1, long_spc1, 0xcb0bfa11 },
@@ -5648,22 +5658,24 @@
     { 0xacebad03, short_spc774, long_spc774, 0xcb0bfa11 },
     { 0xacebad03, short_spc775, long_spc775, 0xcb0bfa11 },
     { 0xacebad03, short_spc776, long_spc776, 0xcb0bfa11 },
-    { 0xacebad03, short_spc777, long_spc777, 0xcb0bfa11 }
+    { 0xacebad03, short_spc777, long_spc777, 0xcb0bfa11 },
+    { 0xacebad03, short_spc778, long_spc778, 0xcb0bfa11 },
+    { 0xacebad03, short_spc779, long_spc779, 0xcb0bfa11 }
 };
 #endif
 
 #if MPICH_ERROR_MSG_LEVEL > MPICH_ERROR_MSG__CLASS
 static int class_to_index[] = {
-    1016,32,116,140,1017,105,917,945,191,856,
-    1026,133,4,1037,1029,863,219,218,867,927,
-    162,163,170,114,125,168,169,161,201,203,
-    211,208,226,781,3,805,174,173,901,176,
-    177,953,1008,124,175,1043,24,262,258,937,
-    943,942,938,18,0,940,936,941,939,0,
+    1018,32,116,141,1019,105,919,947,193,858,
+    1028,134,4,1039,1031,865,221,220,869,929,
+    164,165,172,114,126,170,171,163,203,205,
+    213,210,228,783,3,807,176,175,903,178,
+    179,955,1010,125,177,1045,24,264,260,939,
+    945,944,940,18,0,942,938,943,941,0,
     0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,
-    0,905,160,935,147,793,0,1020
+    0,907,162,937,148,795,0,1022
 };
 #endif
diff -ur -x autom4te.cache -x .git a/test/mpi/errhan/errcode.c b/test/mpi/errhan/errcode.c
--- a/test/mpi/errhan/errcode.c	2022-11-08 00:12:29.197399611 +0100
+++ b/test/mpi/errhan/errcode.c	2022-11-08 00:38:06.108782014 +0100
@@ -1130,6 +1130,25 @@
      err = MPIR_Err_create_code(MPI_SUCCESS, MPIR_ERR_RECOVERABLE, "errcode::main", __LINE__, MPI_ERR_OTHER, "**namepubnotfound", "**namepubnotfound %s", s1 );
     ChkMsg( err, MPI_ERR_OTHER, "**namepubnotfound %s" );
     }
+    /* src/util/mpir_cvars.c */
+    err = MPIR_Err_create_code(MPI_SUCCESS, MPIR_ERR_RECOVERABLE, "errcode::main", __LINE__, MPI_ERR_OTHER, "**envvarparse", 0);
+    ChkMsg( err, MPI_ERR_OTHER, "**envvarparse" );
+    {
+    /* src/util/mpir_cvars.c */
+    char s1[] = "string1";
+     err = MPIR_Err_create_code(MPI_SUCCESS, MPIR_ERR_RECOVERABLE, "errcode::main", __LINE__, MPI_ERR_OTHER, "**envvarparse", "**envvarparse %s", s1 );
+    ChkMsg( err, MPI_ERR_OTHER, "**envvarparse %s" );
+    }
+    /* src/util/mpir_cvars.c */
+    err = MPIR_Err_create_code(MPI_SUCCESS, MPIR_ERR_RECOVERABLE, "errcode::main", __LINE__, MPI_ERR_OTHER, "**cvar_val", 0);
+    ChkMsg( err, MPI_ERR_OTHER, "**cvar_val" );
+    {
+    /* src/util/mpir_cvars.c */
+    char s1[] = "string1";
+    char s2[] = "string2";
+     err = MPIR_Err_create_code(MPI_SUCCESS, MPIR_ERR_RECOVERABLE, "errcode::main", __LINE__, MPI_ERR_OTHER, "**cvar_val", "**cvar_val %s %s", s1, s2 );
+    ChkMsg( err, MPI_ERR_OTHER, "**cvar_val %s %s" );
+    }
     /* src/util/mpir_progress_hook.c */
     err = MPIR_Err_create_code(MPI_SUCCESS, MPIR_ERR_RECOVERABLE, "errcode::main", __LINE__, MPI_ERR_OTHER, "**progresshookstoomany", 0);
     ChkMsg( err, MPI_ERR_OTHER, "**progresshookstoomany" );
diff -ur -x autom4te.cache -x .git a/unusederr.txt b/unusederr.txt
--- a/unusederr.txt	2022-11-08 00:12:29.197399611 +0100
+++ b/unusederr.txt	2022-11-08 00:38:06.108782014 +0100
@@ -19,7 +19,6 @@
 Name **dev|vcrt_get_ptr %s is defined in src/mpi/errhan/errnames.txt:517 but never used
 Name **mktemp_s is defined in src/mpi/errhan/errnames.txt:811 but never used
 Name **pmi_get_clique_size %d is defined in src/pmi/errnames.txt:38 but never used
-Name **cvar_val %s %s is defined in src/mpi/errhan/errnames.txt:865 but never used
 Name **ch4|cancelresp is defined in src/mpid/ch4/errnames.txt:12 but never used
 Name **xpmem_detach is defined in src/mpi/errhan/errnames.txt:928 but never used
 Name **mutex_create is defined in src/mpi/errhan/errnames.txt:499 but never used
@@ -240,7 +239,6 @@
 Name **ch4|pktarraytoosmall is defined in src/mpid/ch4/errnames.txt:4 but never used
 Name **msgget is defined in src/mpi/errhan/errnames.txt:647 but never used
 Name **mpi_attr_get is defined in src/mpi/errhan/errnames.txt:897 but never used
-Name **cvar_val is defined in src/mpi/errhan/errnames.txt:864 but never used
 Name **winget_oob is defined in src/mpi/errhan/errnames.txt:773 but never used
 Name **shmctl %d %d is defined in src/mpi/errhan/errnames.txt:688 but never used
 Name **ofi_max_conn is defined in src/mpid/ch4/netmod/ofi/errnames.txt:106 but never used
@@ -386,7 +384,6 @@
 Name **ucx_nm_str_error is defined in src/mpid/ch4/netmod/ucx/errnames.txt:5 but never used
 Name **mpi_t_init_thread is defined in src/mpi_t/errnames.txt:16 but never used
 Name **encode_buffer is defined in src/mpi/errhan/errnames.txt:801 but never used
-Name **envvarparse is defined in src/mpi/errhan/errnames.txt:862 but never used
 Name **typeinitfail %d is defined in src/mpi/errhan/errnames.txt:197 but never used
 Name **bindportrange %d %d is defined in src/mpi/errhan/errnames.txt:567 but never used
 Name **sock|close_cancel %d %d is defined in src/mpid/ch3/channels/sock/src/errnames.txt:24 but never used
@@ -435,7 +432,6 @@
 Name **mpi_t_pvar_write is defined in src/mpi_t/errnames.txt:53 but never used
 Name **ch4|win_shared_comm is defined in src/mpid/ch4/errnames.txt:54 but never used
 Name **readv %d %s is defined in src/mpi/errhan/errnames.txt:831 but never used
-Name **envvarparse %s is defined in src/mpi/errhan/errnames.txt:863 but never used
 Name **pmi_nameservpublish is defined in src/pmi/errnames.txt:85 but never used
 Name **mq_send is defined in src/mpi/errhan/errnames.txt:662 but never used
 Name **winput_oob is defined in src/mpi/errhan/errnames.txt:772 but never used
