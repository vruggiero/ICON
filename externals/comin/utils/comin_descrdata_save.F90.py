#  @authors 01/2024 :: ICON Community Interface  <comin@icon-model.org>
#
#  SPDX-License-Identifier: BSD-3-Clause
#
#  Please see the file LICENSE in the root of the source tree for this code.
#  Where software is supplied by third parties, it is indicated in the
#  headers of the routines.

from fortran_parse_type import find_type


f2nf_type = {
    "REAL": "NF90_DOUBLE",
    "INTEGER": "NF90_INT",
    "LOGICAL": "NF90_BYTE",
    "CHARACTER": "NF90_CHAR"
}


def iprint(indention, msg):
    print(" "*indention + msg)


def save_component(name, component):
    indent = 4
    if "POINTER" in component.attributes:
        iprint(indent, f"IF (ASSOCIATED(descrdata_obj%{name})) THEN")
        indent += 2

    if "ALLOCATABLE" in component.attributes:
        iprint(indent, f"IF (ALLOCATED(descrdata_obj%{name})) THEN")
        indent += 2

    if component.ndims == 0:
        if component.type == "CHARACTER":
            iprint(indent, f"CALL nf90(nf90_put_att(ncid, NF90_GLOBAL, \"{name}\", TRIM(descrdata_obj%{name})))")
        elif component.type == "LOGICAL":
            iprint(indent, f"CALL nf90(nf90_put_att(ncid, NF90_GLOBAL, \"{name}\", MERGE(1,0,descrdata_obj%{name})))")
        else:
            iprint(indent, f"CALL nf90(nf90_put_att(ncid, NF90_GLOBAL, \"{name}\", descrdata_obj%{name}))")
    else:
        iprint(indent, f"var_id = nf90_utils_def_var(ncid, \"{name}\", {f2nf_type[component.type]}, SHAPE(descrdata_obj%{name}))")
        iprint(indent, f"CALL nf90(nf90_put_var(ncid, var_id, descrdata_obj%{name}))")

    if "POINTER" in component.attributes or "ALLOCATABLE" in component.attributes:
        indent -= 2
        iprint(indent, "ENDIF")


def save_ftype(ftype, prefix=""):
    for name, component in ftype.items():
        if type(component) is dict:
            save_ftype(component, prefix=prefix+name+"%")
        else:
            save_component(prefix+name, component)


print("""!  @authors 01/2024 :: ICON Community Interface  <comin@icon-model.org>
!
!  SPDX-License-Identifier: BSD-3-Clause
!
!  Please see the file LICENSE in the root of the source tree for this code.
!  Where software is supplied by third parties, it is indicated in the
!  headers of the routines.

! *** DO NOT EDIT MANUALLY!  Generated by python script in utils/. DO NOT EDIT MANUALLY! *** !

MODULE comin_descrdata_save

  USE netcdf,                 ONLY: nf90_put_att, nf90_put_var, NF90_GLOBAL, NF90_DOUBLE, &
    &                               NF90_INT, NF90_BYTE, NF90_CHAR
  USE netcdf_utils,           ONLY: nf90_utils_def_var, nf90
  USE comin_plugin_interface, ONLY: t_comin_descrdata_global, t_comin_descrdata_domain

  IMPLICIT NONE

  PUBLIC

CONTAINS

  SUBROUTINE comin_descrdata_save_global(ncid, descrdata_obj)
    INTEGER, INTENT(IN)                        :: ncid
    TYPE(t_comin_descrdata_global), INTENT(IN) :: descrdata_obj
    INTEGER :: var_id
""")

ftype = find_type("../src/comin_descrdata_types.F90", "t_comin_descrdata_global")
save_ftype(ftype)

print("""
  END SUBROUTINE comin_descrdata_save_global

  SUBROUTINE comin_descrdata_save_domain(ncid, descrdata_obj)
    INTEGER, INTENT(IN)                        :: ncid
    TYPE(t_comin_descrdata_domain), INTENT(IN) :: descrdata_obj
    INTEGER :: var_id
""")

ftype = find_type("../src/comin_descrdata_types.F90", "t_comin_descrdata_domain")
save_ftype(ftype)

print("""
  END SUBROUTINE comin_descrdata_save_domain

END MODULE comin_descrdata_save""")
