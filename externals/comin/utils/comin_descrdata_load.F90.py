#  @authors 01/2024 :: ICON Community Interface  <comin@icon-model.org>
#
#  SPDX-License-Identifier: BSD-3-Clause
#
#  Please see the file LICENSE in the root of the source tree for this code.
#  Where software is supplied by third parties, it is indicated in the
#  headers of the routines.

from fortran_parse_type import find_type


def iprint(indention, msg):
    print(" "*indention + msg)


def load_component(name, component):
    indent = 4
    if component.ndims == 0:
        if "ALLOCATABLE" in component.attributes or "POINTER" in component.attributes:
            iprint(indent, f"status = nf90_inquire_attribute(ncid, NF90_GLOBAL, \"{name}\", len=shap(1))")
            iprint(indent, "IF(status == NF90_NOERR) THEN")
            indent += 2
            if component.type == "CHARACTER":
                iprint(indent, f"ALLOCATE(CHARACTER(LEN=shap(1)) :: descrdata_obj%{name})")
            else:
                iprint(indent, f"ALLOCATE(descrdata_obj%{name})")
        if component.type == "LOGICAL":
            iprint(indent, f"CALL nf90(nf90_get_att(ncid, NF90_GLOBAL, \"{name}\", tmp))")
            iprint(indent, f"descrdata_obj%{name} = tmp /= 0")
        else:
            iprint(indent, f"CALL nf90(nf90_get_att(ncid, NF90_GLOBAL, \"{name}\", descrdata_obj%{name}))")
        if "ALLOCATABLE" in component.attributes or "POINTER" in component.attributes:
            indent -= 2
            iprint(indent, "ENDIF")
    else:
        iprint(indent, f"status = nf90_inq_varid(ncid, \"{name}\", var_id)")
        iprint(indent, "IF (status == NF90_NOERR) THEN")
        indent += 2
        if "ALLOCATABLE" in component.attributes or "POINTER" in component.attributes:
            iprint(indent, f"shap(1:{component.ndims}) = nf90_utils_get_shape(ncid, \"{name}\", {component.ndims})")
            iprint(indent, f"ALLOCATE(descrdata_obj%{name}({','.join([f'shap({d})' for d in range(1,component.ndims+1)])}))")
        if component.type == "LOGICAL":
            iprint(indent, "CALL nf90(nf90_get_var(ncid, var_id, tmp))")
            iprint(indent, f"descrdata_obj%{name} = tmp /= 0")
        else:
            iprint(indent, f"CALL nf90(nf90_get_var(ncid, var_id, descrdata_obj%{name}))")
        indent -= 2
        iprint(indent, "ENDIF")


def load_ftype(ftype, prefix=""):
    for name, component in ftype.items():
        if type(component) is dict:
            load_ftype(component, prefix=prefix+name+"%")
        else:
            load_component(prefix+name, component)


print("""!  @authors 01/2024 :: ICON Community Interface  <comin@icon-model.org>
!
!  SPDX-License-Identifier: BSD-3-Clause
!
!  Please see the file LICENSE in the root of the source tree for this code.
!  Where software is supplied by third parties, it is indicated in the
!  headers of the routines.

! *** DO NOT EDIT MANUALLY!  Generated by python script in utils/. DO NOT EDIT MANUALLY! *** !

MODULE comin_descrdata_load

  USE netcdf,                 ONLY: nf90_inquire_attribute, nf90_get_att,      &
    &                               nf90_inq_varid, nf90_get_var, NF90_GLOBAL, &
    &                               NF90_NOERR
  USE netcdf_utils,           ONLY: nf90, nf90_utils_def_var, nf90_utils_get_shape
  USE comin_plugin_interface, ONLY: t_comin_descrdata_global, t_comin_descrdata_domain

  IMPLICIT NONE

  PUBLIC

CONTAINS

  SUBROUTINE comin_descrdata_load_global(ncid, descrdata_obj)
    INTEGER, INTENT(IN)                           :: ncid
    TYPE(t_comin_descrdata_global), INTENT(INOUT) :: descrdata_obj
    INTEGER :: var_id, status
    INTEGER :: tmp  ! <- workaround for LOGICAL
    INTEGER :: shap(5)
""")

ftype = find_type("../src/comin_descrdata_types.F90", "t_comin_descrdata_global")
load_ftype(ftype)

print("""
  END SUBROUTINE comin_descrdata_load_global

  SUBROUTINE comin_descrdata_load_domain(ncid, descrdata_obj)
    INTEGER, INTENT(IN)                           :: ncid
    TYPE(t_comin_descrdata_domain), INTENT(INOUT) :: descrdata_obj
    INTEGER :: var_id, status
    INTEGER :: shap(5)
""")

ftype = find_type("../src/comin_descrdata_types.F90", "t_comin_descrdata_domain")
load_ftype(ftype)

print("""
  END SUBROUTINE comin_descrdata_load_domain

END MODULE comin_descrdata_load""")
