!
!+ Template for derived type MPI_GATHER routine
!
! Description:
!   Template for derived type MPI_gather(V) routine
!   to be included in some module
!   define before inclusion (example):
!
!     #define p_gather_DERIVED p_gather_int
!     #define DERIVED  INTEGER
!     #define MPI_TYPE p_int
!     #include "p_gather_derived.incf"
!
!   Use
!     #undef  MPI_TYPE
!   for derived data types
!
! Current Code Owners:
!    For DWD 3DVAR:                        For COSMO:
!    DWD, Andreas Rhodin                   DWD, Christoph Schraff
!    phone: +49 69 8062 2722               phone: +49 69 8062 2725
!    fax:   +49 69 8062 3721               fax:   +49 69 8062 3721
!    email: andreas.rhodin@dwd.de          email: christoph.schraff@dwd.de
!
! History:
! Version      Date       Name
! ------------ ---------- ----
! V1_1         2008/11/05 Andreas Rhodin
!  First operational 3D-Var release
! V1_5         2009/05/25 Harald Anlauf
!  Fix bug in USE statements; clean up documentation
! V1_10        2010/04/20 Michael Gertz
!  Adaptions for SVN
! V1_13        2011/11/01 Andreas Rhodin
!  changed 3dvar revision numbers (CVS->SVN)
! V1_19        2012-04-16 Harald Anlauf
!  p_gather_derived: extend p_gatherv for use with character(*)
! V1_31        2014-08-21 Robin Faulwetter
!  changes for new write_rttov_prof routine
! V1_49        2016-10-25 Harald Anlauf
!  adjustments for sharing with COSMO
!
! CAUTION: This module is used commonly by the 3DVAR and COSMO main programs.!!!
!!!        Therefore, anybody wanting to introduce a modification to this    !!!
!!!        module in the context of either of these programs must consult    !!!
!!!        the 'current code owner' of this module for the other program,    !!!
!!!        in order to allow for checking that the modification will comply  !!!
!!!        with both program packages. This must be done before the          !!!
!!!        modification is put into the Version Control System (VCS).        !!!
!
! Code Description:
! Language: Fortran 2003.
! Software Standards:
!
! Harald Anlauf   DWD  2008  original code
!------------------------------------------------------------------------------

  SUBROUTINE p_gather_DERIVED (sendbuf, recvbuf, root, comm, recvcounts)

  !-------------------------------------------------------------------
  ! use entities from 3D-Var modules if not provided by including code
  !-------------------------------------------------------------------
#if defined (HAVE_MPI_MOD) && defined (__GFORTRAN__) && (__GNUC__ >= 10)
  USE mpi,              ONLY: MPI_GATHERV
#endif
#ifndef MO_MPI_SOURCE
  USE mo_mpi_dace,      ONLY: MPI_BYTE,       &!
                              d_comm,         &!
                              MPI_SUCCESS,    &!
                              gatherv_args     ! prepare arguments
#ifdef DEBUG
  USE mo_mpi_dace,      ONLY: p_abort,        &! parallel abort routine
                              mype             ! PE number of this task
  USE mo_fortran_units, ONLY: nerr             ! standard error fortran unit
#endif
#endif
  IMPLICIT NONE

#if !defined (HAVE_MPI_MOD) && (defined (__GFORTRAN__) && (__GNUC__ >= 10))
  !-------------------------------------------------------
  ! workaround for missing interfaces in deprecated mpif.h
  !-------------------------------------------------------
  interface
     subroutine MPI_GATHERV (sendbuf, sendcount, sendtype, recvbuf,          &
                             recvcounts, displs, recvtype, root, comm, ierror)
       type(*) ,intent(in)        :: sendbuf   (*) ! send buffer
       integer ,intent(in)        :: sendcount     ! no.elements in sendbuf
       integer ,intent(in)        :: sendtype      ! MPI datatype
       type(*) ,intent(inout)     :: recvbuf   (*) ! recv buffer
       integer ,intent(in)        :: recvcounts(*) ! recv counts
       integer ,intent(in)        :: displs    (*) ! displacements
       integer ,intent(in)        :: recvtype      ! MPI datatype
       integer ,intent(in)        :: root          ! source processor index
       integer ,intent(in)        :: comm          ! communicator
       integer ,intent(out)       :: ierror        ! return value
     end subroutine MPI_GATHERV
  end interface
  interface
     subroutine MPI_COMM_SIZE (comm, size, ierror)
       integer ,intent(in)        :: comm         ! communicator
       integer ,intent(out)       :: size         ! number of processes
       integer ,intent(out)       :: ierror       ! return value
     end subroutine MPI_COMM_SIZE
  end interface
#endif /* (defined (__GFORTRAN__) && (__GNUC__ >= 10)) */

  !---------------------
  ! subroutine arguments
  !---------------------
#ifdef DIMS
  DERIVED           ,INTENT(in)  :: sendbuf DIMS
  DERIVED           ,INTENT(out) :: recvbuf DIMS
#else
  DERIVED           ,INTENT(in)  :: sendbuf (:)
  DERIVED           ,INTENT(out) :: recvbuf (:)
#endif

  INTEGER           ,INTENT(in)  :: root
  INTEGER ,OPTIONAL ,INTENT(in)  :: comm
  INTEGER ,OPTIONAL ,INTENT(in)  :: recvcounts (:)

    INTEGER          :: p_comm, sbuflen, rbuflen, groupsize
    INTEGER          :: p_sendcount
    INTEGER ,POINTER :: p_recvcounts(:), p_rdispls(:)
    INTEGER          :: p_error
    INTEGER          :: bufsize = 0
#if !defined(MPI_TYPE) && !defined(VECTOR)
    DERIVED          :: template
#endif
!   INTEGER          :: count

#ifndef NOMPI

    !-----------------------
    ! check for buffer sizes
    !-----------------------
    sbuflen  = SIZE (sendbuf)
    rbuflen  = SIZE (recvbuf)
#ifdef MPI_TYPE
    bufsize = 1
#else
#define MPI_TYPE MPI_BYTE
#ifdef VECTOR
    bufsize = 0
    IF (rbuflen >  0) bufsize = SIZE (TRANSFER (recvbuf(1), (/'*'/)))
#else
    IF (bufsize == 0) bufsize = SIZE (TRANSFER (template,   (/'*'/)))
#endif
#endif

    !-----------------------------------
    ! derive communicator and group size
    !-----------------------------------
    IF (PRESENT(comm)) THEN
       p_comm = comm
    ELSE
       p_comm = d_comm
    ENDIF
    CALL MPI_COMM_SIZE(p_comm, groupsize, p_error)

    IF (groupsize==1) THEN
      IF (rbuflen /= sbuflen) THEN
        WRITE (0,'(a,2i10)') &
        ' p_gather_DERIVED: groupsize==1 .and. size(sendbuf)/=size(recvbuf):',&
        size(sendbuf), size(recvbuf)
        CALL MPI_ABORT (p_comm, 1, p_error)
        IF (p_error /= MPI_SUCCESS) THEN
          WRITE (0,'(a)') ' MPI_ABORT failed.'
          WRITE (0,'(a,i4)') ' Error =  ', p_error
          STOP
        END IF
      ENDIF
      recvbuf = sendbuf
      RETURN
    ENDIF

!   allocate ()
    !----------------------
    ! call MPI_gatherV ..
    !----------------------
!   if (present (sendcounts)) then
      CALL gatherv_args (bufsize, sbuflen, rbuflen, groupsize, root, p_comm, &
                         recvcounts,                                         &
                         p_sendcount, p_recvcounts, p_rdispls)
      CALL MPI_gatherV (sendbuf, p_sendcount,             MPI_TYPE, &
                        recvbuf, p_recvcounts, p_rdispls, MPI_TYPE, &
                        root, p_comm, p_error)
      DEALLOCATE (p_recvcounts, p_rdispls)
    !-------------------
    ! .. or MPI_gather
    !-------------------
!   else
!     if (rbuflen /= sbuflen) then
!       WRITE (nerr,'(a)') &
!         ' p_gather_DERIVED: size (sendbuf) /= size (recvbuf)'
!       CALL p_abort
!     endif
!     if (sbuflen == 0) return
!     if (mod (sbuflen,groupsize) /= 0) then
!       WRITE (nerr,'(a)') ' p_gather_DERIVED: mod (sbuflen,groupsize) /= 0'
!       CALL p_abort
!     endif
!     count = bufsize * sbuflen / groupsize
!     CALL MPI_gather (sendbuf, count, MPI_TYPE, &
!                      recvbuf, count, MPI_TYPE, root, p_comm, p_error)
!   endif
    !-----------------
    ! check for errors
    !-----------------
#ifdef DEBUG
    IF (p_error /= MPI_SUCCESS) THEN
       WRITE (nerr,'(a,i4,a)') ' MPI_gatherV from ', mype, ' failed.'
       WRITE (nerr,'(a,i4)') ' Error = ', p_error
       CALL p_abort
    END IF
#endif
#else
    recvbuf = sendbuf
#endif

  END SUBROUTINE p_gather_DERIVED
