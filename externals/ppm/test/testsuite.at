AT_INIT ([PPM parallel tests])
AT_COPYRIGHT(
[
 Copyright  (C)  2020  Thomas Jahns <jahns@dkrz.de>

 Redistribution and use in source and binary forms, with or without
 modification, are  permitted provided that the following conditions are
 met:

 Redistributions of source code must retain the above copyright notice,
 this list of conditions and the following disclaimer.

 Redistributions in binary form must reproduce the above copyright
 notice, this list of conditions and the following disclaimer in the
 documentation and/or other materials provided with the distribution.

 Neither the name of the DKRZ GmbH nor the names of its contributors
 may be used to endorse or promote products derived from this software
 without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
])
AT_COLOR_TESTS
m4_define([acx_cpu_time_limit],[1800])
AT_ARG_OPTION_ARG([time-limit],[AS_HELP_STRING([--time-limit],
  [limit the run-time of tests via ulimit -t (default=]acx_cpu_time_limit[)])],
  [AS_IF([expr "$at_optarg" : '\([0-9]*\|unlimited\)$' >/dev/null 2>&1],
     [ulimit -t $at_optarg],
     [echo "invalid cpu time limit $at_optarg" >&2
      AS_EXIT(1)])],
  [ulimit -t acx_cpu_time_limit])
AT_BANNER([core routines])
AT_SETUP([library abort])
AT_KEYWORDS([core abort hybrid Fortran])
AT_SKIP_IF([test x"$FC" = xno])
AT_CHECK([$NOMPI_LAUNCH "$abs_builddir/test_abort_ppm"],,[ignore],[ignore])
AT_CLEANUP
AT_SETUP([qsort])
AT_KEYWORDS([core qsort hybrid Fortran])
AT_SKIP_IF([test x"$FC" = xno])
AT_CHECK([$NOMPI_LAUNCH "$abs_builddir/test_qsort"],,[ignore],[ignore])
AT_CLEANUP
AT_SETUP([insertion-sort])
AT_KEYWORDS([core insertion-sort hybrid Fortran])
AT_SKIP_IF([test x"$FC" = xno])
AT_CHECK([$NOMPI_LAUNCH "$abs_builddir/test_insertion_sort"],,[ignore],[ignore])
AT_CLEANUP
AT_SETUP([binary search])
AT_KEYWORDS([core bsearch hybrid Fortran])
AT_SKIP_IF([test x"$FC" = xno])
AT_CHECK([$NOMPI_LAUNCH "$abs_builddir/test_bsearch"],,[ignore],[ignore])
AT_CLEANUP
AT_SETUP([heap data structure])
AT_KEYWORDS([core heap hybrid Fortran])
AT_SKIP_IF([test x"$FC" = xno])
AT_CHECK([$NOMPI_LAUNCH "$abs_builddir/test_heap"],,[ignore],[ignore])
AT_CLEANUP
AT_SETUP([string conversion])
AT_KEYWORDS([core strio Fortran])
AT_SKIP_IF([test x"$FC" = xno])
AT_CHECK([$NOMPI_LAUNCH "$abs_builddir/test_strio"],,[ignore],[ignore])
AT_CLEANUP
AT_SETUP([posix interface])
AT_KEYWORDS([core posix Fortran])
AT_SKIP_IF([test x"$FC" = xno])
AT_CHECK([$NOMPI_LAUNCH "$abs_builddir/test_posix_f"],,[ignore],[ignore])
AT_CLEANUP
AT_SETUP([extents])
AT_KEYWORDS([core extents Fortran])
AT_SKIP_IF([test x"$FC" = xno])
AT_CHECK([$NOMPI_LAUNCH "$abs_builddir/test_extents"],,[ignore],[ignore])
AT_CLEANUP
AT_SETUP([Kahan summation, Fortran variant])
AT_SKIP_IF([test x"$FC" = xno])
AT_KEYWORDS([core kahan sum Fortran])
AT_CHECK([$NOMPI_LAUNCH "$abs_builddir/test_ddp_math"],,[ignore],[ignore])
AT_CLEANUP
AT_SETUP([Kahan summation, C variant])
AT_KEYWORDS([core kahan sum C])
AT_CHECK([$NOMPI_LAUNCH "$abs_builddir/test_ddp_math_c"],,[ignore],[ignore])
AT_CLEANUP
AT_SETUP([Distributed Kahan summation])
AT_SKIP_IF([test x"$USE_MPI" != xyes || test x"$MPI_LAUNCH" = xtrue])
AT_KEYWORDS([ppm kahan sum C])
AT_CHECK(["$LIBTOOL" --mode=execute "$MPI_LAUNCH" -n 4 "$abs_builddir/test_ddp_math_mp"],
,[ignore],[ignore])
AT_CLEANUP
AT_SETUP([checksums])
AT_KEYWORDS([core checksum md5 Fortran])
AT_SKIP_IF([test x"$FC" = xno])
AT_CHECK([$NOMPI_LAUNCH "$abs_builddir/test_checksum"],,[ignore],[ignore])
AT_CLEANUP
AT_SETUP([Fortran IEEE module conformance])
AT_KEYWORDS([core IEEE Fortran])
AT_SKIP_IF([test x"$FC" = xno])
AT_CHECK([$NOMPI_LAUNCH "$abs_builddir/test_ieee_emulation"],,[ignore],[ignore])
AT_CLEANUP
AT_SETUP([random number generation])
AT_KEYWORDS([core random Fortran])
AT_SKIP_IF([test x"$FC" = xno])
AT_CHECK([$NOMPI_LAUNCH "$abs_builddir/test_irand"],,[ignore],[ignore])
AT_CLEANUP
AT_SETUP([sparse mask index])
AT_KEYWORDS([core sparse-mask-index Fortran])
AT_SKIP_IF([test x"$FC" = xno])
AT_CHECK([$NOMPI_LAUNCH "$abs_builddir/test_sparse_mask_index"],,[ignore],[ignore])
AT_CLEANUP
AT_SETUP([compact mask index])
AT_KEYWORDS([core compact-mask-index Fortran])
AT_SKIP_IF([test x"$FC" = xno])
AT_CHECK([$NOMPI_LAUNCH "$abs_builddir/test_compact_mask_index"],,[ignore],[ignore])
AT_CLEANUP
AT_SETUP([combinatorics, C interface])
AT_KEYWORDS([core combinatorics C])
AT_CHECK([$NOMPI_LAUNCH "$abs_builddir/test_combinatorics_c"],,[ignore],[ignore])
AT_CLEANUP
AT_SETUP([combinatorics, Fortran interface])
AT_KEYWORDS([core combinatorics Fortran])
AT_SKIP_IF([test x"$FC" = xno])
AT_CHECK([$NOMPI_LAUNCH "$abs_builddir/test_combinatorics"],,[ignore],[ignore])
AT_CLEANUP
AT_SETUP([factorization, C interface])
AT_KEYWORDS([core factorization C])
AT_CHECK([$NOMPI_LAUNCH "$abs_builddir/test_factorization"],,[ignore],[ignore])
AT_CLEANUP
AT_BANNER([partitioning routines])
AT_SETUP([graph csr representation, Fortran interface])
AT_KEYWORDS([ppm graph csr Fortran])
AT_SKIP_IF([test x"$FC" = xno])
AT_CHECK([$NOMPI_LAUNCH "$abs_builddir/test_graph_csr"],,[ignore],[ignore])
AT_CLEANUP
AT_SETUP([set partition base])
AT_KEYWORDS([ppm set partition Fortran])
AT_SKIP_IF([test x"$FC" = xno])
AT_CHECK([$NOMPI_LAUNCH "$abs_builddir/test_set_partition_base"],,[ignore],[ignore])
AT_CLEANUP
AT_SETUP([set partition])
AT_KEYWORDS([ppm set partition Fortran])
AT_SKIP_IF([test x"$FC" = xno])
AT_CHECK([$NOMPI_LAUNCH "$abs_builddir/test_set_partition"],,[ignore],[ignore])
AT_CLEANUP
AT_SETUP([set repartition])
AT_KEYWORDS([ppm set partition Fortran])
AT_SKIP_IF([test x"$FC" = xno])
AT_CHECK([$NOMPI_LAUNCH "$abs_builddir/test_set_repartition"],,[ignore],[ignore])
AT_CLEANUP
AT_SETUP([uniform partition, C interface])
AT_KEYWORDS([ppm uniform partition C])
AT_CHECK([$NOMPI_LAUNCH "$abs_builddir/test_uniform_partition_c"],,[ignore],[ignore])
AT_CLEANUP
AT_SETUP([uniform partition, Fortran interface])
AT_KEYWORDS([ppm uniform partition Fortran])
AT_SKIP_IF([test x"$FC" = xno])
AT_CHECK([$NOMPI_LAUNCH "$abs_builddir/test_uniform_partition"],,[ignore],[ignore])
AT_CLEANUP
AT_SETUP([balanced 2D partition])
AT_KEYWORDS([ppm 2d partition balance Fortran])
AT_SKIP_IF([test x"$FC" = xno])
AT_CHECK([$NOMPI_LAUNCH "$abs_builddir/test_m1d"],,[ignore],[ignore])
AT_CLEANUP
AT_BANNER([MPI-parallel components])
AT_SETUP([strided extent transfer])
AT_KEYWORDS([core strided-extent MPI Fortran])
AT_SKIP_IF([test x"$FC" = xno || test x"$USE_MPI" != xyes || test x"$MPI_LAUNCH" = xtrue])
AT_CHECK(["$LIBTOOL" --mode=execute "$MPI_LAUNCH" -n 2 "$abs_builddir/test_strided_extents"],,
  [ignore],[ignore])
AT_CLEANUP
AT_SETUP([size-invariant inter-rank repartitioning])
AT_SKIP_IF([test x"$FC" = xno || test x"$USE_MPI" != xyes || test x"$MPI_LAUNCH" = xtrue])
AT_KEYWORDS([ppm set repartition MPI Fortran])
AT_CHECK(["$LIBTOOL" --mode=execute "$MPI_LAUNCH" -n 2 "$abs_builddir/test_set_repartition_mp"],
,[ignore],[ignore])
AT_CLEANUP
AT_SETUP([distributed graph data structure])
AT_SKIP_IF([test x"$FC" = xno || test x"$USE_MPI" != xyes || test x"$MPI_LAUNCH" = xtrue])
AT_KEYWORDS([ppm graph MPI Fortran])
AT_CHECK(["$LIBTOOL" --mode=execute "$MPI_LAUNCH" -n 3 "$abs_builddir/test_graph_dist_mp"],
,[ignore],[ignore])
AT_CLEANUP
AT_SETUP([distributed array C tests])
AT_SKIP_IF([test x"$ENABLE_DISTRIBUTED_ARRAY_C" = xno || test x"$MPI_LAUNCH" = xtrue])
AT_KEYWORDS([ppm distarray MPI RMA C])
AT_CHECK(["$LIBTOOL" --mode=execute "$MPI_LAUNCH" -n 4 "$abs_builddir/test_distributed_array_c_mp"],
,[ignore],[ignore])
AT_CLEANUP
AT_SETUP([distributed array Fortran tests])
AT_SKIP_IF([test x"$FC" = xno || test x"$USE_MPI" != xyes || test x"$MPI_LAUNCH" = xtrue])
AT_KEYWORDS([ppm distarray MPI RMA Fortran])
AT_CHECK(["$LIBTOOL" --mode=execute "$MPI_LAUNCH" -n 2 "$abs_builddir/test_distributed_array_mp"],
,[ignore],[ignore])
AT_CLEANUP
