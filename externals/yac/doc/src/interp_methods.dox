# Copyright (c) 2024 The YAC Authors
#
# SPDX-License-Identifier: CC-BY-4.0

/**
 * \page interp_methods Interpolation methods

\section intro_interp_methods Introduction
 
YAC implements a number of interpolation methods. All available
interpolation methods are compatible with all grids supported
by YAC. An interpolation that is defined in the coupling
configuration (generated through the interface and/or read in from a
\ref yaml_file "configuration file") consists of a interpolation
stack (\ref interp_stack), which in turn consists of a number of
interpolation methods.
 
\section method_list List of interpolation methods

- \subpage interp_method_avg
- \subpage interp_method_ncc
- \subpage interp_method_conserv
- \subpage interp_method_file
- \subpage interp_method_fixed
- \subpage interp_method_hcsbb
- \subpage interp_method_nnn
- \subpage interp_method_rbf
- \subpage interp_method_spmap
- \subpage interp_method_creep
- \subpage interp_method_callback

*/

/**
 * \page interp_method_avg Average interpolation
   \tableofcontents

\section avg_desc Description

This method supports source fields that are defined on grid vertices
or cells. In case it is defined on cells, the user has to provide
coordinates for the cells, for example cell centers.

For each target point, this method searches for a matching source
cell. If the source field is defined on the cells, YAC will generate
a grid based on the provided coordinates and will use this instead
of the original source grid.

The method will then apply the selected weighting method to compute
the interpolation stencil for all target points using the non-masked
corners of the matching source cells.

\image html corner_out_cube_high_coarse_with_icon_fine.png "Source field"

\section avg_opt Options

- Weighting type (default: `weighted: arithmetic_average`)

  - arithmetic_average

    Simple average

    \image html avg_avg_icon_fine_with_cube_coarse.png "Target field"

  - distance_weighted

    Inverse distance weighting

    \image html avg_dist_icon_fine_with_cube_coarse.png "Target field"

  - barycentric_coordinate

    YAC will first triangulate the source cell and then find the matching
    source triangle for the target point. The weights are then computed
    based on the barycentric coordinates of the target point within
    this triangle.

    \image html avg_bary_icon_fine_with_cube_coarse.png "Target field"

- Partial coverage (default: `partial_coverage: false`)

  Target points that match with source cells that have at least one
  masked corner will not be interpolated by this interpolation
  method, if partial_coverage is set to false.

\section avg_yaml YAML example

\code{.yaml}
interpolation:
  - average:
      weighted: barycentric_coordinate
      partial_coverage: true
\endcode

 */

/**
 * \page interp_method_ncc Nearest Corner Cells interpolation
   \tableofcontents

\section ncc_desc Description

This method only supports source fields that are defined on grid cells.

For each target point, this method first searches for a matching source
cell. Afterwards it determines the corner of this cell, which is the closest
to the target point. And finally all unmasked source cells connected to this
corner are selected.

The method will then apply the selected weighting method to compute
the interpolation stencil for all target points using the selected cells.

This method produces results that are very similar to \ref interp_method_avg for
cell-based source fields. The major differences occure close to grid or mask
edges, where the \ref interp_method_avg would fail. This property makes the Nearest
Corner Cells interpolation method a good fallback option for point-based
interpolation methods (e.g. \ref interp_method_avg or \ref interp_method_hcsbb).

\section ncc_opt Options

- Weighting type (default: `weighted: arithmetic_average`)

  - arithmetic_average

    Simple average

  - distance_weighted

    Inverse distance weighting

- Partial coverage (default: `partial_coverage: false`)

  Target points for which at least one of the selected source cells is
  masked, will not be interpolated by this interpolation
  method, if partial_coverage is set to false.

\section ncc_yaml YAML example

\code{.yaml}
interpolation:
  - ncc:
      weighted: distance_weighted
      partial_coverage: true
\endcode

 */

/**
 * \page interp_method_conserv Conservative interpolation
   \tableofcontents

\section conserv_desc Description

This interpolation method assumes that the source field values are
fluxes defined on the source grid cells.

For each target cell, this method searches for all overlapping
source cells. Based on the overlap areas between the source and
target grid cell the flux values for the target field will be
computed.

A first order following
[Jones (1999)](https://doi.org/10.1175/1520-0493(1999)127%3C2204:FASOCR%3E2.0.CO;2)
and a second order following
[Kritsikis et al. (2017)](https://doi.org/10.5194/gmd-10-425-2017)
are supported.

When computing the intersection areas between source and target cells,
YAC differentiates between edges defined on great circles and latitude
circles. This is especially important for cells from regular grids that
are located close to the poles. Therefore, in contrast to other
software that also provides this interpolation method, YAC does not
require the usage of coordinate transformations close to the poles.

\image html cell_out_cube_coarse_with_icon_fine.png "Source Field"

\section conserv_opt Options

- Order (default: `order: 1`)

  - 1

    First order conservative interpolation

    \image html conserv_1_icon_fine_with_cube_coarse.png "Target field"

  - 2

    Second order conservative interpolation.

    In contrast to first order conservative, this option generates a much
    bigger stencil. In order to do that, a gradient of the source field is
    computed for each source cell based on its neighbouring cells. If the
    gradient computation fails, a zero-gradient will be used for the respective
    source cell, which is basically a fallback to first order conservative
    interpolation.

    \image html conserv_2_icon_fine_with_cube_coarse.png "Target field"

- Enforced conservation (default: `enforced_conservation: false`)

  If true, all weights for a target cell will be scaled such that the sum
  of them is 1.0.

  For second order this option is not supported and only the value
  false is allowed.

- Partial coverage (default: `partial_coverage: false`)

  If the value is false, target cells that are not completely covered by
  non-masked source cells will not be interpolated.

- Area normalisation (default: `normalisation: destarea`)

  Selects the area normalisation method as described in the SCRIP User
  manual (Jones, Philip. (1998). A User's Guide for SCRIP: A Spherical
  Coordinate Remapping and Interpolation Package, Version 1.4.).

  Only for target cells that are partially covered by non-masked source
  cells the different options produce different results.

  - fracarea

    The sum of the area of the non-mask source cells overlapping with the target
    cell is used to normalise the respective target field value.

    This option gives reasonable flux values but may not be locally
    conservative.

  - destarea

    The target cell area is used to normalise the target field value.

    This option might generate unreasonable flux values but it ensures
    local conservation of the source flux.

\section conserv_yaml YAML example

\code{.yaml}
interpolation:
  - conservative:
      order: 1
      enforced_conservation: false
      partial_coverage: false
      normalisation: fracarea
\endcode

 */

/**
 * \page interp_method_file Interpolation from weight file
   \tableofcontents

\section file_desc Description

This interpolation method generates an interpolation based on the contents
of a provided weight file. The weight file has to be in the YAC weight file
format. The weight file can be generated by writing any interpolation stack
to file (see \ref interp_stack). A weight file can contain weight based
interpolation stencils and fixed values.

To reduce memory consumption per process, the contents of the weight file
is read in and distributed by multiple processes (if available) in parallel.

As for any interpolation method, the file method can also be combined with
other methods in the \ref interp_stack.

YAC reads the weight files in parallel. This parallel input can be configed
as described here: \ref io_config_detail.

\section file_opt Options

- filename (maximum length is \ref YAC_MAX_FILE_NAME_LENGTH)

  Path to the weight file.

\section file_yaml YAML example

\code{.yaml}
interpolation:
  - user_file:
      filename: weight_file.nc
\endcode

 */

/**
 * \page interp_method_fixed Fixed value interpolation
   \tableofcontents

\section fixed_desc Description

This interpolation method assigns a user-defined fixed value to
all target points.

When writing an \ref interp_stack to file, fixed values will also
be included in the resulting weight file.

This interpolation method is usually used as the last one in an
\ref interp_stack. It can be used to set fill values. Another
use case is debugging. A fixed value can help to identify
target points for which the other interpolation methods in the
stack were not able to produce a result.

\section fixed_opt Options

- Fixed value (mandatory)

\section fixed_yaml YAML example

\code{.yaml}
interpolation:
  - fixed:
      user_value: -1.0
\endcode

 */

/**
 * \page interp_method_hcsbb Hybrid cubic spherical Bernstein-Bézier patch interpolation
   \tableofcontents

\section hcsbb_desc Description


The Hybrid cubic spherical Bernstein-Bézier (short: HCSBB) patch
interpolation method is based on
[Alfeld, P. et al. (1996)](https://doi.org/10.1016/0167-8396(95)00030-5).
It is implemented for source fields defined on grid cell or corner points.

The interpolation method first triangulates the source grid. Then the
derivatives of the source field across the edges of the triangles are
estimated. Using these, triangular patches from a blend of spherical
Bernstein-Bézier polynomials are constructed which are used for the
interpolation of the target points.

The resulting target field will always have a contiguous first derivative.

The Patch recovery interpolation method
([Zienkiewicz, O. et al. (1992)](https://doi.org/10.1016/0168-874X(94)00054-J)),
which was in included in YAC1 and is implemented in the
[Earth System Modeling Framework](https://earthsystemmodeling.org/) does
not guarantee the above mentioned property, which is why we implemented
HCSBB in YAC2 as a replacement.

This interpolation method is computationally expensive and produces a
quite big interpolation stencil.

\image html corner_out_cube_coarse_with_icon_fine.png "Source field"
\image html hcsbb_icon_fine_with_cube_coarse.png "Target field"

\section hcsbb_opt Options

HCSBB currently has no option that can be configured by the user.

\section hcsbb_yaml YAML example

\code{.yaml}
interpolation:
  - bernstein_bezier
\endcode

 */

/**
 * \page interp_method_nnn N-Nearest-Neighbour interpolation
   \tableofcontents

\section nnn_desc Description

This method supports source fields that are defined on points at the
grid corners, cells, or edges.

For each target point, this method searches for the "n" nearest source
points. Using the weighting method selected by the user, the
interpolation stencil will be generated from the found source points.

Grid connection information is not taken into account by this
interpolation method.

\image html corner_out_cube_high_coarse_with_icon_fine.png "Source field"

\section nnn_opt Options

Remark: Here distances between two points on the surface of a unit sphere
are defined as the angle between two vectors that point from the center of
the sphere to the two points. In the configuration file, these distances have
to be provided in degree.

- Number of source points per target point (mandatory)

- Weighting method (default: `weighted: arithmetic_average`)

  - arithmetic_average

    Simple average

    <table>
    <caption>Target field</caption>
    <tr><th align="center">n = 1<th align="center">n = 4<th align="center">n = 9
    <tr>
      <td>
        \image html 1nn_avg_icon_fine_with_cube_coarse.png ""
      </td>
      <td>
        \image html 4nn_avg_icon_fine_with_cube_coarse.png ""
      </td>
      <td>
        \image html 9nn_avg_icon_fine_with_cube_coarse.png ""
      </td>
    </tr>
    </table>
\n
  - distance_weighted

    Inverse distance weighting

    <table>
    <caption>Target field</caption>
    <tr><th align="center">n = 1<th align="center">n = 4<th align="center">n = 9
    <tr>
      <td>
        \image html 1nn_dist_icon_fine_with_cube_coarse.png ""
      </td>
      <td>
        \image html 4nn_dist_icon_fine_with_cube_coarse.png ""
      </td>
      <td>
        \image html 9nn_dist_icon_fine_with_cube_coarse.png ""
      </td>
    </tr>
    </table>
\n
  - gauss_weighted

    Gaussian filter

    This method has an additional optional scaling parameter.\n
    Through empirical tests a good default value has be determined.
    (default: `gauss_scale: YAC_INTERP_NNN_GAUSS_SCALE_DEFAULT`)

    <table>
    <caption>Target field</caption>
    <tr><th align="center">n = 1<th align="center">n = 4<th align="center">n = 9
    <tr>
      <td>
        \image html 1nn_gauss_icon_fine_with_cube_coarse.png ""
      </td>
      <td>
        \image html 4nn_gauss_icon_fine_with_cube_coarse.png ""
      </td>
      <td>
        \image html 9nn_gauss_icon_fine_with_cube_coarse.png ""
      </td>
    </tr>
    </table>
\n
  - zero

    Zero weight

    Sets the weight to zero (number of source points per target has to be 1). \n
    This method can be useful if a weight file generated by YAC is supposed to
    be used by another software that does not support the \ref interp_method_fixed.
    In this case this option can be used to set target points to "0.0".

- Maximum search distance (default: `max_search_distance: 0.0`)

  Valid range: 0.0 <= max_search_distance < 180.0

  A distance of 0.0 results in an unlimited search distance.

  If there are less than the specified number of source points within the
  maximum search distance, then the respective target point will not be
  interpolated by this method.

\section nnn_yaml YAML example

\code{.yaml}
interpolation:
  - nnn:
      n: 4
      weighted: arithmetic_average
      max_search_distance: 5.0
\endcode

 */

/**
 * \page interp_method_rbf Radial basis function interpolation
   \tableofcontents

\section rbf_desc Description

This method supports source fields that are defined on points at the
grid corners, cells, or edges. It is based on
"Reinheimer, J., 2018:  Vector Field Interpolation using Radial Basis Functions.  pp 68.".

For each target point this method searches for the n nearest neighbours and then computes
the weights based on the distances between the source points and the target point using
the selected radial basis functions.

\image html corner_out_cube_high_coarse_with_icon_fine.png "Source field"

\section rbf_opt Options

- Number of source points per target point (default: `n: 9`)

- Scaling factor (default: `rbf_scale: YAC_INTERP_RBF_SCALE_DEFAULT`)

- Radial basis function (default: `rbf_kernel: gauss_kernel`)

  - gauss_kernel

    Gaussian function

    <table>
    <caption>Target field</caption>
    <tr><th align="center">n = 1<th align="center">n = 4<th align="center">n = 9
    <tr>
      <td>
        \image html 1_rbf_gauss_icon_fine_with_cube_coarse.png ""
      </td>
      <td>
        \image html 4_rbf_gauss_icon_fine_with_cube_coarse.png ""
      </td>
      <td>
        \image html 9_rbf_gauss_icon_fine_with_cube_coarse.png ""
      </td>
    </tr>
    </table>

- Maximum search distance (default: `max_search_distance: 0.0`)

  Valid range: 0.0 <= max_search_distance < 180.0

  A distance of 0.0 results in an unlimited search distance.

  If there are less than the specified number of source points within the
  maximum search distance, then the respective target point will not be
  interpolated by this method.

\section rbf_yaml YAML example

\code{.yaml}
interpolation:
  - rbf
      n: 4
      rbf_kernel: gauss_kernel
      max_search_distance: 5.0
\endcode

 */

/**
 * \page interp_method_spmap Source to Target mapping
   \tableofcontents

\section spmap_desc Description

This method supports source fields that are defined on cells.

For each source cell this method searches for the nearest target cell.
If set, it will discard all target cells that are further away then the
user provided maximum search distance. The source cell data is then
distributed to all non-masked targets that are within the user provided
spread distance around the initially found target cell. If multiple
source cells contribute to a target cell, their contributions are
summed up. Target cells not associated with any source cell will not
get any value.

The user can choose between multiple options how the data from one
source cell is distributed among the associated target cells.

There are also multiple scaling options available, which can scale the
source and/or target field based on the cell areas of the associated
source/target cells. In case river runoff is provided/expected by
the components as a flux, this can be used to ensure conservation.

This method has been implemented in particular to cover the mapping of
the hydrological discharge. This quantity is provided on selected
cells at the coastline. In
[ICON](https://code.mpimet.mpg.de/projects/iconpublic), the
discharge is assembled at coastal land cells and then stored on
the nearest ocean cells on the donor grid. The goal of all other
interpolation schemes is to generate an interpolation for target
cells. In contrast to that, this method aims to be mass conserving
and not to loose any water from the donor cells.

\image html runoff_atm.png "Source field from atmosphere on ocean coast cells"

\section spmap_opt Options

Remark: Here distances between two points on the surface of a unit sphere
are defined as the angle between two vectors that point from the center of
the sphere to the two points. In the configuration file, these distances have
to be provided in degree.

- Spread distance (default: `spread_distance: 0.0`)

  Valid range: 0.0 <= spread_distance < 90.0

  A distance of 0.0 results in the source field values being assigned
  to the single closest target point.

- Maximum search distance (default: `max_search_distance: 0.0`)

  Valid range: 0.0 <= max_search_distance < 180.0

  A distance of 0.0 results in an unlimited search distance.

- Weighting type (default: `weighted: arithmetic_average`)

  - arithmetic_average

    Simple average

    <table>
    <caption>Target field on ocean</caption>
    <tr>
      <th align="center">spread_distance = 0.0</th>
      <th align="center">spread_distance = 0.5</th>
      <th align="center">spread_distance = 1.0</th>
      <th align="center">spread_distance = 2.0</th>
    <tr>
      <td>
        \image html runoff_ocn_avg_0.0.png ""
      </td>
      <td>
        \image html runoff_ocn_avg_0.5.png ""
      </td>
      <td>
        \image html runoff_ocn_avg_1.0.png ""
      </td>
      <td>
        \image html runoff_ocn_avg_2.0.png ""
      </td>
    </tr>
    </tr>
    </table>

  - distance_weighted

    Inverse distance weighted

    <table>
    <caption>Target field on ocean</caption>
    <tr>
      <th align="center">spread_distance = 0.0</th>
      <th align="center">spread_distance = 0.5</th>
      <th align="center">spread_distance = 1.0</th>
      <th align="center">spread_distance = 2.0</th>
    </tr>
    <tr>
      <td>
        \image html runoff_ocn_dist_0.0.png ""
      </td>
      <td>
        \image html runoff_ocn_dist_0.5.png ""
      </td>
      <td>
        \image html runoff_ocn_dist_1.0.png ""
      </td>
      <td>
        \image html runoff_ocn_dist_2.0.png ""
      </td>
    </tr>
    </table>

- Scaling type (default: `scale: none`)

  - none

    No scaling

    The sum of the weights for each source cell is 1.0.

    This can be used in case the source and target field are not provided
    as a flux\n
    (for example: source/target field unit = `m^3/s`).

  - srcarea

    Source cell area

    All weights are scaled by the area of the associated source cell.
    Therefore, weights for each source cell sum to its area.

    This can be used in case the source field is provided as a flux
    while the target field is not\n
    (for example: source field unit = `m/s`; target field unit = `m^3/s`).

  - invtgtarea

    Inverse target area

    All weights are scaled by the inverse area of the associated target cell.

    This can be used in case the target field is provided as a flux
    while the source field is not\n
    (for example: source field unit = `m^3/s`; target field unit = `m/s`).

  - fracarea

    Fractional area

    All weights are scaled by the area of the associated source cell and the
    inverse area of the associated target cell.

    This can be used in case the source and target field is provided
    as a flux\n
    (for example: source/target field unit = `m/s`).

- src_sphere_radius (default: `src_sphere_radius: 1.0`)

  Sphere radius used for the area computation of the source cells.

- tgt_sphere_radius (default: `tgt_sphere_radius: 1.0`)

  Sphere radius used for the area computation of the target cells.

\section spmap_yaml YAML example

\code{.yaml}
interpolation:
  - source_to_target_map:
      weighted: arithmetic_average
      scale: none
      spread_distance: 0.5
      max_search_distance: 3.6
      src_sphere_radius: 1.0
      tgt_sphere_radius: 6371000.0
\endcode

 */

/**
 * \page interp_method_creep Creep Fill
   \tableofcontents

\section creep_desc Description

This method supports target fields that are defined on points at the
grid corners or cells.

Creep fill is an extrapolation method described in
[Kara, A. Birol, Alan J. Wallcraft, and Harley E. Hurlburt. " A Correction for Land Contamination of Atmospheric Variables near Land–Sea Boundaries". Journal of Physical Oceanography 37.4 (2007): 803-818.]( https://doi.org/10.1175/JPO2984.1)
The implementation in YAC is similar to this. For all unmapped target points the
method will check the interpolation status of its neighboring target points. If
successfully interpolated neighbor points are available, the respective unmapped
point will be interpolated based on their results. This check will be repeated
until all target points are interpolated or a specified number of iterations of
the algorithm is reached.

In the following example a source field with a land mask (grey cells are masked ones)
is interpolated to a finer ocean grid missing the land cells. A
\ref interp_method_conserv "1st order conservative interpolation" is being used.

\image html creep_src.png "Source field with target grid overlayed"

The target field as a number of non-interpolated cells (grey cells) that occure
due to mismatches between the source mask and the the target ocean grid. The
creep fill interpolation method is one option to fill these cells.

\image html creep_no.png "Target field after 1st order conservative interpolation"

\section creep_opt Options

- Creep distance (default: `creep_distance: -1`)

  Valid range: -1 <= creep_distance

  Is the number of interations for the creep fill algorithm. A creep distance
  of -1 signals the interpolation to execute the algorithm until no additional
  target points can be interpolated by this method.

  <table>
  <caption>Target field with additional creep fill interpolation (grey cell are not being interpolated)</caption>
  <tr>
    <th align="center">creep_distance =  0</th>
    <th align="center">creep_distance =  1</th>
    <th align="center">creep_distance =  2</th>
    <th align="center">creep_distance =  4</th>
  </tr>
  <tr>
    <td>
      \image html creep_0.png ""
    </td>
    <td>
      \image html creep_1.png ""
    </td>
    <td>
      \image html creep_2.png ""
    </td>
    <td>
      \image html creep_4.png ""
    </td>
  </tr>
  <tr>
    <th align="center">creep_distance =  8</th>
    <th align="center">creep_distance = 16</th>
    <th align="center">creep_distance = 32</th>
    <th align="center">creep_distance = -1</th>
  </tr>
  <tr>
    <td>
      \image html creep_8.png ""
    </td>
    <td>
      \image html creep_16.png ""
    </td>
    <td>
      \image html creep_32.png ""
    </td>
    <td>
      \image html creep_-1.png ""
    </td>
  </tr>
  </table>

\section creep_vs_1NN Creep fill vs. 1NNN

Another method to fill the missing target cells in the example would have
been \ref interp_method_nnn.

However, this method does not take grid connectivity into account, which
leads to obvious differences in the interpolation result.

\image html creep_vs_1NN.png "Target field with 1NN instead of creep"

\section creep_yaml YAML example

\code{.yaml}
interpolation:
  - creep:
      creep_distance: -1
\endcode

 */

/**
 * \page interp_method_callback User callback interpolation
   \tableofcontents

\section callback_desc Description

This interpolation method allows the user to compute the interpolation
weight at runtime and provide them to YAC to be used for the coupling.

The interpolation method first searches for matching source cells for all
target points that have to be interpolated. Afterwards a user provided
weight computation function (\ref yac_func_compute_weights) is called for all
of these target points on the processes which have the required sources
cell in their local grid data. The weights returned by this function will
later be used for the interpolation.

The weight computation function is provided through the
\ref yac_cadd_compute_weights_callback interface. In addition,
he can also provide a data pointer, which is later passed to the function.

\section callback_opt Options

- Callback function key

  Key that that was passed to \ref yac_cadd_compute_weights_callback, which
  allows YAC to identify the weight computation function to be used.

\section callback_yaml YAML example

\code{.yaml}
interpolation:
  - user_callback:
      func_compute_weights: compute_weights_callback

\endcode

 */
