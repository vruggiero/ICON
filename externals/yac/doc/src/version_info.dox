# Copyright (c) 2024 The YAC Authors
#
# SPDX-License-Identifier: CC-BY-4.0

/**
 * \page version_info Condensed release information

\section version_340 Version 3.4.0 (Sep 2024)

- various fixes
- the coupling configuration file now accepts array of grid names for each
  coupling
- rework of internal implemention of NNN search
- adds support for grids containing only vertices and no cells
  (\ref yac_cdef_grid_cloud and \ref yac.CloudGrid)
- vtk file generated by tool `weights2vtk` now also contains source and target
  ids for all links
- the \ref interp_method_nnn "NNN"
  \ref YAC_INTERP_NNN_ZERO "zero weighting option" now produces links that all
  use the same source cell (should be much faster)
- adds new interface for querying the calendar (\ref yac_cget_calendar)
- various improvements for plot_weights.py, including:
  - fix for the extent calculation
  - configurable projection
  - add stencil-only flag to plot only cells that are involved at the
    highlighted stencil
  - improve visualization
- adds feature that allows the user to define whether YAC aborts or not in case
  a coupling was defined, but at least one of the two associated fields was not
  defined (see
  \ref yaml_missing_definition_is_fatal "missing_definition_is_fatal configuration file flag")
- adds new interface for computing cell areas
  (\ref yac_basic_grid_compute_cell_areas, \ref yac_ccompute_grid_cell_areas,
   \ref yac::yac_fcompute_grid_cell_areas "yac_fcompute_grid_cell_areas", and
   \ref yac.Grid.compute_grid_cell_areas)
- adds debug options which writes out all user provided definitions
  (components, grid, field)
  - configurable via configuration file (\ref yaml_include_definitions)
  - new "include_definitions"-argument for interfaces
    \ref yac_cset_config_output_file, \ref yac_cset_config_output_file_instance,
    \ref yac::yac_fset_config_output_file, and
    \ref yac.YAC.set_config_output_file
- debuggging tool `weights2vtk` now supports weight file generated by the CDOs
- adds new debugging tool `debug_grid2vtk` that can convert a debug grid
  NetCDF file written by YAC to a vkt file, which is easiert to visualize using
  for example Paraview

\section version_330 Version 3.3.0 (Jul 2024)

- various fixes
- adds new `max_search_distance`-Option to \ref interp_method_nnn
- reworks writing out of configurations files
  - removes `yac_cdisable_config_output`/`yac_cdisable_config_output_instance`
  - removes `yac_cenable_config_output_yaml`/`yac_cenable_config_output_yaml_instance`
  - adds \ref yac_cset_config_output_file / \ref yac_cset_config_output_file_instance
  - changes how this feature is set up in
    \ref yaml_file_desc_global_config "YAML configuration file"
- removes source/target grid name from interfaces for setting up
  \ref interp_method_file
- adds functionality that
  \ref phase_def_couple_stack_from_string "generates an interpolation stack from string"
- adds functionality that writes grid data provided in \ref phase_def_grid
  to file, which can be configured via:
  - \ref yaml_file_desc_output_grids "YAML configuration file"
  - user interface: \ref phase_enddef_write_grid
- YAC utility ICON grid file reader can now handle arbitrary number of
  vertices per cell
- adds YAC utility function for writing a cubed sphere grid to file
  (can be read in using ICON grid file reader)
  - \ref yac_write_cubed_sphere_grid
- Improve \ref plot_weights.py script for weight visualisation
  - add documentation
  - add a legend
  - interactive label visibility
  - fixes for the extent computation for label visualisation

\section version_320 Version 3.2.0 (Jun 2024)

- various fixes
- significant reduction in compiler warnings
- additional consistency checks for data provided by the user
- improved test coverage
- restructuring of files, directories, and Fortran modules
  - renames `yac_interface.h` to `yac.h`
    (`yac_interface.h` is kept until next major release of YAC)
  - renames `yac_finterface.F90` to `yac_global.F90`
  - renames `mo_yac_finterface.F90` to `yac_module.F90`
  - renames Fortran module `mo_yac_finterface` to `yac`
    (`mo_yac_finterface` is kept until next major release of YAC)
  - renames Fortran module `mo_yac_core` to `yac_core`
    (`mo_yac_core` is kept until next major release of YAC)
  - renames Fortran module `mo_yac_utils` to `yac_utils`
    (`mo_yac_utils` is kept until next major release of YAC)
  - renames directory `contrib` to `src/utils`
  - renames directory `python/tests` to `tests/python`
  - `libyac.a` is now deprecated and split into `libyac_core.a`, `libyac_mci.a`,
    and `libyac_utils.a`
- restructuring of configuration
  - restores option `--disable-netcdf`
  - adds option `--enable-deprecated` (allows usage of old names)
  - adds option `--enable-openmp` (enables usage of OpenMP by YAC)
  - replaces `--enable-lib-core-only` with `--disable-mci`
    (`--enable-lib-core-only` is kept until next major release of YAC)
  - adds option `--enable-utils`
  - adds pkg-configs for core, utils, and mci
- extends workaround for NVHPC compiler to version 24 and older
- some renaming of C-interfaces
  - `yac_get_grid_size` -> \ref yac_cget_grid_size
  - `yac_get_points_size` -> \ref yac_cget_points_size
- adds Fortran interfaces
  - \ref yac::yac_fget_grid_size
  - \ref yac::yac_fget_points_size
  - \ref yac::yac_fget_default_instance_id
  - \ref yac::yac_fdef_comp_dummy
- adds Python interfaces and properties
  - \ref yac.YAC.from_id
  - \ref yac.YAC.cleanup
  - \ref yac.Field.update
  - \ref yac.Field.action
  - \ref yac.Component.size
  - \ref yac.Component.rank
  - \ref yac.Reg2dGrid.def_points_unstruct
  - \ref yac.Curve2dGrid.def_points_unstruct
- adds \ref python_logging "logging" to Python interface
- adds a Python script (\ref yac_replay.py) that is freely configurable
  and provides field data from an input file through YAC to other
  components
- adds usage of OpenMP to performance critical kernels in YAC
- adds support for scaling with user defined sphere radius to
  \ref interp_method_spmap
- adds macros `YAC_VERSION_MAJOR`, `YAC_VERSION_MINOR`, `YAC_VERSION_PATCH`,
  and `YAC_VERSION_TWEAK`
- adds debug option which writing of the global coupling configuration to
  file after \ref phase_enddef (see \ref yaml_file)
- adds support for negative lags


\section version_311 Version 3.1.1 (Jan 2024)

- adds workaround for performance issue of the OpenMPI
  implementation of routine \c MPI_Group_difference
- adds support for asynchronous get operations
  - adds new routines \ref yac_cget_async and \ref yac_cwait
  - \ref yac_ctest now supports checking for completition of
    asynchronous get operations
  - adds Python Coroutines for put and get operations


\section version_310 Version 3.1.0 (Jan 2024)

- various fixes
- rework of directory structure
  - code from src and tests directory is now moved to new subdirectories:
    - core (all code required for execution of weight computation
            and basic exchanges)
    - mci (model coupling interface; all code related to the user
           interface)
  - new tools directory
- change to configure
  - new option `--enable-lib-core-only`
    - builds core functionality into `libyac_core`
    - removes the dependency on `libfyaml`, since mci is not built
  - new option `--with-pic`
  - `--enable-lib-only` replaced by `--disable-examples` and
    `--disable-tools`
  - removed `--enable-netcdf`
- more consistent naming in YAC
  - all exposed routines and objects have a `yac_` prefix
  - functionality from libgridio is now in `libyac_utils`
- adds functionality that allows the duplication of stencils stored
  in \ref yac_interp_weights "struct yac_interp_weights" for other
  target points (\ref yac_duplicate_stencils)
- adds Fortran interface for core functionality (\ref mo_yac_core)
- adds Fortran interface for utility functionality (\ref mo_yac_utils)
- additional functionality for SCRIP grid file reader
  (see \ref yac_read_scrip_basic_grid)
  - support for lon/lat edges
  - detection of duplicated cells
  - parallel reading (\ref yac_read_scrip_basic_grid_parallel)
- additional functionality for writing weight files
  - optional global grid sizes in weight files
    (see \ref yac_interp_weights_write_to_file)
  - 64-bit offset weight files
- removes redirstdout functionality
- new weighting option for \ref interp_method_nnn (\ref YAC_INTERP_NNN_ZERO)
- new interpolation method \ref interp_method_ncc
- improved \ref interp_method_conserv "2nd order conservative"
  weight computation at mask and grid edges
- new examples
  - `access_core`
    - demonstrates access of core functionality from fortran
  - `toy_output`
    - basic output server
- YAC is now <a href="https://reuse.software/">REUSE-compliant</a>

\section version_303 Version 3.0.3 (Oct 2023)

- various fixes
- adds support for custom error handler
  - \ref yac_set_abort_handler
  - \ref yac_restore_default_abort_handler
  - \ref yac_get_abort_handler
  - \ref yac_get_default_abort_handler
- improve \ref plot_weights.py
  - support for SCRIP formated grid files
- makes ranks doing I/O configurable (see \ref io_config_detail)
- add support for reading yaml configuration in python

\section version_302 Version 3.0.2 (Aug 2023)

- various fixes
- new interfaces for
  - getting default instance id (\ref yac_cget_default_instance_id)
  - \ref phase_def_comp_predef "defining a component" before the
    collective \ref phase_def_comp (\ref yac_cpredef_comp)
  - for checking status of an asynchronous exchange operation (\ref yac_ctest)
- adds support for \ref frac_mask_desc (includes various new interfaces)
- improved code structure in \ref interpolation.c
- adds plausibility check for vertex coordinates provided by the user
- replaces usage of MPF in crossproduct computation with kahan summation
  (required for CPUs that do not support long double with more than 64 bit)
- Extends options for the \ref phase_def_couple
  - Fortran/Python:
    - additional optional arguments
  - C:
    - \ref routines_ext_couple_config "routines" for the definition of
      an extended coupling configuration
    - new \ref yac_cdef_couple_custom interface that has an additional
      argument for the extended coupling configuration
- adds support for scaling fractors and summand (can be used for unit
  conversions in the interpolation)
  - can be configured either through the \ref yaml_file the
    \ref phase_def_couple "user interface"
- adds support for scrip-formated grid files to tool weights2vtk
- adds support for \ref phase_def_mask_named_desc "named masks"
- adds various workarounds for current NVHPC compiler
- adds Python tool weight visualisation

\section version_301 Version 3.0.1 (Jun 2023)

- various fixes
- reduces compiler warnings
- adds new interface for unstructured grids with edge on circles
  of longitude or latitude (can be used to register reduced gaussion
  grids)\n
  (\ref yac_cdef_grid_unstruct_ll)
- adds check which ensures that the entries in the cell_to_vertex
  array in the definition of unstructed grids are within the valid
  range

\section version_300 Version 3.0.0 (Mar 2023)

- various fixes
- various improvements in configure environment
- source to target point mapping now applies spread distance to distance
  between target points and to bounding circles of target cells
- updates libmtime to version 1.1.1
- new configuration file format
  - use of YAML or JSON instead of XML
  - reduction of information in \ref yaml_file "configuration file"
- reduction in and changes to
  \ref init_yac_detail_overview "initialisation routines"
  - does not take configuration as input anymore
  - replaces group communicator concept with
    \ref mpi_handshake_detail "MPI handshake algorithm"
- various changes and renaming of interfaces
  - `yac_cget_localcomm` -> \ref yac_cget_comp_comm
  - `yac_cget_pair_rootcomm` -> \ref yac_cget_comps_comm
  - `yac_csearch` -> \ref yac_cenddef
  - `yac_r4_ptr` -> \ref yac::yac_real_ptr "yac_real_ptr"
  - `yac_r8_ptr` -> \ref yac::yac_dble_ptr "yac_dble_ptr"
- new interfaces for
  - \ref routine_ref_config_file "reading configuration files"
    - contents of configuration file is added directly to local configuration
    - possibility to read multiple configuration files
  - \ref routine_ref_def_calendar "definition of calendar" (can be set in
    configuration file and/or through interface)
  - \ref routine_ref_sync "synchronisation of coupling configuration"
    between processes
  - \ref routine_ref_query "querying coupling configuration" of remote
    components
  - \ref routine_ref_def_couple "definition of couples" in definition phase
  - \ref routine_ref_def_meta "definition of metadata" for components, grids,
    and fields than can be \ref routine_ref_query_meta "queried" by all
    processes after \ref routine_ref_sync "synchronisation of definitions"
  - \ref routine_ref_enddef "emitting coupling configuration" in the
    \ref phase_enddef "end of definition phase"
- new constants in interface
  - calendar types
  - time unit types
- improvement of python support
  - new \ref yac.Grid.set_core_mask
  - new \ref yac.Points.set_mask
  - improves cleanup of yac instances
  - various minor improvements and bug fixes
- relieves rules for
  - definition of components, grids, and fields; do not have
    to be defined in coupling configuration anymore
  - field names of couples; source and target field names do not
    have to be identical anymore
- removes GUI

\section version_262 Version 2.6.2 (Dec 2022)

- various bug fixes
- new constants for the role of a field
  (\ref YAC_EXCHANGE_TYPE_NONE, \ref YAC_EXCHANGE_TYPE_SOURCE,
   \ref YAC_EXCHANGE_TYPE_TARGET)
- put operation now informs the user if the provided data was used
  in a reduction operation (e.g. accumulate or average) and not sent
  to any other component
- adds new inquiry interface which informs about the action a
  put/get will perform (\ref yac_cget_action and
  \ref yac::yac_fget_action "yac_fget_action")
- adds interface that allows skipping a put/get call if the action
  would have been \ref YAC_ACTION_NONE
  (\ref yac_cupdate and \ref yac::yac_fupdate "yac_fupdate")
- reworks overlap computation between cells
  * center point for concave cells is not needed anymore
  * better support for concave cells

\section version_261 Version 2.6.1 (Sep 2022)

- adds \ref pythonbindings "Python bindings"
- adds new time operation \ref YAC_REDUCTION_TIME_MINIMUM and
  \ref YAC_REDUCTION_TIME_MAXIMUM
- various improvements in configure environment
- adds configure-time check for faulty MPICH versions
  (<a href="https://github.com/pmodels/mpich/issues/6083">#6083</a>)
- some minor fixes

\section version_260 Version 2.6.0 (Aug 2022)

- adds constants returned via info argument by \ref yac_cput
  and \ref yac_cget to interface
  (\ref YAC_ACTION_NONE, \ref YAC_ACTION_COUPLING,
   \ref YAC_ACTION_GET_FOR_RESTART, \ref YAC_ACTION_PUT_FOR_RESTART,
   and \ref YAC_ACTION_OUT_OF_BOUND)
- adds constants for time operation types to interface
  (\ref YAC_REDUCTION_TIME_NONE "YAC_REDUCTION_INSTANT",
   \ref YAC_REDUCTION_TIME_ACCUMULATE "YAC_REDUCTION_ACCUMULATE",
   and \ref YAC_REDUCTION_TIME_AVERAGE)
- adds check to YAC initialisation, which check whether all
  components in a run have been compiled with the same YAC
  version
- adds new interface for curvilinear grids
  (\ref yac_cdef_grid_curve2d and \ref yac_cdef_points_curve2d)
- adds new interfaces for generating a coupling configuration
  at runtime
- adds new YAC initialisation interfaces that accept a coupling
  configuration instead of an XML file
  (yac_cinit_couple_config, yac_cinit_couple_config_group,
   yac_cinit_couple_config_instance,
   yac_cinit_couple_config_group_instance,
   yac_cinit_couple_config_comm,
   yac_cinit_couple_config_comm_group,
   yac_cinit_couple_config_comm_instance, and
   yac_cinit_couple_config_comm_group_instance)
- adds new interpolation \ref interp_method_callback

\section version_252 Version 2.5.2 (Jun 2022)

- some fixes

\section version_251 Version 2.5.1 (Jun 2022)

- adds new query routine for fields
  (yac_cget_collection_size_id,
   yac_cget_collection_size_name,
   yac_cget_collection_size_name_instance)
- adds optional maximum search distance to interpolation method 
  \ref interp_method_spmap
- adds support for regular gaussian grids to weights2vtk tool
- some bug fixes

\section version_250 Version 2.5.0 (May 2022)

- adds new YAC initialisation interface that allows an early splitting of
  of the MPI_COMM_WORLD before the definition of components
  (yac_cinit_group, yac_cinit_group_instance,
   yac_cinit_comm_group, yac_cinit_comm_group_instance,
   yac_cget_groupcomm, yac_cget_groupcomm_instance,
   yac_finit_group, yac_finit_group_instance,
   yac_finit_comm_group, yac_finit_comm_group_instance,
   yac_fget_groupcomm, and yac_fget_groupcomm_instance)
- adds new query routines for coupling configuration
  (yac_get_transients_count, yac_get_transient_ids,
   yac_is_transient_source, yac_is_transient_target,
   yac_get_transient_collection_size, yac_get_transient_coupling_period,
   yac_get_transient_source_grid_name, yac_get_transient_source_grid_name,
   yac_fget_transients_count,
   yac_fget_transient_ids, yac_fis_transient_source,
   yac_fis_transient_target, yac_fget_transient_collection_size,
   yac_fget_transient_coupling_period, yac_fget_transient_source_grid_name,
   yac_fget_transient_target_grid_name, and yac_fget_transient_name)

\section version_243 Version 2.4.3 (May 2022)

- multiple source fields per target field are now supported in YAC2
- rework of intersection computation and clipping for better and more
  consistent results
- new query routines for fields
  (yac_cget_field_id_from_field_and_grid_name,
   yac_cget_field_id_from_field_and_grid_name_instance,
   yac_cget_role_of_field_by_field_and_grid_name, and
   yac_cget_role_of_field_by_field_and_grid_name_instance)
- added support for multi precision library in case the hardware does
  not support a double precision data type with more than 64 Bit
- significant improvment of test coverage and as a result a lot of fixes

\section version_242 Version 2.4.2 (Dec 2021)

- fixes bug which cause a segmentation fault in case the configuration
  XML file did not contain a transient_grid_refs section for a component
- improves computation of barycenters (relevant for 2nd order
  conservative interpolation)
- fixes bug that occured the core mask for a cell, vertex, or edge was
  0 on all processes
- fixes issue that occured if a process with no cells was part of a active
  component
- additional code cleanup and improved testing

\section version_241 Version 2.4.1 (Dec 2021)

- some change to configure to avoid issues caused by ICON build process

\section version_240 Version 2.4.0 (Nov 2021)

- rework of internal handling of coupling configurations
- new dummy initialisation routines for YAC
  (\ref yac_cinit_dummy, \ref yac_cinit_comm_dummy,
   \ref yac::yac_finit_dummy "yac_finit_dummy")
- additional documentation on \ref yinstance
- automatic unit tests by gitlab CI
- automatic test coverage report by gitlab CI
- improved test coverage
- a lot of code cleanup
- fixes issue with weight files that contained more than
  one fixed value
- fixes broken accumulation time opertion of put
- some additional minor fixes

\section version_232 Version 2.3.2 (Sep 2021)

- adds some workaround for NEC compiler
- grids and points are now independent of YAC instances
  (a grid defined once can be used by multiple YAC instances)
- some bug fixes

\section version_231 Version 2.3.1 (Sep 2021)

- some bug fixes

\section version_230 Version 2.3.0 (Aug 2021)

- improved doxygen documentation (\ref interp_main, documentation
  of XML configuration file)
- new interpolation: creep fill (\ref interp_method_creep)
- support for restarting of YAC (\ref phase_restart)
- new interface that cleans up YAC without finalising MPI, which is
  required for restarting (\ref yac_ccleanup and
  \ref yac::yac_fcleanup "yac_fcleanup")
- new interface that allow YAC to be initialised with MPI communicator other
  than MPI_COMM_WORLD (\ref yac_cinit_comm and
  \ref yac::yac_finit_comm "yac_finit_comm")
- libxml2 is now a mandatory requirement for YAC
- reduces number of arguments to yac_csearch and yac_fsearch
- support for multiple YAC instances in parallel
- new interfaces for working with multiple YAC instances
  (\ref yac_cinit_instance, \ref yac_cinit_comm_instance,
   \ref yac_ccleanup_instance, \ref yac_cfinalize_instance,
   \ref yac_cdef_datetime_instance, \ref yac_cdef_comp_instance,
   \ref yac_cdef_comps_instance, yac_cget_pair_rootcomm_instance,
   yac_cdef_grid_reg2d_instance, yac_cdef_grid_unstruct_instance,
   yac_csearch_instance, yac_get_start_datetime_instance,
   yac_get_end_datetime_instance, \ref yac_cget_nbr_fields_instance,
   yac_cget_field_ids_instance, yac_cget_field_id_from_name_instance,
   yac_cget_role_of_field_by_name_instance,
   yac_cget_coupling_timestep_name_instance,
   yac_cget_model_timestep_name_instance, and Fortran counterparts)
- removes grid_id from def_field interfaces
  (\ref yac_cdef_field, \ref yac_cdef_field_mask,
   \ref yac::yac_fdef_field "yac_fdef_field", and
   \ref yac::yac_fdef_field_mask "yac_fdef_field_mask")
- various bug fixes


\section version_220 Version 2.2.0 (May 2021)

- put/get now work on processes that are both source an target
- adds new interface \ref yac_cexchange
  (\ref yac::yac_fexchange "yac_fexchange")

\section version_212 Version 2.1.2 (Apr 2021)

- interpolation method "Source Point Mapping" now has the option to distribute the source data to multiple target cell within a spread distance, which can be set by the user
- interpolation method "Average" now has a new barycentric coordiante based weighting option
- fixes issue that occured, when creating distributed grids on a single process

\section version_211 Version 2.1.1 (Mar 2021)

- a lot of cleanup and refactoring 
- small bug fixes

\section version_210 Version 2.1.0 (Feb 2021)

- new interface for mask handling (\ref yac_cdef_mask and \ref yac_cdef_field_mask)
- fixes in dist_grid and conservative interpolation

\section version_201 Version 2.0.1 (Jan 2021)

- Support for user file interpolation

\section version_200 Version 2.0.0 (Jan 2021)

- Internal rewrite
- Clean-up of coupling xml and GUI

\section version_155 Version 1.5.5 (Aug 2020)

- YAC is now shipped with BSD license
- minor bug fixes
- update to latest version of mtime

\section version_154 Version 1.5.4 (Dec 2019)

- Arguments '--with-regard-for-quality' and '--with-mpi-pack-external' are renamed to '--enable-mpi-checks' and '--enable-mpi-pack-external' respectively. Configure-time checks related to MPI_Pack_external are run only when the usage of MPI_Pack_external is enabled.
- Influential environment variables '*_C_INCLUDE' and '*_C_LIB' are renamed to '*_CFLAGS' and '*_CLIBS' respectively. When set, the values of the variables override the values set with '--with-*-root', '--with-*-include', and '-with-*-lib'.
- The default subdirectory to be searched for libxml2 header files is switched from '$with_xml2_root/include' to 'XML2_ROOT/include/libxml2'.
- Automatic update of LD_LIBRARY_PATH when running the test suite on Linux (no need to specify rpath flags at configure-time anymore).
- cfortran.h is not used anymore and removed from the repository. The name-mangling scheme required to enable Fortran backend for LAPACK is detected at configure-time.
- The configure script generates a public header file 'yac_config.h' (installed to $prefix/include), which can be used by user applications to check for features enabled in YAC. The file can be safely included by Fortran compilers as well.
- Silent mode for 'make' is enabled by default (can be overridden at the configure time with the option '--disable-silent-rules' or at the build time with the argument V=1, e.g. 'make V=1')
- The configure script does not try to guess which libraries are required to enable MPI: users are encouraged to use MPI compiler wrappers).
- Minor improvements for 'make clean' and 'make distclean' commands.
- MPI_LAUNCH variable can be now set without the absolute path prefix.

\section version_153 Version 1.5.3 (Nov 2019)

- bug fix in interpolation method spmap

\section version_152 Version 1.5.2 (Jul 2019)

- bug fix in interpolation method spmap
- error checking for all allocation routines
- new configure test for bug in cray-mpich

\section version_151 Version 1.5.1 (Jun 2019)

- gauss weighted distance n-nearest neighbours
- bug  fix to prevent a segmentation fault in nnn_search_local, if the number of unmasked point on a process is zero

\section version_150 Version 1.5.0 (Feb 2019)

- a frist implementation of interpolation with radial basis functions (experimental)
- refactoring of configure
- refactoring of internal routines and structs
- bug fixes

\section version_140 Version 1.4.0 (22 Oct 2018)

- new interpolation: 2nd order conservative remapping
- optimisation
- fixes of memory leaks in tests and examples
- cleaning of examples


\section version_132 Version 1.3.2 (21 Aug 2018)

- internally coordinates are now handled in the cartesian space to avoid unneccessary forward- and backward conversion
- improved performance for nearest-neighbour search
- bug fixes and cleanup


\section version_131 Version 1.3.1 (6 Aug 2018)

- new interpolation: hybrid cubic spherical Bernstern-Bezier
- optimisation
- bug fixes


\section version_130 Version 1.3.0 (25 Sep 2017)

- new features in user interface:

  - optional mapping of interpolated data on the target instead of source processes
  - couple_config (yac_setup_couple_config) now supports coupling of domains located on the same process
  - extension of the user interface by \ref yac_cdef_comps and
    \ref yac::yac_fdef_comps "yac_fdef_comps"
  - example based on OASIS_MCT paper (Craig et al, 2017), their Fig. 1 (see <https://www.geosci-model-dev-discuss.net/gmd-2017-64/>)
  - interface yac_fdef_field_nomask
  - support of ISO format for time steps and coupling period
  - constants for location of data points \ref YAC_LOCATION_CELL, \ref YAC_LOCATION_CORNER and \ref YAC_LOCATION_EDGE
  - interface yac_fset_comp_io_proc_step and yac_fget_comp_io_proc_step
  - interface.h renamed to \ref yac_interface.h
  - interpolation method file now read point location from weight file
  - interpolation method file now supports fixed values

- new internal features:

  - \ref point_sphere_part_search for optimised search in source point mapping (spmap) and n nearest neighbour (nnn)
  - interpolation plan type pointsum
  - interpolation plan type point for special case of 1 nearest neighbour
  - yac_comm_bsend now integrated into communicator_mpi to allow for waiting of bsends to be completed (results in performance improvements)
  - parallel reading of grid files especially required for high resolution grids like R02B11 (\ref yac_read_icon_grid_information_parallel)
  - experimental new interpolation methods smoothed patch recovery
  - new communication routines yac_comm_isend, yac_comm_irecv, yac_comm_testsome, yac_comm_waitall, yac_comm_free_request, yac_comm_scatter_callback and yac_comm_reduce_callback
  - yac_comm_check can now be used to pass on control to communication from time to time when processes a kept busy with huge but low-priority tasks, used in conserv, nnn, and patch.
  - DEBUG_TAGS prints tags and their associated strings
  - ATLAS is now supported by configure
  - component now contains information on good IO-processor count used for reading and writing weight files
  - collective routine yac_get_unique_comm_tags as a replacement for yac_get_unique_comm_tag which was unsave to use
  - constructor yac_global_search_all_local_new
  - constructor yac_new_field_interpolation_gen_src_tgt_2

- bug fixes:

  - rewrite of spmap to overcome various problems
  - writing out weight files: older versions ignore writing out of some files
  - ensure bit-reproducability for conservative remapping and nearest-neighbour interpolation
  - useless use statements in Fortran interface removed

- new interpolation method spmap (source point mapping); maps all non-masked source points to the nearest target point
  - with example toy_icon_runoff_atm/ocn to investigate spmap for icon grids
- rework of n nearest neighbour interpolation method; much faster and less complex communication scheme
- significant performance improvement in sphere part
- removing of unused functions and variables
- autotools update
- update of GUI manual
- update to latest version of mtime
- cleaner handling of timestep and timelag in the GUI
- makes write_restart and debug_mode optional in xml
- components now can share one, some or all processes


\section version_120 Version 1.2.0 (30 Nov 2015)

- bug fixes and performance improvements for reading in weights from files


\section version_110 Version 1.1.0 (28 Oct 2015)

- first complete version of the GUI
- reduction of MPI messages by using asynchronous collective operations
- performance improvements in couple_config and global search 
- fix of several memory leaks
- replaces mpi_pack, mpi_unpack, mpi_pack_size with its external counterpart
- weighted average
- correct behaviour or redirect stdout


\section version_105 Version 1.0.5 (22 Jul 2015)

- performance improvements for search
- fix in Fortran interface for yac_fget
- minor bug fixes


\section version_104 Version 1.0.4 (9 Jun 2015)

- major update of GUI with improved functionality
- support user defined weights added (writing and reading of weight files)
- load balancing functionality added
- send/receive of individual collections/bundles with one operation  
- cubed sphere test case
- minor bug fixes, performance improvements and code cleaning


\section version_103 Version 1.0.3 (5 Feb 2015)

- priority given to targets sending grid info to source processes (see commit 92ee8eb6)
- yac_ prefix for all external symbols 
- update of GUI plus minor revision of coupling.xsd
- first version of GUI user manual


\section version_102 Version 1.0.2 (30 Oct 2014)

- users are allowed to pass job start/end dates via F90/C API
- new toy example to read in World Ocean Atlas 2009 data
- bug fixes


\section version_101 Version 1.0.1 (3 Sep 2014)

SAB 2014 version

- interpolation weights are now calculated only once if
  the same interpolation stack is applied to more than
  field, provided that grid- and mask-pairs are
  identical as well
- some communication is saved for conservative remapping
  and patch recovery by packing data into a single message
- support for moderately concave cells
- distance-weighted n-nearest-neighbour interpolation
- old simple n-nearest-neighbour weights are now optional



\section version_100 Version 1.0.0 (22 Jul 2014)

- first release

*/
