# Copyright (c) 2024 The YAC Authors
#
# SPDX-License-Identifier: CC-BY-4.0

/**
 * \page interp_stack Interpolation stack
   \tableofcontents

\section intro Introduction

Individual \ref interp_methods "interpolation methods" may have
limitations that prevent them from interpolating all required
target field values. A typical solution is the definition of a
fallback solution that tries to handle these remaining points.

YAC introduced the concept of the interpolation stack. It is a more
general approach to defining fallback soluions. A interpolation
stack is comprised of a list of one or more
\ref interp_methods "interpolation methods". To compute an
interpolation, all required target field points are passed to the
first method in a stack. This will try to generate interpolations
for all target field points. The ones for which the method
failed are passed to the next method in the stack. This is done
until the end of the stack is reached.

There are no limitations on which
\ref interp_methods "interpolation methods" can occure at which
position in the stack as long as the respective
\ref interp_methods "methods" are compatible with available source
and target field data. This allows for a very flexible definition
of an interpolation.

The \ref interp_method_fixed will assign a fixed value to all remaining
target points in a stack. It can be used for example to mark target points,
which could not be interpolated by the other methods in the stack.
Since \ref interp_method_fixed will always successfully process all
remaining target point, it does not make sense the other
\ref interp_methods "interpolation methods" afterwards in the stack.

\section examples Example interpolation stacks

\subsection example_avg_fixed Average + Fixed

\subsubsection desc_avg_fixed Description

A simple stack consist of an \ref interp_method_avg combined with
\ref interp_method_fixed . The \ref interp_method_avg will fail for target
points that are located outside of the region covered by the
source grid or due to masked source points. The
\ref interp_method_fixed will assign a fixed value (\c 0.0 in this
case) to these target points. This may be a fill value to
ensure that the target model is able to continue working or
it may be used to identify the respective points, which may
help to debug potential problems.\n
(Grey target points are not interpolated and YAC will not assign any data to these points.)

\image html avg_fixed_stack_src.png "Source field"
\image html avg_fixed_stack_tgt_1.png "Target field after AVG"
\image html avg_fixed_stack_tgt_2.png "Target field after FIXED"

\subsubsection yaml_avg_fixed YAML

\code {.yaml}

interpolation:
  - average:
      weighted: barycentric_coordinate
      partial_coverage: false
  - fixed:
      user_value: -1.0

\endcode

\subsection example_hcsbb_nnn HCSBB + N-Nearest-Neighbour

\subsubsection desc_hcsbb_nnn Description

A higher order stack consisting of an \ref interp_method_hcsbb with
a \ref interp_method_nnn fallback, which is used for the
extrapolation of target points not covered by the source grid.\n
(Grey target points are not interpolated and YAC will not assign any data to these points.)

\image html hcsbb_nnn_stack_src.png "Source field"
\image html hcsbb_nnn_stack_tgt_1.png "Target field after HCSBB"
\image html hcsbb_nnn_stack_tgt_2.png "Target field after NNN"

\subsubsection yaml_hcsbb_nnn YAML

\code {.yaml}

interpolation:
  - bernstein_bezier
  - nnn:
      n: 1

\endcode

\subsection example_spmap_fixed Source-Point-Mapping + Fixed

\subsubsection desc_spmap_fixed Description

A typical river-runoff stack can consist of \ref interp_method_spmap combined
with \ref interp_method_fixed. The \ref interp_method_fixed ensures that all
target ocean cells receive a valid value in the get operation.\n
(Red cell indicate masked source cells or target cells that do not receive any
data in the get operation.)

\image html spmap_fixed_stack_src.png "Source field"
\image html spmap_fixed_stack_tgt_1.png "Target field after SPMAP"
\image html spmap_fixed_stack_tgt_2.png "Target field after FIXED"

\subsubsection yaml_spmap_fixed YAML

\code {.yaml}


interpolation:
  - source_to_target_map:
      weighted: arithmetic_average
      spread_distance: 0.5
  - fixed:
      user_value: 0.0

\endcode

\subsection example_conservative_2nd_1st Conservative 2nd + 1st

\subsubsection desc_conservative_2nd_1st Description

A interpolation stack for conservative interpolation. It first tries to
interpolate using a second order conservative method. It uses a bigger
stencil, which can fail at the edges of grids or masks. As a backup
a first order conservative method is used. It is more robust than the 2nd
order. It is followed by a n-nearest neighbor method for all remaining cells.
The fixed method is not required as nnn will already fill all remaining data
points. It is for safety in case the nnn fails for some reason.

\subsubsection yaml_conservative_2nd_1st YAML

\code {.yaml}

interpolation:
  - conservative:
      enforced_conservation: true
      normalisation: destarea
      order: 2
      partial_coverage: false
  - conservative:
      enforced_conservation: true
      normalisation: fracarea
      order: 1
      partial_coverage: false
  - nnn:
      n: 4
      weighted: distance_weighted
  - fixed:
      user_value: -999.0

\endcode

\section write_stack Interpolation stack to file

YAC support the writing of the results of any interpolation stack to
file. Such a file can contain the weights of multiple
\ref interp_methods and list of targets that receive a fixed value. The
file is decomposition independent. It can be read in through the use
of \ref interp_method_file.

You may want to write a file in order to inspect the results of the
interpolation stack. YAC futher supports this by providing a tool
that allows you to visualise a weight file (see \ref weight_files).

In case the weight generation for a specific interpolation stack is
very costly, you can write out the results and reuse the precomputed
weights in a later run. However, reading in and distributing the
weights from file also takes some time. Therefore, it may often be
quicker to recompute the weights for each run.

Via the weight files other software can also use weights computed by
YAC. The other software would have to support the YAC weight file
format or the weight file would have to be converted, if possible.

Writing is activated through the use of the
\c &lsaquo;enforce_write_weight_file&rsaquo; tag.

\subsection yaml_weight_file YAML

\subsubsection yaml_weight_file_write Writing

\code {.yaml}

weight_file_name: my_weight_file.nc
interpolation:
  conservative:
    order: 1
    enforced_conservation: false
    partial_coverage: false
    normalisation: fracarea
  fixed:
    user_value: -9999.0

\endcode

\subsubsection yaml_weight_file_read Reading

\code {.yaml}

interpolation:
  - user_file:
      filename: my_weight_file.nc

\endcode

 */
