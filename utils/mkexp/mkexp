#! /usr/bin/env python
#
# Generate an experiment from templates and the given configuration file.
#
# $Id$
#

from __future__ import print_function

from collections.abc import Iterator
import io
import os
import re
import stat
import sys
import textwrap
from time import strftime

import jinja2
from jinja2 import Environment, ChoiceLoader, FileSystemLoader, \
                   TemplateNotFound, TemplatesNotFound, is_undefined

import expargparse
import expconfig
from expconfig import ConfigObj, ExpConfig, ExpConfigError
import feedback
import files
import package_info
import update

#
# Basic settings
#

#
# Define functions
#

# File system

def chmod_plus_x(file_name):
    '''Make a file executable, respecting user mask.'''
    # Get umask
    umask = os.umask(0)
    os.umask(umask)
    # Mask all executable flags forbidden by umask
    add_mode = ~umask & (stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH)
    # Add remaining executable flags to current mode
    mode = os.stat(file_name).st_mode | add_mode
    os.chmod(file_name, mode)

# Templates

def get_template_name(base_name, dir_name=ExpConfig.exp_lib_dir):
    '''Determine script template, using experiments' or given library path.'''
    return os.path.join(dir_name, base_name+'.tmpl')

def get_exp_template_name(experiment_kind, job_id, dir_name=ExpConfig.exp_lib_dir):
    '''Determine job script template, using experiments' or given library path.'''
    return get_template_name(experiment_kind+'.'+job_id, dir_name)

def get_exp_template_names(experiment_config_id, config, job_or_namelist):
    return (
        get_exp_template_name(experiment_config_id, job_or_namelist, ''),
        get_exp_template_name(config.experiment_id, job_or_namelist, ''),
        get_exp_template_name(config.experiment_kind, job_or_namelist),
        get_exp_template_name(ExpConfig.default_name, job_or_namelist),
        get_template_name(job_or_namelist),
    )

def get_script_name(base_name):
    '''Determine job script name.'''
    return os.path.join(script_dir, base_name)

def get_exp_script_name(experiment_id, job_id):
    '''Determine job script name.'''
    return os.path.join(script_dir, experiment_id+'.'+job_id)

def expand_template(template_dict, template_names):
    '''Replace keywords in template string using the given dictionary.'''
    try:
        return template_env.select_template(template_names).render(template_dict)
    except TemplatesNotFound as error:
        feedback.die(error.message)

def expand_template_file(template_dict, template_names, expanded_name, backup_name):
    '''Replace keywords in template file using the given dictionary.'''
    move_file_to_backup(expanded_name, backup_name)
    expanded_file = io.open(expanded_name, 'w')
    try:
        for line in template_env.select_template(template_names).generate(template_dict):
            expanded_file.write(line)
    except TemplatesNotFound as error:
        feedback.die(error.message)
    expanded_file.write(u'\n')
    expanded_file.close()
    chmod_plus_x(expanded_name)

def move_file_to_backup(file_name, backup_name):
    '''If given file name exists, move it to the backup location'''
    if os.path.exists(file_name):
        feedback.debug("renaming '%s' to '%s'", file_name, backup_name)
        os.rename(file_name, backup_name)

    

# Namelist formatting

def quote(value):
    return repr(value).lstrip('u')

def format_atom(value):
    '''Format atomic value for use in namelists'''
    result = quote(value)
    # Strip quotes from all-numeric strings
    result = re.sub('(?i)^(["'r"'])([-+]?(\d+\.\d*|\.?\d+)([de][-+]?\d+)?)\1$", r'\2',
                    result)
    # Strip leading zeroes from integers (just to be sure)
    result = re.sub(r'^0+([1-9]\d*|0)$', r'\1', result)
    # 
    result = re.sub('(?i)^(["'r"'])\.?t(rue)?\.?\1$", '.true.', result)
    result = \
        re.sub('(?i)^(["'r"'])\.?f(alse)?\.?\1$", '.false.', result)
    result = re.sub('^(["'r"'])raw\((.*)\)\1$", r'\2', result)
    return result

def format_value(value, indent):
    '''Format list, tuple, or atomic value for use in namelists'''
    if isinstance(value, (list, tuple)):
        width = 79 - indent
        sep = ''
        line = ''
        lines = []
        for element in value:
            formatted = format_atom(element)
            if len(line) + len(sep) + len(formatted) > width:
                lines.append(line)
                line = formatted
            else:
                line += sep + formatted
                sep = ', '
        if line:
            lines.append(line)
        return (u',\n' + ' '*indent).join(lines)
    return format_atom(value)

def keyword_warning(key):
    feedback.warning("keyword '"+key+"' is deprecated, use '."+key+"' instead")

def get_remove_list(section, key):
    remove_list = []
    if key in section:
        # Deprecation warning for non .keys
        if key[0] != '.':
            keyword_warning(key)
        if not isinstance(section[key], (list, tuple)):
            remove_list = [key, section[key]]
        else:
            remove_list = [key] + section[key]
    return remove_list

def format_namelist_comment(line):
    match = re.match(r'^#\s*(\w+)\s*=\s*(.*?)\s*(#\s*(.*))?$', line)
    if match:
        key = match.group(1)
        value = match.group(2)
        comment = ''
        if match.group(4):
            comment = ' ! '+match.group(4)
        return '! '+key+' = '+format_value(value, 0)+comment+u'\n'
    return re.sub(r'^#', '!', line)+u'\n'

def format_namelist(section, group=None, default_value=''):
    '''Format config section as a namelist.
       If given, just format a single namelist group'''
    # Skip undefined groups
    if group and group not in section:
        feedback.debug("namelist '"+group+"' not defined (yet)")
        return ''
    # Settings
    base_indent = 4
    end_key = '.end'
    hide_key = '.hide'
    default_key = '.default'
    default_value = section.get(default_key, default_value)
    # Skip if whole section (usually namelist file) is hidden
    if is_set(section.get(hide_key)):
        return ''
    # Create list of removed namelist groups.
    # Support old keyword for backward compatibility
    remove_list = get_remove_list(section, '.remove')
    remove_list += get_remove_list(section, 'remove')
    black_list = [x.replace(r'\*', '.*').replace(r'\?', '.')+'$' for x in [re.escape(x.lower()) for x in remove_list]]
    # Format namelist groups that were not removed
    lines = io.StringIO()
    iterator = iter({group: section[group]}.items()) if group else iter(section.items())
    for group, contents in iterator:
        if isinstance(contents, dict):
            hidden = is_set(contents.get(hide_key))
            group_def_val = contents.get(default_key, default_value)
            group_id = group.lower()
            if not hidden and not any([re.match(x, group_id) for x in black_list]):
                # Create list of removed keys
                remove_keys = get_remove_list(contents, '.remove')
                # Start namelist group
                for line in section.comments.get(group, []):
                    lines.write(format_namelist_comment(line))
                group_base, group_ident = expconfig.section_key_info(group_id)
                if not group_ident:
                    lines.write(u'&'+group_base+u'\n')
                else:
                    lines.write('&'+group_base+" ! '"+group_ident+u"'\n")
                for key, value in contents.items():
                    if (key[0] != '.' and key not in remove_keys and
                        value != group_def_val):
                        key = key.lower()
                        indent = base_indent + len(key) + 3
                        for line in contents.comments.get(key, []):
                            lines.write(u' '*base_indent)
                            lines.write(format_namelist_comment(line))
                        line = contents.inline_comments[key]
                        if not line:
                            line = ''
                        line = re.sub(r'^#', ' !', line)
                        # TODO next line needed to pass tests but questionable.
                        # See 'Replace id placeholder in namelist groups' below
                        value = eval(repr(value).replace('%{id}', group_ident))
                        lines.write(' '*base_indent+key+' = '+
                                    format_value(value, indent)+
                                    line+u'\n')
                if end_key in contents:
                    for line in contents.comments[end_key]:
                        lines.write(u' '*base_indent)
                        lines.write(format_namelist_comment(line))
                lines.write(u'/\n')
    return lines.getvalue()

# Global formatting

def format_vars(section, key, log, fmt):

    def replace(match):
        result = match.group(1)
        if re.match(r'[_A-Za-z][_A-Za-z0-9]*$', result):
            log.add(result)
            return fmt%result
        return result
    def transform(string):
        return re.sub(r'\$\{(\w+)\}', replace, string)

    value = section[key]
    newkey = transform(key)
    section.rename(key, newkey)
    if not isinstance(value, (list, tuple, dict)):
        # Format string variables
        section[newkey] = transform(value)
    elif isinstance(value, (list, tuple)):
        # Format all list elements
        section[newkey] = list(map(transform, value))

#
# Main routine
#

# Set verbosity

feedback.setLevel(feedback.INFO)

# Check environment

config_roots = os.environ.get('MKEXP_PATH', '').split(':')

# Check command line

command_line = expargparse.MkexpArgumentParser()

args = command_line.parse_args()

if args.quiet:
    feedback.setLevel(feedback.WARNING)

# Experiment configuration
if args.path:
    config_roots = args.path.split(':')

experiment_config_name = args.config
experiment_config_id = os.path.splitext(os.path.basename(args.config))[0]

if not os.path.exists(experiment_config_name):
    feedback.die("config file '{0}' does not exist".format(experiment_config_name))

# Overrides
invalid_args = [x for x in args.assigns if not x.find('=')+1]

if invalid_args:
    feedback.die("invalid parameters ('"+"', '".join(invalid_args)+"')\n" +
                 command_line.format_usage())

# Setup templating environment

template_env = Environment(
    loader = ChoiceLoader(list(map(FileSystemLoader, config_roots))),
    variable_start_string = '%{',
    variable_end_string = '}',
    line_statement_prefix = '#%',
    line_comment_prefix = '#%#',
    block_start_string = '{%__mkexp__',
    comment_start_string = '{#__mkexp__',
    extensions = ['jinja2.ext.do']
)

# Check decorator compatibility for 3+ versions of Jinja2

if 'pass_context' in dir(jinja2):
    pass_context = jinja2.pass_context
    pass_environment = jinja2.pass_environment
    pass_eval_context = jinja2.pass_eval_context
else:
    pass_context = jinja2.contextfunction
    pass_environment = jinja2.environmentfilter
    pass_eval_context = jinja2.evalcontextfilter

# Additional global functions

# - Helper function to get context information within templates
@pass_context
def get_context(ctx, key=None):
    return ctx.resolve(key) if key else ctx
template_env.globals['context'] = get_context

# - Utility to get full file name from 'files' section
template_env.globals['get_dir'] = files.get_dir
template_env.globals['get_file'] = files.get_file

# - Utility to format namelists or single groups
template_env.globals['format_namelist'] = format_namelist

# Additional filters

# - A better wordwrap filter
@pass_environment
def wordwrap(env, s, width=79, break_long_words=True, break_on_hyphens=True,
             wrapstring=None):
    if wrapstring is None:
        wrapstring = env.newline_sequence
    tw = textwrap.TextWrapper(width=width, break_long_words=break_long_words,
                              break_on_hyphens=break_on_hyphens)
    return wrapstring.join(tw.wrap(s))
template_env.filters['wordwrap'] = wordwrap

# - Regular expression match
def match(s, regexp, default=''):
    m = re.search(regexp, s)
    if m:
        if m.lastindex:
            return m.group(1)
        return s
    return default
template_env.filters['match'] = match
# - There's a join but no split operation...
template_env.filters['split'] = lambda x, s=None, m=-1: x.split(s, m)

# - Add list operation filter
template_env.filters['filter'] = lambda x, f=None: list(filter(f, x))

# - Replace 'list' handling simple values and strings as singleton lists
list_original = template_env.filters['list']
@pass_eval_context
def list_singleton(eval_ctx, x, keep_empty=False, *args, **kwargs):
    # Workaround for 2.8 bug when applied to literals
    if isinstance(x, jinja2.nodes.EvalContext):
        (eval_ctx, x) = (x, eval_ctx)
    if isinstance(x, (list, tuple, Iterator)):
        if getattr(list_original, 'evalcontextfilter', getattr(list_original, 'jinja_pass_arg', False)):
            return list_original(eval_ctx, x, *args, **kwargs)
        return list_original(x, *args, **kwargs)
    if not keep_empty and x == '':
        return []
    return [x]
template_env.filters['list'] = list_singleton

# - Replace 'join' handling simple values and strings as singleton lists
join_original = template_env.filters['join']
@pass_eval_context
def join_singleton(eval_ctx, x, *args, **kwargs):
    # Workaround for 2.8 bug when applied to literals
    if isinstance(x, jinja2.nodes.EvalContext):
        (eval_ctx, x) = (x, eval_ctx)
    if isinstance(x, (list, tuple, Iterator)):
        return join_original(eval_ctx, x, *args, **kwargs)
    return x
template_env.filters['join'] = join_singleton

# Additional tests

# - Check a namelist logical
def is_set(s):
    if is_undefined(s):
        return False
    return expconfig.is_set(s)
template_env.tests['set'] = is_set

# Read and store configuration info from input and experiments' library
# Store environment as default for control settings, then add config from files

extra_dict = ConfigObj()
for assign_dict in expargparse.assigns_to_dicts(args):
    extra_dict.merge(assign_dict)
extra_dict['mkexp_input'] = 'Generated by {0} ({1}) {2}'.format(
    package_info.full_name, package_info.name, package_info.version)
if not args.getexp:
    extra_dict['mkexp_input'] = extra_dict['mkexp_input'].replace('$', '$$')
try:
    config = ExpConfig(experiment_config_name, extra_dict, config_roots,
                       getexp=args.getexp)
except ExpConfigError as error:
    feedback.die(str(error), status=2)

# Create target directories

def cut_dir_variable(directory):
    return re.sub(os.sep + r'[^' + os.sep + r'$]*\$\{\w+\}.*$', '', directory)

def list1(x, keep_empty=False):
    if isinstance(x, (list, tuple, Iterator)):
        return x
    if not keep_empty and x == '':
        return []
    return [x]

# Create directory for scripts if it doesn't exist
script_dir = config['SCRIPT_DIR']
print(f"Script directory: '{script_dir}'")
time_stamp = strftime("%Y%m%d%H%M%S")
backup_dir = os.path.join(script_dir, 'backup', time_stamp)
if not os.path.isdir(script_dir):
    os.makedirs(script_dir)
else:
    feedback.info("script directory already exists, moving existing scripts to backup")
    if not os.path.isdir(backup_dir):
        os.makedirs(backup_dir)

# Create directories for experiment if they don't exist
exp_dir_names = ['DATA_DIR', 'WORK_DIR']
exp_dir_names.extend(name for name in list1(config.get('EXP_DIR_NAMES', []))
    if name not in exp_dir_names)
for exp_dir_name in exp_dir_names:
    try:
        exp_dir = config[exp_dir_name]
        exp_cut = cut_dir_variable(exp_dir)
        name = exp_dir_name.lower().removesuffix('_dir')
        Name = name.capitalize()
        exists = os.path.isdir(exp_cut)
        print(f"{Name} directory: '{exp_dir}'"+(
            " (already exists)" if exists else
            " (not created)" if not args.make_dirs else ""))
        if not exists and args.make_dirs:
            if exp_dir != exp_cut:
                feedback.warning("only considering non-variable part"
                    " of directory")
            os.makedirs(exp_cut)
    except KeyError:
        pass

# Create config dump for reference

dump_name = config.experiment_id+'.dump'
move_file_to_backup(os.path.join(script_dir, dump_name),
                    os.path.join(backup_dir, dump_name))
dump_file = io.open(os.path.join(script_dir, dump_name), 'wb')
default_indent_type = config.indent_type
config.indent_type = '  '
config.write(dump_file)
config.indent_type = default_indent_type
dump_file.close()

# Run template expansion

# Process scripts for each job

# Cut queue specific settings
job_dict = {}
remove_list = get_remove_list(config['jobs'], '.remove')
remove_list += get_remove_list(config['jobs'], 'remove')
for key, value in config['jobs'].items():
    if not isinstance(value, dict):
        job_dict[key] = value
        del config['jobs'][key]

# Extend the given subjob config recursively
def extend(subjob, jobs_config, extended_jobs, job_dict=None):
    if subjob not in extended_jobs:
        subconfig = jobs_config[subjob]

        # Allow simple inheritance
        # Support deprecated keyword 'extends' but warn user
        extended_job = None
        subjob_base, subjob_ident = expconfig.section_key_info(subjob)
        if '.extends' in subconfig:
            extended_job = subconfig['.extends']
        elif 'extends' in subconfig:
            keyword_warning('extends')
            extended_job = subconfig['extends']
            subconfig.rename('extends', '.extends')
        elif subjob_ident and subjob_base in jobs_config:
            extended_job = subjob_base
        if extended_job:
            extend(extended_job, jobs_config, extended_jobs, job_dict)

        # Add global job settings
        pre_config = ConfigObj()
        if job_dict:
            pre_config.merge(job_dict)

        # Add parent config
        if extended_job:
            pre_config.merge(expconfig.odict(jobs_config[extended_job]))
            expconfig.merge_comments(pre_config, jobs_config[extended_job])

        # Add actual subjob config
        pre_config.merge(subconfig)

        # Replace subjob config by extended config
        jobs_config[subjob] = {}
        jobs_config[subjob].merge(expconfig.odict(pre_config))
        expconfig.merge_comments(jobs_config[subjob], pre_config)
        del pre_config

        # Tick off extended jobs
        extended_jobs.add(subjob)

# Extend all subjobs
jobs_config = config['jobs']
extended_jobs = set()
for subjob in jobs_config:
    if not subjob in remove_list:
        # Extend subjob config
        extend(subjob, jobs_config, extended_jobs, job_dict)

        # Add useful settings
        subconfig = jobs_config[subjob]
        subconfig['id'] = subjob
        if not 'tasks' in subconfig:
            subconfig['tasks'] = str(int(subconfig.get('nodes', 1)) * 
                                     int(subconfig.get('tasks_per_node', 1)))

# Paste them into each job
for subjob, subconfig in jobs_config.items():
    if not subjob in remove_list:

        # Copy current config settings to job
        config_lines = io.BytesIO()
        config.write(config_lines)
        config_lines.seek(0)
        job_config = ConfigObj(io.TextIOWrapper(config_lines))

        # Check namelist override
        if 'namelists' in subconfig:
            job_config['namelists'].merge(subconfig['namelists'])
            del subconfig['namelists']

        # Check files override
        if 'files' in subconfig:
            job_config['files'].merge(subconfig['files'])
            del subconfig['files']

        # Paste pre config into job config
        job_config[u'JOB'] = subconfig
        del subconfig

        # Extend all namelists
        for namelist in job_config['namelists'].sections:
            groups = job_config['namelists'][namelist]
            extended_groups = set()
            for group in groups.sections:
                extend(group, groups, extended_groups)

        # Prepare namelists for inclusion in scripts
        var_format = job_config['JOB'].get('.var_format', '${%s}')
        var_list = set()
        job_config['jobs'] = {}
        job_config['jobs'].merge(expconfig.odict(jobs_config))
        expconfig.merge_comments(job_config['jobs'], jobs_config)
        job_config.walk(format_vars, log=var_list, fmt=var_format)
        job_config['VARIABLES_'] = var_list
        for namelist, groups in job_config['namelists'].items():
            if isinstance(groups, dict):
                # Replace id placeholder in namelist groups
                for group_id, group in groups.items():
                    group_base, group_ident = expconfig.section_key_info(
                        group_id)
                    if group_ident:
                        for key in group.scalars:
                            value_repr = repr(group[key])
                            if '%{id}' in value_repr:
                                group[key] = eval(value_repr.replace('%{id}',
                                    group_ident))
                # Skip hidden namelists
                if is_set(groups.get('.hide')):
                    continue
                # Support deprecated keyword 'use_template' but warn user
                if groups.get('use_template'):
                    keyword_warning('use_template')

                namelist_name = re.sub(r'\W', '_', namelist.upper())
                use_template = (groups.get('.use_template') or
                                groups.get('use_template') or '')
                use_full_config = groups.get('.use_full_config', '')
                if use_full_config.lower() == 'true':
                    namelist_config = ConfigObj(job_config)
                    namelist_config['_'] = job_config
                    namelist_config.merge(expconfig.odict(groups))
                    expconfig.merge_comments(namelist_config, groups)
                else:
                    namelist_config = groups
                if use_template:
                    if use_template.lower() == 'true':
                        use_template = namelist
                    job_config[namelist_name] = expand_template(
                        namelist_config, get_exp_template_names(
                            experiment_config_id, config, use_template))
                else:
                    job_config[namelist_name] = format_namelist(
                        namelist_config)

        # Generate job script
        template_search_list = ()
        current_job = subjob
        while current_job:
            template_search_list += get_exp_template_names(experiment_config_id,
                config, current_job)
            current_job = jobs_config[current_job].get('.extends')
            
        expand_template_file(job_config, template_search_list,
                             get_exp_script_name(config.experiment_id, subjob),
                             os.path.join(backup_dir,
                                          config.experiment_id+'.'+subjob))

# Create README file from experiment description

move_file_to_backup(os.path.join(script_dir, 'README'),
                    os.path.join(backup_dir, 'README'))
readme_file = io.open(os.path.join(script_dir, 'README'), 'w')
readme_file.write(config['EXP_DESCRIPTION'] + u'\n')
readme_file.close()

# Create update script from experiment description

update_name = os.path.join(script_dir, 'update')
move_file_to_backup(update_name, os.path.join(backup_dir, 'update'))
update.write_update(update_name, extra_dict, sys.argv)
chmod_plus_x(update_name)
