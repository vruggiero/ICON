'''
Module for 'update' information generated by mkexp tool.

$Id$
'''

import io
import os
import re

import expargparse

def write_update(update_name, extra_dict, argv):
    def quote(value):
        return repr(value).lstrip('u')
    update_file = io.open(update_name, 'w')
    update_file.write(u'#! /bin/sh\n')
    update_file.write(u'#\n')
    update_file.write(u'# Regenerate all files with identical configuration\n')
    update_file.write(u'#\n')
    update_file.write(u'# ' + extra_dict['mkexp_input'].replace('$$', '$') + '\n')
    update_file.write(u'#\n')
    update_file.write(u'cd ' + quote(os.environ.get('PWD', os.getcwd())) + '\n')
    update_file.write(u'PATH=' + quote(os.environ.get('PATH', '')) + '\n')
    update_file.write(u'PYTHONPATH=' + quote(os.environ.get('PYTHONPATH', '')) + '\n')
    update_file.write(u'MKEXP_PATH=' + quote(os.environ.get('MKEXP_PATH', '')) + '\n')
    update_file.write(u'export PATH PYTHONPATH MKEXP_PATH\n')
    update_file.write(u'set - ' + ' '.join(map(quote, argv)) + ' "$@"\n')
    update_file.write(u'echo "$@" >&2\n')
    update_file.write(u'exec "$@"\n')
    update_file.close()


class Update:
    '''Object containing 'update' information generated by mkexp tool
    '''
    def __init__(self, update_name):

        # Experiment configuration

        self.config_dir = None
        self.mkexp_args = None

        # Read data from update file

        update_file = open(update_name)

        for line in update_file:
            # Get original working directory
            match = re.match(r"cd '(.*)'$", line)
            if match:
                self.config_dir = match.group(1)
                continue
            # Get original setup search path
            match = re.match(r"MKEXP_PATH='(.*)'$", line)
            if match:
                 self.mkexp_path = match.group(1).split(os.path.pathsep)
                 continue
            # Get original command line.
            # Support older update file formats
            match =(re.match(r"set - '.*?' '(.*)'", line) or
                    re.match(r"exec '.*?' '(.*)'", line))
            if match:
                # Check mkexp command line
                mkexp_line = expargparse.MkexpArgumentParser() 
                self.mkexp_args = \
                    mkexp_line.parse_args(match.group(1).split("' '"))
                break

        update_file.close()

    def get_config_dir(self):
        return self.config_dir

    def get_mkexp_path(self):
        return self.mkexp_path

    def get_config_file(self):
        config_file = self.mkexp_args.config
        if not os.path.isabs(config_file):
            config_file = os.path.join(self.config_dir, config_file)
        return config_file

    def get_config_dicts(self):
        return expargparse.assigns_to_dicts(self.mkexp_args)

