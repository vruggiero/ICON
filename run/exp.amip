# ICON
#
# ------------------------------------------
# Copyright (C) 2004-2024, DWD, MPI-M, DKRZ, KIT, ETH, MeteoSwiss
# Contact information: icon-model.org
# See AUTHORS.TXT for a list of authors
# See LICENSES/ for license information
# SPDX-License-Identifier: BSD-3-Clause
# ------------------------------------------

# -------------------------------------------------------------
# Atmosphere standalone script template
#   NextGEMS namelist, R02B08, R02B09, R02B10 for production,
#   R02B04 for testing purposes only
# -------------------------------------------------------------
#
author_list='Monika Esch, MPIM'
#--------------------------------------------------------------------------------------------------

# (1) Variables provided by the scripting mechanism

# EXPNAME                = name of exp. in 'exp.<name>'
# basedir                = base directory, where src/, run/, run-mpim/ etc exist
# icon_data_poolFolder   = root directory for ICON data
# nproma                 = blocking length for array dimensioning and inner loop lengths
#                           which is set in run/create_target_header for the used machine
#
# nblocks_c              = number of looping chunks used for cells
#                          which is set in run/create_target_header for the used machine
#
# - nproma_sub           = radiation blocking length, <= nproma
#                          --> nproma_sub
#

icon_data_poolFolder="${icon_data_rootFolder:-/pool/data/ICON}/grids/public/mpim"

#--------------------------------------------------------------------------------------------------

# (2) Set variables needed by the scripting mechanism

# horizontal grid(s)
#
# Define resolution:
#
grid_refinement=R02B08
#
# Set various parameters, time steps, start and end date etc for
#  the different resolutions first
#
if [ ${grid_refinement} == R02B08 ] ; then

   grid_id=0054
   # start and end date+time
   start_date=${start_date:="1979-01-01T00:00:00Z"}
       end_date=${end_date:="1982-01-01T00:00:00Z"}

   # time steps
   radTimeStep="PT20M"
   atmTimeStep="PT60S"

   # restart intervals
   checkpoint_interval="P3M"
   restart_interval="P3M"

   # namelist variables
   #
   num_restart_procs=10
   cinhoml=0.4
   l_soil_texture=.TRUE.

elif [ ${grid_refinement} == R02B09 ] ; then

   grid_id=0055
   # start and end date+time
   start_date=${start_date:="1979-01-01T00:00:00Z"}
       end_date=${end_date:="1979-02-01T00:00:00Z"}

   # time steps
   radTimeStep="PT20M"
   atmTimeStep="PT40S"

   # restart intervals
   checkpoint_interval="P10D"
   restart_interval="P10D"

   #
   # namelist variables
   #
   num_restart_procs=992
   cinhoml=0.45
   l_soil_texture=.FALSE.

elif [ ${grid_refinement} == R02B10 ] ; then

   grid_id=0056
   # start and end date+time
   start_date=${start_date:="1979-01-01T00:00:00Z"}
       end_date=${end_date:="1979-03-01T00:00:00Z"}

   # time steps
   radTimeStep="PT10M"
   atmTimeStep="PT20S"

   # restart intervals
   checkpoint_interval="P4D"
   restart_interval="P4D"

   # namelist variables
   #
   num_restart_procs=992
   cinhoml=0.5
   l_soil_texture=.FALSE.

elif [ ${grid_refinement} == R02B04 ] ; then

   grid_id=0049
   # start and end date+time
   start_date=${start_date:="1979-01-01T00:00:00Z"}
       end_date=${end_date:="1979-01-04T00:00:00Z"}

   # time steps
   radTimeStep="PT12M"
   atmTimeStep="PT40S"

   # restart intervals
   checkpoint_interval="P3D"
   restart_interval="P3D"

   # namelist variables
   #
   num_restart_procs=1
   cinhoml=0.4
   l_soil_texture=.TRUE.

fi

# domain globe
grids_folder=${icon_data_poolFolder}/${grid_id}
grid_label=G
grid_name=icon_grid_${grid_id}_${grid_refinement}_${grid_label}
#
atmo_dyn_grids="'${grid_name}.nc'"

# namelist files
atmo_namelist=NAMELIST_${EXPNAME}_atm
jsbach_namelist=NAMELIST_${EXPNAME}_lnd

#--------------------------------------------------------------------------------------------------

# (3) Define the model configuration

# JSBACH settings
jsbach_usecase=jsbach_lite    # jsbach_lite or jsbach_pfts
jsbach_with_carbon=no         # yes needs jsbach_pfts usecase

# Some further processing for land configuration
# ----------------------------------------------
#
lcarbon=$([ "${jsbach_with_carbon:=yes}" == yes ] && echo .TRUE. || echo .FALSE. )
#
if [[ $jsbach_usecase == *pfts* ]]
then
  pft_file_tag="11pfts_"
else
  pft_file_tag=""
fi

#--------------------------------------------------------------------------------------------------

# (6) Output control
# ------------------

# output intervals
# ---------------------

atm_output_interval_2d="PT6H"
atm_output_interval_3d="P1D"
atm_file_interval="P1M"

# output file selection
# ---------------------

# output_<xyz>=yes : yes --> output files for <xyz>, any other value --> no files for <xyz>
# set output_atm_2/3d_hiopy=yes if you want to generate data as in coupled runs and 3D data on 26 levels only

output_atm_vgrid=no              # produces 1 file, but only once
output_atm_2d_hiopy=no            # produces 3 files (15M, 3H, 1D)
output_atm_3d_hiopy=no            # produces 4 files
output_atm_gmean=no               # produces 2 files
output_atm_qp=yes                 # produces 2 file,  for quickplots, daily means

output_atm_2d_P1D=.FALSE.
if [[ "$output_atm_2d_hiopy" == "yes" ]]; then
        output_atm_2d_P1D=.TRUE.
elif [[ "$output_atm_qp" == "yes" ]]; then
        output_atm_2d_P1D=.TRUE.
fi
#
# for hiopy-outputfiles
m_levels='14,21,25,29,31,35,38,41,46,51,55,58,63,67,71,74,76,78,80,81,83,84,85,87,89,90'

# asynchronous diagnostic output processes
# ----------------------------------------

# Note that "mpi_atm_io_procs" should match the number of output files

mpi_atm_io_procs=2                # total number of output files


# atmospheric dynamics and physics
# --------------------------------
#
# atmosphere namelist
# -------------------
cat > ${atmo_namelist} << EOF
&parallel_nml
 nproma               = ${nproma}
 nblocks_c            = ${nblocks_c}
 nproma_sub           = ${nproma_sub}
 num_io_procs         = ${mpi_atm_io_procs}
 iorder_sendrecv      = 3
 io_proc_chunk_size   = 46
 io_process_stride    = 8
 num_restart_procs    = ${num_restart_procs} !prelim
/
&grid_nml
 dynamics_grid_filename = ${atmo_dyn_grids}
/
&run_nml
 num_lev              = 90          ! number of full levels
 modeltimestep        = "${atmTimeStep}"
 ltestcase            = .FALSE.     ! run testcase
 ldynamics            = .TRUE.      ! dynamics
 ltransport           = .TRUE.      ! transport
 iforcing             = 2           ! 0: none, 1: HS, 2: ECHAM, 3: NWP
 output               = 'nml'
 msg_level            = 10          ! level of details report during integration
 restart_filename     = "${EXPNAME}_restart_atm_<rsttime>.mfr"
 activate_sync_timers = .TRUE.
 profiling_output     = 1
 timers_level         = 10
/
&extpar_nml
 itopo                = 1           ! 1: read topography from the grid file
/
&initicon_nml
 init_mode            = 2           ! 2: initialize from IFS analysis
 ifs2icon_filename    = 'ifs2icon.nc'
/
&nonhydrostatic_nml
 ndyn_substeps        = 5      ! Default! dtime/dt_dyn
 damp_height          = 44000. ! [m]
 rayleigh_coeff       = 1      ! set to 0.1001 for rerun with little change
 vwind_offctr         = 0.2
 divdamp_fac          = 0.004
 divdamp_order        = 24
 divdamp_trans_end    = 17500
 divdamp_trans_start  = 12500
 divdamp_type         = 32
 exner_expol          = 0.333
 hbot_qvsubstep       = 16000.
 htop_moist_proc      = 22500.
 iadv_rhotheta        = 2
 igradp_method        = 3
 itime_scheme         = 4
 ivctype              = 2
 l_zdiffu_t           = .true.
 thhgtd_zdiffu        = 125.
 thslp_zdiffu         = 0.02
/
&interpol_nml
/
&sleve_nml
 min_lay_thckn        = 25.    ! [m]
 max_lay_thckn        = 400.   ! [m]
 top_height           = 75000. ! [m]
 stretch_fac          = 0.9
 decay_scale_1        = 4000.  ! [m]
 decay_scale_2        = 2500.  ! [m]
 decay_exp            = 1.2
 flat_height          = 22500. ! [m]
 htop_thcknlimit      = 14000.
/
&dynamics_nml
 lmoist_thdyn   = .TRUE.
/
&diffusion_nml
/
&transport_nml
 tracer_names         = 'hus','clw','cli','qr','qs','qg'
 ivadv_tracer         =    3 ,   3 ,   3 ,  3 ,  3 ,  3
 itype_hlimit         =    3 ,   4 ,   4 ,  4 ,  4 ,  4
 ihadv_tracer         =   20 ,  20 ,  20 , 20 , 20 , 20
/
&aes_phy_nml
!
! domain 1
! --------
!
! atmospheric physics (""=never)
 aes_phy_config(1)%dt_rad = "${radTimeStep}"
 aes_phy_config(1)%dt_vdf = "${atmTimeStep}"
 aes_phy_config(1)%dt_mig = "${atmTimeStep}"
!
! surface (.TRUE. or .FALSE.)
 aes_phy_config(1)%ljsb   = .TRUE.
 aes_phy_config(1)%lamip  = .TRUE.
 aes_phy_config(1)%lice   = .TRUE.
 aes_phy_config(1)%lmlo   = .FALSE.
 aes_phy_config(1)%llake  = .FALSE.
 aes_phy_config(1)%use_shflx_adjustment = .FALSE.

 aes_phy_config(1)%iqneg_d2p = 2
 aes_phy_config(1)%iqneg_p2d = 2
/
&aes_rad_nml
 aes_rad_config(1)%isolrad    = 1 ! Time dependent solar spectrum from file
 aes_rad_config(1)%irad_h2o   = 1
 aes_rad_config(1)%irad_co2   = 3
 aes_rad_config(1)%irad_ch4   = 13
 aes_rad_config(1)%irad_n2o   = 13
 aes_rad_config(1)%irad_o3    = 5 ! transient monthly means
 aes_rad_config(1)%irad_o2    = 2
 aes_rad_config(1)%irad_cfc11 = 3
 aes_rad_config(1)%irad_cfc12 = 3
 aes_rad_config(1)%irad_aero  = 13 ! tropospheric aerosol optical properties after S. Kinne, filename with year
 aes_rad_config(1)%inhom_lts  = .TRUE.
 aes_rad_config(1)%inhom_lts_max = 0.725
/
&aes_vdf_nml
 aes_vdf_config(1)%turb       = 2
 aes_vdf_config(1)%pr0        = 0.7
 aes_vdf_config(1)%use_tmx    = .TRUE.
 aes_vdf_config(1)%energy_type        = 2   ! Only used for tmx
 aes_vdf_config(1)%dissipation_factor = 1.3 ! Only used for tmx
! aes_vdf_config(1)%min_sfc_wind i     = 1.  ! 1 is default
! aes_vdf_config(1)%louis_constant_b   = 4.2 ! !automatically scaled in tmx
! aes_vdf_config(1)%lmix_max   = 150.
/
&aes_cov_nml
 aes_cov_config(1)%cqx        = 1.e-6
/
&aes_cop_nml
 aes_cop_config(1)%cinhomi  = 0.6
 aes_cop_config(1)%cinhoms  = 0.6
 aes_cop_config(1)%cinhoml  = ${cinhoml}
 aes_cop_config(1)%cn1lnd   = 50.0
 aes_cop_config(1)%cn1sea   = 50.0
 aes_cop_config(1)%cn2lnd   = 220.0
 aes_cop_config(1)%cn2sea   = 100.0
/
&cloud_mig_nml
/
&sea_ice_nml
 albedow_sim  = 0.10
 albi         = 0.70
 albim        = 0.68
 albs         = 0.81
 albsm        = 0.77
 i_ice_dyn    = 1
 i_ice_therm  = 1
 leadclose_1  = 0.25
 leadclose_2n = 0.666
 delta_min    = 2.0e-09
 cd_io        = 5.5e-3
 evp_rheol_steps = 240
 luse_replacement_pressure = .true.
/
EOF

# jsbach namelist
# ---------------

cat > ${jsbach_namelist} << EOF
&jsb_model_nml
 usecase             = "${jsbach_usecase}"
 use_lakes           = .TRUE.
 use_tmx             = .TRUE.
 fract_filename      = 'bc_land_frac.nc'
 init_from_ifs       = .TRUE.
/
&jsb_seb_nml
 bc_filename         = 'bc_land_phys.nc'
 ic_filename         = 'ic_land_soil.nc'
/
&jsb_rad_nml
 use_alb_veg_simple  = .TRUE.               ! Use TRUE for jsbach_lite, FALSE for jsbach_pfts
 bc_filename         = 'bc_land_phys.nc'
 ic_filename         = 'ic_land_soil.nc'
/
&jsb_turb_nml
 bc_filename         = 'bc_land_phys.nc'
 ic_filename         = 'ic_land_soil.nc'
 max_ini_rough_m     = 1.0 ! has to be set with tmx!
/
&jsb_sse_nml
 l_heat_cap_map      = .FALSE.
 l_heat_cond_map     = .FALSE.
 l_heat_cap_dyn      = .FALSE.
 l_heat_cond_dyn     = .FALSE.
 l_snow              = .TRUE.
 l_dynsnow           = .TRUE.
 l_freeze            = .TRUE.
 l_supercool         = .FALSE.
 bc_filename         = 'bc_land_soil.nc'
 ic_filename         = 'ic_land_soil.nc'
 l_soil_texture      = ${l_soil_texture}
/
&jsb_hydro_nml
 l_organic           = .FALSE.
 l_socmap            = .FALSE.
 bc_filename         = 'bc_land_soil.nc'
 ic_filename         = 'ic_land_soil.nc'
 bc_sso_filename     = 'bc_land_sso.nc'
 l_soil_texture      = ${l_soil_texture}
/
&jsb_assimi_nml
 active              = .FALSE.              ! Use FALSE for jsbach_lite, TRUE for jsbach_pfts
/
&jsb_pheno_nml
 scheme              = 'climatology'        ! scheme = logrop / climatology; use climatology for jsbach_lite
 bc_filename         = 'bc_land_phys.nc'
 ic_filename         = 'ic_land_soil.nc'
/
&jsb_carbon_nml
 active              = .FALSE.
 bc_filename         = 'bc_land_carbon.nc'
 ic_filename         = 'ic_land_carbon.nc'
 read_cpools         = .FALSE.
/
&jsb_fuel_nml
 active              = .FALSE.
 fuel_algorithm      = 1
/
&jsb_disturb_nml
 active              = .FALSE.
 ic_filename         = 'ic_land_soil.nc'
 bc_filename         = 'bc_land_phys.nc'
 fire_algorithm      = 1
 windbreak_algorithm = 1
 lburn_pasture       = .FALSE.
/
EOF

#--------------------------------------------------------------------------------------------------

# (4) Define the input

# model files
#
add_link_file ${basedir}/data/rrtmgp-gas-lw-g128.nc         ./coefficients_lw.nc
add_link_file ${basedir}/data/rrtmgp-gas-sw-g112.nc         ./coefficients_sw.nc
add_link_file ${basedir}/data/ECHAM6_CldOptProps_rrtmgp_lw.nc             ./rrtmgp-cloud-optics-coeffs-lw.nc
add_link_file ${basedir}/data/ECHAM6_CldOptProps_rrtmgp_sw.nc             ./rrtmgp-cloud-optics-coeffs-sw.nc

#
# namelist files
#
add_required_file ${basedir}/run/${atmo_namelist}                         ./
add_required_file ${basedir}/run/${jsbach_namelist}                       ./

# dictionary file for output variable names
#
dict_file="dict.${EXPNAME}"
cat dict.iconam.mpim  > ${dict_file}
add_required_file ${basedir}/run/${dict_file}                             ./
#
# initial and boundary conditions
# 
datadir=${icon_data_poolFolder}/${grid_id}/initial_conditions/r0100
if [ ${grid_refinement} == R02B08 ] ; then
   add_link_file $datadir/ifs2icon_1979010100_0054_R02B08_G.nc               ./ifs2icon.nc
elif [ ${grid_refinement} == R02B09 ] ; then
   add_link_file $datadir/ifs2icon_1979010100_0055_R02B09_G.nc               ./ifs2icon.nc
elif [ ${grid_refinement} == R02B10 ] ; then
   add_link_file $datadir/ifs2icon_1979010100_0056_R02B10_G.nc               ./ifs2icon.nc
elif [ ${grid_refinement} == R02B04 ] ; then
   add_link_file $datadir/ifs2icon_1979010100_0049_R02B04_G.nc               ./ifs2icon.nc
fi

datadir=${icon_data_poolFolder}/${grid_id}/sst_and_seaice/r0100
if [ ${grid_refinement} == R02B08 ] ; then
   add_link_file $datadir/bc_sst_1978-2016.nc                                ./bc_sst.nc
   add_link_file $datadir/bc_sic_1978-2016.nc                                ./bc_sic.nc
elif [ ${grid_refinement} == R02B09 ] ; then
   add_link_file $datadir/bc_sst_1978-1980.nc                                ./bc_sst.nc
   add_link_file $datadir/bc_sic_1978-1980.nc                                ./bc_sic.nc
elif [ ${grid_refinement} == R02B10 ] ; then
   add_link_file $datadir/bc_sst_1978-1980.nc                                ./bc_sst.nc
   add_link_file $datadir/bc_sic_1978-1980.nc                                ./bc_sic.nc
elif [ ${grid_refinement} == R02B04 ] ; then
   add_link_file $datadir/bc_sst_1978-2021.nc                                ./bc_sst.nc
   add_link_file $datadir/bc_sic_1978-2021.nc                                ./bc_sic.nc
fi
#
# range of years for yearly files
# assume start_date and end_date have the format yyyy-...
start_year=$(( ${start_date%%-*} - 1 ))
end_year=$(( ${end_date%%-*} + 1 ))
#
# ozone
#
datadir=${icon_data_poolFolder}/${grid_id}/ozone/r0100
dataaero=${icon_data_poolFolder}/${grid_id}/aerosol_kinne/r0100
year=$start_year
while [[ $year -le $end_year ]]
do
    add_link_file $datadir/bc_ozone_historical_${year}.nc                 ./bc_ozone_${year}.nc
#    add_link_file $datadir/bc_ozone_ssp370_${year}.nc                     ./bc_ozone_${year}.nc

# for aerosol
    add_link_file $dataaero/bc_aeropt_kinne_sw_b14_fin_${year}.nc         ./bc_aeropt_kinne_sw_b14_fin_${year}.nc
  (( year = year+1 ))
done
# 
# Kinne aerosol 
add_link_file $dataaero/bc_aeropt_kinne_lw_b16_coa.nc                     ./
add_link_file $dataaero/bc_aeropt_kinne_sw_b14_coa.nc                     ./
#
datadir=${icon_data_poolFolder}/common/greenhouse_gases
add_link_file $datadir/greenhouse_ssp370.nc                               ./bc_greenhouse_gases.nc
#
datadir=${icon_data_poolFolder}/common/solar_radiation
add_link_file $datadir/swflux_14band_cmip6_1850-2299-v3.2.nc              ./bc_solar_irradiance_sw_b14.nc
#
datadir=${icon_data_poolFolder}/${grid_id}/land/r0100
#
add_link_file $datadir/ic_land_soil.nc                                    ./ic_land_soil.nc
add_link_file $datadir/bc_land_frac.nc                                    ./bc_land_frac.nc
add_link_file $datadir/bc_land_phys.nc                                    ./bc_land_phys.nc
add_link_file $datadir/bc_land_soil.nc                                    ./bc_land_soil.nc
add_link_file $datadir/bc_land_sso.nc                                     ./bc_land_sso.nc
#
# - lctlib file for JSBACH
add_link_file ${basedir}/externals/jsbach/data/lctlib_nlct21.def          ./lctlib_nlct21.def
#-----------------------------------------------------------------------------
# Parameters for all output files
# -------------------------------
cat >> ${atmo_namelist} << EOF
&io_nml
 output_nml_dict      = "${dict_file}"
 netcdf_dict          = "${dict_file}"
 itype_pres_msl       = 4
 restart_file_type    = 5
 restart_write_mode   = 'joint procs multifile'
 lnetcdf_flt64_output = .FALSE.
/
EOF

# Define output files
# -------------------
#
# 3-dimensional files include 'ps' and 'pfull' to allow the vertical
# interpolation to pressure levels by cdo ap2pl.

# fixed model data only written at initial date
if [[ "$output_atm_vgrid" == "yes" ]]; then
  #
  cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_vgrid"
 filename_format  = "<output_filename>_<levtype_l>"
 filetype         = 5
 remap            = 0
 output_grid      = .TRUE.
 output_start     = "${start_date}"             ! output_start = output_end
 output_end       = "${start_date}"             ! --> write once only irrespective of
 output_interval  = "${atm_output_interval_2d}" !     the output interval and
 file_interval    = "${atm_file_interval}"      !     the file interval
 ml_varlist       = 'zghalf'  , 'zg'      , 'dzghalf'
/
EOF
fi
#
if [[ "$output_atm_2d_hiopy" == "yes" ]]; then
  #
  cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_2d_PT20M_ml"
 filename_format  = "<output_filename>_<datetime2>"
 filetype         = 5
 mode             = 1
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "PT20M" !
 file_interval    = "${atm_file_interval}"    !     the file interval
 operation        = 'mean'
 ml_varlist       = 'pr', 'qv2m', 'rlut', 'rsds', 'sfcwind', 'tas'
/
&output_nml
 output_filename  = "${EXPNAME}_atm_2d_PT3H_ml"
 filename_format  = "<output_filename>_<datetime2>"
 filetype         = 5
 mode             = 1
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "PT3H" !
 file_interval    = "${atm_file_interval}"    !     the file interval
 operation        = 'mean'
 ml_varlist       = 'clivi', 'cllvi', 'qv2m', 'hfls', 'hfss', 'pr',
                    'pres_msl', 'pres_sfc', 'prls', 'prw',
                    'qgvi', 'qrvi', 'qsvi', 'rlds','rlus', 'rlut',
                    'rsds', 'rsdt', 'rsus','rsut', 'sfcwind',
                    'sic', 'sit', 'tas','tauu', 'tauv', 'ts',
                    'uas', 'vas',
/
EOF
fi
if [[ $output_atm_2d_P1D ]]; then
  #
  cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_2d_P1D_ml"
 filename_format  = "<output_filename>_<datetime2>"
 filetype         = 5
 mode             = 1
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "P1D" !
 file_interval    = "${atm_file_interval}"    !     the file interval
 operation        = 'mean'
 ml_varlist       = 'tas'     ,
                    'cllvi'   , 'clivi'   , 'hfls'    , 'hfss'    ,
                    'pr'      , 'prw'     , 'prls'    , 'prlr'    ,
                    'pr_rain' , 'pr_ice'  , 'pr_snow' , 'pr_grpl' ,
                    'qgvi'    , 'qrvi'    , 'qsvi'    ,
                    'rlds'    , 'rlus'    , 'rlut'    ,
                    'rsds'    , 'rsdt'    , 'rsus'    , 'rsut'    ,
                    'sfcwind' , 'sic'     , 'sit'     ,
                    'tauu'    , 'tauv'    , 'evspsbl' ,
                    'uas'     , 'vas'     , 'ps'      , 'ts'      ,
                    'psl'     , 'clt'     , 'qv2m'    ,
                    'pres_msl', 'pres_sfc',
/
EOF
fi
#
if [[ "$output_atm_3d_hiopy" == "yes" ]]; then
  #
  # Daily files for 3d
  #
  cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_3d_P1D_1"
 filename_format  = "<output_filename>_<datetime2>"
 filetype         = 5
 mode             = 1
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 operation        = 'mean'
 output_interval  = "${atm_output_interval_3d}" !     the output interval and
 file_interval    = "P1D"    !     the file interval
 ml_varlist       = 'wa', 'ua', 'va', 'rho'
 m_levels         = "${m_levels}"
/
&output_nml
 output_filename  = "${EXPNAME}_atm_3d_P1D_2"
 filename_format  = "<output_filename>_<datetime2>"
 filetype         = 5
 mode             = 1
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 operation        = 'mean'
 output_interval  = "${atm_output_interval_3d}" !     the output interval and
 file_interval    = "P1D"    !     the file interval
 ml_varlist       = 'hus', 'clw', 'cli',
 m_levels         = "${m_levels}"
/
&output_nml
 output_filename  = "${EXPNAME}_atm_3d_P1D_3"
 filename_format  = "<output_filename>_<datetime2>"
 filetype         = 5
 mode             = 1
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 operation        = 'mean'
 output_interval  = "${atm_output_interval_3d}" !     the output interval and
 file_interval    = "P1D"    !     the file interval
 ml_varlist       = 'qg', 'qr', 'qs',
 m_levels         = "${m_levels}"
/
&output_nml
 output_filename  = "${EXPNAME}_atm_3d_P1D_4"
 filename_format  = "<output_filename>_<datetime2>"
 filetype         = 5
 mode             = 1
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 operation        = 'mean'
 output_interval  = "${atm_output_interval_3d}" !     the output interval and
 file_interval    = "P1D"    !     the file interval
 ml_varlist       = 'ta', 'pfull', 'phalf'
 m_levels         = "${m_levels}"
/
EOF
fi
#
if [[ "$output_atm_gmean" == "yes" ]]; then
  #
  cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_mon"
 filename_format  = "<output_filename>_<datetime2>"
 filetype         = 5
 mode             = 1
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "PT6H" !
 file_interval    = "${atm_file_interval}"    !     the file interval
 include_last     = .FALSE.
 operation        = 'mean' ! mean over output interval
 ml_varlist       = 'tas_gmean', 'rsdt_gmean', 'rsut_gmean', 'rlut_gmean',
                    'radtop_gmean', 'prec_gmean', 'evap_gmean', 'fwfoce_gmean',
                    'ufts_gmean', 'ufvs_gmean', 'ufcs_gmean', 'radbal_gmean',
                    'kedisp_gmean', 'udynvi_gmean', 'duphyvi_gmean',
                    'uphybal_gmean'
/
&output_nml
 output_filename  = "${EXPNAME}_lnd_mon"
 filename_format  = "<output_filename>_<datetime2>"
 filetype         = 5
 mode             = 1
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "PT6H" !
 file_interval    = "${atm_file_interval}"    !     the file interval
 include_last     = .FALSE.
 operation        = 'mean' ! mean over output interval
 ml_varlist       = 'hydro_trans_gmean_box', 'hydro_evapotrans_gmean_box',
                    'hydro_weq_land_gsum_box', 'hydro_discharge_ocean_gsum_box',
                    'hydro_wtr_rootzone_rel_gmean_box',
                    'hydro_fract_snow_gsum_box', 'hydro_weq_snow_gsum_box',
                    'pheno_lai_ta_gmean_box', 'pheno_fract_fpc_gmean_box',
                    'seb_t_gmean_box'
/
EOF
fi
#
# output for quickplots
#
if [[ "$output_atm_qp" == "yes" ]]; then
  #
  cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_3d_qp_ml"
 filename_format  = "<output_filename>_<datetime2>"
 filetype         = 5
 mode             = 1
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 operation        = 'mean'
 output_interval  = "${atm_output_interval_3d}" !     the output interval and
 file_interval    = "${atm_file_interval}"    !     the file interval
 ml_varlist       = 'ta', 'ua', 'va', 'hus'
/
EOF
# end quickplot-output
fi

#
#  get model
#
ls -l ${MODEL}
check_error $? "${MODEL} does not exist?"
#
ldd ${MODEL}
