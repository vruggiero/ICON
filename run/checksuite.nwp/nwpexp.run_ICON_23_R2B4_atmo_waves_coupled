#!/bin/bash

# ICON
#
# ------------------------------------------
# Copyright (C) 2004-2024, DWD, MPI-M, DKRZ, KIT, ETH, MeteoSwiss
# Contact information: icon-model.org
# See AUTHORS.TXT for a list of authors
# See LICENSES/ for license information
# SPDX-License-Identifier: BSD-3-Clause
# ------------------------------------------

# ----------------------------------------------------------------------------
#
# Coupled atmosphere-waves run with R2B4 grids
#
# This basic coupled test case computes a few days with
# global weather forecast (ICON-NWP) coupled to ICON-wave.
# The system is set up on the R2B4 atmospheric grid with reduced radiation
# grid and the R2B4 waves 'water-only' grid.

# The purpose is the technical testing of the coupled setup.
#
# Mikhail Dobrynin 23.06.2023
#
# PBS options: NE=1-64, CPE=8
#

ulimit -s 2097152
ulimit -c 0

#=============================================================================

make_and_change_to_experiment_dir # function in ../add_run_routines

# Combine START and MODEL if START_MODEL is not already set.
# START_MODEL is used to ease the execution of a machine that uses a complex
# mpirun command with multiple binaries
START_MODEL="${START_MODEL:=$START $MODEL}"

# set icon_data_poolFolder
icon_data_poolFolder="${icon_data_rootFolder:-/pool/data/ICON}/buildbot_data/nwp"

# environment variables for the experiment and the target system
# --------------------------------------------------------------
export EXPNAME="couple_atmo_waves_R2B4_23"

# start and end date+time of experiment
# -------------------------------------
start_date=${start_date:="1979-01-01T00:00:00Z"}
    end_date=${end_date:="1979-01-06T00:00:00Z"}

# restart=checkpoint intervals (= file length)
# --------------------------------------------
restart_interval="P10Y"         #  no restart used for NWP
checkpoint_interval="P10Y"      #  write checkpoint

# file interval - not used, so select longer than restart-interval
atm_file_interval="P100Y"
wave_file_interval="P100Y"

# output intervals
# ----------------
atm_output_interval="PT1H"        # "PT30M"
wave_output_interval="PT1H"        # "PT1H"


#=============================================================================
#
# OpenMP environment variables
# ----------------------------
export OMP_NUM_THREADS=1         # openMPI deactivated - best (needs compiling)
export ICON_THREADS=1
export OMP_SCHEDULE=dynamic,1
export OMP_DYNAMIC="false"
export OMP_STACKSIZE=200M
export NMPI_PROGINF=DETAIL       # get performance details (Jens-Olaf Beismann)

# Run information
PPN=-1
CPE=${CPE:-128}
NE=${NE:-1}
((PPN=CPE*NE/OMP_NUM_THREADS))
((NE1=NE-1))
echo "PPN etc. NN=$NN NE=$NE CPE=$CPE PPN=$PPN"

#
# MPI variables
# -------------

# NEC has PPN=NE*CPE mpi processes (OMP_NUM_THREADS=1)
# they will be devided in wave and atmosphere

mpi_total_procs=${PPN}

# at least one node for ocean and atmosphere each is necessary
# default: half of requested nodes for ocean

mpi_waves_procs=8    # optimal: 8/16 for NE=4/8 dt=600/dt_rad=3600, 12 dt=450/dt_rad=3600, 8 dt=360/dt_rad=1800

nproma_atm=$nproma
nproma_wave=$nproma

# asynchronous diagnostic output processes
# ----------------------------------------

# Note that "mpi_atm_io_procs" must match the number of output files
mpi_atm_io_procs=1      # >0 for atmosphere plus land (not working for monitoring)
mpi_waves_io_procs=0      # ? >0 for waves is not working yet
ICON_COMPONENT2_proc0_shift=0 # proc0_shift does not work yet with WAVES

#=============================================================================


#=============================================================================

# root directory for input data
DATAROOT="${icon_data_poolFolder}/Checksuite_data/ICON-seamless"


# base directory for ICON sources and binary:
ICONDIR="$basedir" # basedir is provided by create_target_header

# run script directory
job_name="nwpexp.run_ICON_23_R2B4_atmo_waves_coupled.run"        # name of run script
RUNSCRIPTDIR=${ICONDIR}/run/checksuite.nwp                 # directory of run script

rm -rf stdout.* stderr.*      # remove standard output from previous run

#=============================================================================
#
# Basic test case for the ICON-NWP coupled to the ICON-WAVE.
#
# This section of the run script contains the specifications of the experiment.
# The specifications are passed by namelist to the program.
# For a complete list see Namelist_overview.pdf
#
# Initial revision: 2021-01-27, S. Lorenz, MPI-M
#
#-----------------------------------------------------------------------------
#
# Basic specifications of the simulation
# --------------------------------------
#
# These variables are set in the header section of the completed run script:
#
# EXPNAME = experiment name
# NPROMA  = array blocking length / inner loop length
#-----------------------------------------------------------------------------

# (0) Basic model configuration
# -----------------------------

atmos_gridID="0043"
atmos_refinement="R02B04"

rad_gridID="0011"
rad_refinement="R02B03"
#
#-----------------------------------------------------------------------------

# namelist files
# --------------
atm_namelist=NAMELIST_${EXPNAME}_atm
wave_namelist=NAMELIST_${EXPNAME}_wave

#--------------------------------------------------------------------------------------------------
#
# (1) Define the model time stepping
# ----------------------------------
#
# NWP:                           # 360s or 450s for R2B4
waveTimeStep="PT450S"            # wave time step
atmTimeStep="PT450S"             # atmos time step (for coupler)
couplingTimeStep="PT60M"         # coupling time step
longcouplingTimeStep="P100Y"     # no coupling (long coupling period)

#--------------------------------------------------------------------------------------------------

# (2) unset some setting of create_target_header for mistral

unset OMPI_MCA_coll_fca_enable
unset OMPI_MCA_coll_fca_priority

#--------------------------------------------------------------------------------------------------

# (3) Set variables to configure the experiment:
# ----------------------------------------------

# use alternatively: full restart, init from (ocean) restart, init from climatology or false
#  - set to false if ocean was already initialised
# initialiseOcean="fromRestart"             # first run
#initialiseOcean="fromClimatology"           # from Levitus observations (current time, mean last 10 years)
# initialiseOcean="fromRestartwithHamocc"

# use both lines for atm/oce initialisation from other experiment
#initialiseOcean="FALSE"                    # restart run (maybe copy from other run)
#restart=.true.                             # deactivate semaphore mechanism

# set initialiseOcean automatically to false via isRestart.sem
#if [ -d "$basedir/experiments/$EXPNAME" ] ; then
#  if [ -f "$basedir/experiments/$EXPNAME/isRestartRun.sem" ]; then
#    initialiseOcean="FALSE"
#  fi
#fi
#if [ -d "$EXPDIR" ] ; then
#  if [ -f "$EXPDIR/isRestartRun.sem" ]; then
#    initialiseOcean="FALSE"
#  fi
#fi

# output file selection
# ---------------------
#
# output_<xyz>=yes : yes --> output files for <xyz>, any other value --> no files for <xyz>

# monitoring output switches
output_atm_mon=yes
#output_oce_mon=yes
#output_oce_moc=no      #  calc_moc is called every timestep - switch off for high resolutions
#output_oce_def=no       #  annual mean is sufficient
#oce_output_interval_def="P1Y"  # annual mean output for deep ocean
#oce_output_interval_def=$oce_output_interval
#oce_output_interval_mon=$oce_output_interval

# sea ice, snow, SST and some deeper levels ocean output
#output_oce_ice=yes

# standard debug-flux arrays at surface
output_atm_dbg=yes
#output_oce_dbg=yes

# output switches for large atm/oce files - set to "yes" if needed for standard quickplots
#  - yes writes much output and needs more computing time at least in high resolution

# output switches for HAMOCC files

#--------------------------------------------------------------------------------------------------
# I. coupling section
#--------------------------------------------------------------------------------------------------

if [ $mpi_total_procs -lt 2 ] ; then
  check_error 0 "This setup requires at least 2 mpi processes. Exit"
fi

# I.1 Split the number of total procs and assign to each component
# ----------------------------------------------------------------
atm_min_rank=0
atm_max_rank=$(( mpi_total_procs - mpi_waves_procs + mpi_atm_io_procs + proc0_shift - 1 ))
atm_inc_rank=1
wave_min_rank=$(( atm_max_rank + 1 ))
wave_max_rank=$(( wave_min_rank + mpi_waves_procs + mpi_waves_io_procs + ICON_COMPONENT2_proc0_shift - 1 ))
wave_inc_rank=1
#
echo " atm_min_rank="$atm_min_rank "  atm_max_rank="$atm_max_rank
echo "wave_min_rank="$wave_min_rank "wave_max_rank="$wave_max_rank


#
# I.2 Fill model list
# -------------------
#
namelist_list[0]="$atm_namelist"
modelname_list[0]="atmo"
modeltype_list[0]=1
minrank_list[0]=$atm_min_rank
maxrank_list[0]=$atm_max_rank
incrank_list[0]=$atm_inc_rank
#
namelist_list[1]="$wave_namelist"
modelname_list[1]="wave"
modeltype_list[1]=98
minrank_list[1]=$wave_min_rank
maxrank_list[1]=$wave_max_rank
incrank_list[1]=$wave_inc_rank


# I.3 YAC coupling library configuration
#-----------------------------------------------------------------------------

atm_lag=1
wave_lag=1

cat > coupling_${EXPNAME}.yaml << EOF
definitions:
  atm2wave: &atm2wave
    src_component: ${modelname_list[0]}
    src_grid: icon_atmos_grid
    tgt_component: ${modelname_list[1]}
    tgt_grid: icon_waves_grid
    time_reduction: average
    src_lag: ${atm_lag}
    tgt_lag: ${wave_lag}
  wave2atm: &wave2atm
    src_component: ${modelname_list[1]}
    src_grid: icon_waves_grid
    tgt_component: ${modelname_list[0]}
    tgt_grid: icon_atmos_grid
    time_reduction: average
    src_lag: ${wave_lag}
    tgt_lag: ${atm_lag}
  interp_stacks:
    hcsbb_interp_stack: &hcsbb_interp_stack
      interpolation:
        - bernstein_bezier
        - nnn:
            n: 4
            weighted: arithmetic_average
        - fixed:
            user_value: -999.9

timestep_unit: ISO_format
calendar: proleptic-gregorian
coupling:
  - <<: [ *atm2wave, *hcsbb_interp_stack ]
    coupling_period: ${couplingTimeStep}
    field: [zonal_wind_in_10m,
            meridional_wind_in_10m,
            fraction_of_ocean_covered_by_sea_ice]
  - <<: [ *wave2atm, *hcsbb_interp_stack ]
    coupling_period: ${couplingTimeStep}
    field: [roughness_length]
EOF

# yaml files for yac
# ------------------
add_required_file                 coupling_${EXPNAME}.yaml     ./coupling.yaml

#
#-----------------------------------------------------------------------------
# II. ATMOSPHERE
#-----------------------------------------------------------------------------
#
#-----------------------------------------------------------------------------
# NWP model parameters
atmo_model_equations=3 # equation system
nlev=90           # nlev = number of full levels
iforcing=3        # 3 for inwp forcing; 0 for no forcing
#
#-----------------------------------------------------------------------------

# link files directly
#atmo_grid_source=icon_grid_0013_R02B04_G.nc                     #  use atmo grid for atmosphere
#atmo_grid_source=icon_grid_0036_R02B04_G.nc                     #  use ocean global grid for atmosphere
atmo_grid_source=icon_grid_${atmos_gridID}_R02B04_G.nc           #  use atmo grid for atmosphere
atmo_grid_target=iconR02B04_DOM01.nc                             #  needed in name of ifs2icon and extpar data
atmo_grid_folder=${DATAROOT}        # /hpc/uwork/mkoehler/run-icon/coupled

add_link_file ${atmo_grid_folder}/${atmo_grid_source} ./$atmo_grid_target

# NWP Extpar and ifs2icon specificatons

INDIR=${DATAROOT}                   # /hpc/uwork/mkoehler/run-icon/coupled
#add_link_file $INDIR/external_parameter_icon_icon_grid_0013_R02B04_G_tiles.nc           extpar_iconR02B04_DOM01.nc
#add_link_file $INDIR/external_parameter_icon_icon_grid_0013_R02B04_G_tiles_oceanLSM.nc  extpar_iconR02B04_DOM01.nc   # old
#add_link_file $INDIR/external_parameter_icon_icon_grid_0036_R02B04_G_tiles_oceanLSM.nc2 extpar_iconR02B04_DOM01.nc
add_link_file $INDIR/ExtParSLM_grid_${atmos_gridID}.nc                                   extpar_iconR02B04_DOM01.nc   # Stephan


#add_link_file $INDIR/nn-0013-ifs2icon_R2B04.nc       ifs2icon_R2B04_DOM01.nc
#add_link_file $INDIR/ifs2icon_0013_r0002_20140601.nc ifs2icon_R2B04_DOM01.nc
add_link_file $INDIR/ifs2icon_1979010100_R02B04_G.nc  ifs2icon_R2B04_DOM01.nc

# files needed for radiation
add_link_file ${basedir}/data/ECHAM6_CldOptProps.nc .
add_link_file ${basedir}/data/rrtmg_lw.nc .

ecRad_data_path=${basedir}'/externals/ecrad/data'

# Kinne background aerosols for the year 1850 (irad_aero=12, filename without year)

datadir=${DATAROOT}    # /hpc/uwork/icon-sml/Aerosol/Kinne_interpolated/R2B4
add_link_file ${datadir}/R2B4_aeropt_kinne_lw_b16_coa.nc      bc_aeropt_kinne_lw_b16_coa.nc
add_link_file ${datadir}/R2B4_aeropt_kinne_sw_b14_coa.nc      bc_aeropt_kinne_sw_b14_coa.nc

# use exclusively Kinne background aerosols for the year 1850, filename without year (irad_aero=12)
add_link_file ${datadir}/R2B4_aeropt_kinne_sw_b14_fin_1850.nc bc_aeropt_kinne_sw_b14_fin.nc

#-----------------------------------------------------------------------------


#-----------------------------------------------------------------------------

# If the model runs with mpi_procs=1, then this script exits without error:
if [[ ${mpi_total_procs} = 1 ]]; then
  echo "This test must not be started if mpi_procs=1 --> exit test without error"
  check_error 0 "exp.nat_jww_nwp_mpiomp"
  exit 0
fi

# If running in parallel, mpi_procs*no_of_nodes must be bigger than 2:
#n_procs=`expr ${mpi_procs_pernode} \* ${no_of_nodes}`
n_procs=${mpi_total_procs}

if [[ ${n_procs} = 2 ]]; then
  echo "This test needs at least 3 MPI processes --> increase mpi_procs from 2 to 3"
  mpi_procs=3
  START=${START%2}3
fi

# reconstruct the grid parameters in namelist form
dynamics_grid_filename=""
for gridfile in ${atmo_dyn_grids}; do
  dynamics_grid_filename="${dynamics_grid_filename} '${gridfile}',"
done
dynamics_parent_grid_id="${dynamics_parent_grid_id},"
#

#-----------------------------------------------------------------------------
#
# write ICON-NWP atmospheric namelist parameters
# ------------------------
# For a complete list see Namelist_overview and Namelist_overview.pdf
#

cat > ${atm_namelist} << EOF
!
&coupling_mode_nml
 coupled_to_waves        = .TRUE.
/
&parallel_nml
 nproma                  = ${nproma_atm}
 nproma_sub              = ${nproma_sub} ! loop chunk length for radiation
 p_test_run              = .false.
 l_test_openmp           = .false.
 l_log_checks            = .true.
 num_io_procs            = ${mpi_atm_io_procs}
 num_restart_procs       = 0
 num_prefetch_proc       = 0
 num_io_procs_radar      = 0
 iorder_sendrecv         = 3
 proc0_shift             = ${proc0_shift}
 use_omp_input           = .true.
/
&grid_nml
 dynamics_grid_filename  = '${atmo_grid_target}'
 radiation_grid_filename = " "
 dynamics_parent_grid_id = 0,1
 lredgrid_phys           = .false.,.false.
 lfeedback               = .false.
/
&run_nml
 num_lev                 = ${nlev},${nlev}      ! number of full levels of vertical grid
 modelTimeStep           = "${atmTimeStep}"     ! [s] timestep in ISO format, because dtime is legacy and should be avoided
 ldynamics               = .TRUE.               ! dynamics
 ltransport              = .TRUE.               ! transport
 iforcing                = ${iforcing}          !
 ntracer                 =  5                   ! number of tracers - default 0
 ltestcase               = .false.              ! initialize with real data
 ltimer                  = .true.               !
 timers_level            = 20                   ! 10 useful and cheap
 msg_level               = 10                   ! detailed report during integration (7 or 13, > 10 expensive)
 output                  = 'nml'
 check_uuid_gracefully   = .true.
 Restart_filename        = "${EXPNAME}_restart_atm_<rsttime>.nc"
/
&dynamics_nml
 lcoriolis               = .TRUE.
 divavg_cntrwgt          = 0.50
/
&diffusion_nml
 hdiff_order             = 5
 hdiff_efdt_ratio        = 24.0
 hdiff_smag_fac          = 0.025
 lhdiff_vn               = .TRUE.
 lhdiff_temp             = .TRUE.
 hdiff_multfac           = 1.0
 hdiff_tv_ratio          = 1.0
/
&nwp_phy_nml
 inwp_gscp               = 1
 inwp_convection         = 1
 inwp_radiation          = 4
 inwp_cldcover           = 1
 inwp_turb               = 1
 inwp_satad              = 1
 inwp_sso                = 1
 inwp_gwd                = 1
 inwp_surface            = 1
 latm_above_top          = .false.
 efdt_min_raylfric       = 7200.
 itype_z0                = 2
 icapdcycl               = 3
!icpl_aero_conv          = 1
!icpl_aero_gscp          = 1
 icpl_o3_tp              = 1
 !lshallow_liquid_only   = .true.
 dt_rad                  = 3600.
 dt_conv                 = 1800.
 dt_sso                  = 1800.
 dt_gwd                  = 1800.
/
&nwp_tuning_nml
 itune_albedo            = 0                         ! somewhat reduced albedo (w.r.t. MODIS data) over Sahara in order to reduce cold bias
 tune_zceff_min          = 0.025                     ! ** default value to be used for R3B7; use 0.025 for R2B6 in order to get similar temperature biases in upper troposphere **
 tune_gkdrag             = 0.075                     ! R2B6: 0.075
 tune_gkwake             = 1.5                       ! R2B6: 1.5
 tune_gfrcrit            = 0.425                     ! R2B6: 0.425
 tune_dust_abs           = 0.
 tune_zvz0i              = 0.85
 tune_box_liq_asy        = 3.25                      ! oper global: 3.0 , oper D2: 3.25, default: 2.5
 tune_box_liq            = 0.05
 tune_rcucov             = 0.075
 tune_rhebc_land         = 0.825
 tune_gust_factor        = 7.0
 icpl_turb_clc           = 1
 lcalib_clcov            = .false.                   ! turn off TCC, HCC, MCC, LCC tuning
/
&turbdiff_nml
 tkhmin                  = 0.6
 tkhmin_strat            = 1.0
 tkmmin                  = 0.75
 tkmmin_strat            = 4
 alpha0                  = 0.0123
 alpha0_max              = 0.0335
 alpha1                  = 0.125
 pat_len                 = 750.
 c_diff                  = 0.2
 rlam_heat               = 10.0
 rat_sea                 = 0.8
 ltkesso                 = .true.                    ! SSO dissipation energy used in TKE equation
 frcsmot                 = 0.2                       ! these 2 switches together apply vertical smoothing of the TKE source terms
 imode_frcsmot           = 2                         ! in the tropics (only), which reduces the moist bias in the tropical lower troposphere
 itype_sher              = 3                         ! use horizontal shear production terms with 1/SQRT(Ri) scaling to prevent unwanted side effects
 ltkeshs                 = .true.
 a_hshr                  = 2.0
 icldm_turb              = 1                         ! 2: Gauss clouds for turbulence    1: grid scale clouds
 icldm_tran              = 2                         ! 2: Gauss clouds for surface layer 1: grid scale clouds
/
&transport_nml
 ivadv_tracer            = 3,3,3,3,3
 itype_hlimit            = 3,4,4,4,4,0
 ihadv_tracer            = 32,2,2,2,2,0
/
&interpol_nml
nudge_zone_width         = 8
l_intp_c2l               = .true.
rbf_scale_mode_ll        = 2
! l_mono_c2l             = .true.
! lsq_high_ord           = 3
! support_baryctr_intp XS  =.true.,
/
&nonhydrostatic_nml
 iadv_rhotheta           = 2
 ivctype                 = 2
 itime_scheme            = 4
 exner_expol             = 0.333
 vwind_offctr            = 0.2                       ! 0.2 for R2B6 and higher resolution, 0.3 for lower resolution
 damp_height             = 44000.
 rayleigh_coeff          = 0.5
 divdamp_order           = 24                        ! 2 ass, 24 fc
 divdamp_type            = 32                        ! optional: 2 assimilation cycle, 32 forecast
 divdamp_fac             = 0.004                     ! 0.004 for R2B6; recommendation for R3B7: 0.003
 divdamp_trans_start     = 12500
 divdamp_trans_end       = 17500
 igradp_method           = 3
 l_zdiffu_t              = .true.
 thslp_zdiffu            = 0.02
 thhgtd_zdiffu           = 125.
 htop_moist_proc         = 22500.
 hbot_qvsubstep          = 16000.
/
&sleve_nml
 min_lay_thckn           = 20.                       ! lowest level thickness (between half-levels)
 max_lay_thckn           = 400.                      ! maximum layer thickness below htop_thcknlimit
 htop_thcknlimit         = 14000.
 top_height              = 75000.
 stretch_fac             = 0.9
 decay_scale_1           = 4000.
 decay_scale_2           = 2500.
 decay_exp               = 1.2
 flat_height             = 16000.
/
&io_nml
 lflux_avg               = .FALSE.                   ! false: accumulated fluxes
 itype_pres_msl          = 5                         ! (1) 3: IFS-type extrapolation
 itype_rh                = 1                         ! (1) 2: mixed phase (water and ice)
!dt_checkpoint           = 2592000.                  ! 30 days
 inextra_3d              = 2                         ! 3D extra variables
 inextra_2d              = 10                        ! 2D extra variables
!lnetcdf_flt64_output    = .TRUE.                    ! 64 bit output in all files
!lkeep_in_sync           = .TRUE.                    ! sync after each timestep
/
&output_nml    !! lat-lon output
 output_start            = "${start_date}"           ! output_start = output_end
 output_end              = "${end_date}"
 output_interval         = "${atm_output_interval}"  ! the output interval and
!operation               = "mean"                    ! only working with remap=0
 file_interval           = "${atm_file_interval}"    ! the file interval
 filetype                = 4                         ! output format: 2=GRIB2, 4=NETCDFv2
 dom                     = -1
 mode                    = 1                         ! 1: forecast mode (relative t-axis)
 include_last            = .TRUE.                    ! flag whether to include the last time step
 output_filename         = '${EXPNAME}_atm'          ! file name base
 filename_format         = '<output_filename>_<levtype>_<datetime2>'
 output_grid             = .TRUE.                    ! flag whether grid information is added to output.
 ml_varlist              = 'sp_10m', 'fr_seaice', 'gz0', 'z0_waves'
/
!&dbg_index_nml
!  idbg_mxmn             = 4                         ! initialize MIN/MAX  debug output
!  idbg_val              = 0                         ! initialize one cell debug output
!  idbg_slev             = 1                         ! initialize start level for debug output
!/
&extpar_nml
 itopo                   = 1
 n_iter_smooth_topo      = 1
 heightdiff_threshold    = 3000.
/
&lnd_nml
 ntiles                  = 3
 nlev_snow               = 3
 lmulti_snow             = .false.
 itype_heatcond          = 3
 idiag_snowfrac          = 20
 lsnowtile               = .true.
 lseaice                 = .true.
 llake                   = .true.
 itype_lndtbl            = 4
 itype_evsl              = 4
 itype_trvg              = 3
 itype_root              = 2
 cwimax_ml               = 5.e-4
 c_soil                  = 1.25
 c_soil_urb              = 0.5
 sstice_mode             = 1                         ! 1 for coupled
 lprog_albsi             = .true.
 hice_min                = 0.05                      ! default of nwp sea-ice model
 hice_max                = 4.8                       ! corresponding to 40% seaice_limit in icon-o
 itype_snowevap          = 2
/
&radiation_nml
 irad_o3                 = 79
 irad_aero               = 6                ! 6: default, 12: Kinne aerosols (Trang)
 izenith                 = 4                ! 4: NWP default, 3: no annual cycle
 albedo_type             = 2                ! Modis albedo
                         ! values for 2012    values for 1850 CE
 vmr_co2                 = 390.e-06         ! 284.3e-06
 vmr_ch4                 = 1800.e-09        ! 808.2e-09
 vmr_n2o                 = 322.0e-09        ! 273.0e-09
 vmr_o2                  = 0.20946
 vmr_cfc11               = 240.e-12         ! 0.0
 vmr_cfc12               = 532.e-12         ! 0.0
 direct_albedo           = 4
 direct_albedo_water     = 3
 albedo_whitecap         = 1
 ecrad_llw_cloud_scat    = .true.
 ecRad_data_path         = '${ecRad_data_path}'
 isolrad                 = 1
 ecrad_isolver           = ${radiation_ecrad_isolver}
 ! Solver version. 2: McICA with OpenACC, 0: McICA
/
&meteogram_output_nml
  lmeteogram_enabled     = .false., .false.
  n0_mtgrm               = 0                          ! meteogram initial time step (0 is first step!)
  ninc_mtgrm             = 2, 4 ! meteogram output interval (in terms of time steps)
  ldistributed           = .false., .false.
  stationlist_tot        =  50.0,       8.6,    'Frankfurt-Flughafen',
                            52.260,    14.313,  'Lindenberg_Obs',
                            52.1873,   13.9894, 'Waldstation_Kehrigk',
                            52.1215,   14.1077, 'Falkenberg',
/
EOF

#
#-----------------------------------------------------------------------------
# add standard atmo_non-hydrostatic_files
. ${ICONDIR}/run/add_required_atmo_non-hydrostatic_files


#-----------------------------------------------------------------------------
# III. WAVES
#-----------------------------------------------------------------------------

DATAROOT="${icon_data_poolFolder}/Checksuite_data"
GRIDDIR=${DATAROOT}/ICON-waves
EXTPARDIR=${DATAROOT}/ICON-waves


# grid files
ln -sf ${GRIDDIR}/ocean_icon_waves_grid_0010_R02B04_G_DOM01.nc ocean_icon_waves_grid_0023_R02B04_G_DOM01.nc
# external parameter (from ExtPar tool)
ln -sf ${EXTPARDIR}/extpar_ocean_icon_waves_grid_0010_R02B04_G_DOM01.nc extpar_ocean_icon_waves_grid_0023_R02B04_G_DOM01.nc


# ----------------------------------------------------------------------------
# grid namelist settings
# ----------------------------------------------------------------------------
wave_grid=ocean_icon_waves_grid_0023_R02B04_G_DOM01.nc
wave_extpar=extpar_ocean_icon_waves_grid_0023_R02B04_G_DOM01.nc
dynamics_grid_filename=""
for gridfile in ${wave_grid}; do
  dynamics_grid_filename="${dynamics_grid_filename} '${gridfile}',"
done


# ----------------------------------------------------------------------------
#
# wave namelist
# --------------
#spectral resolution
nd=12          # NUMBER OF DIRECTIONS
nf=25          # NUMBER OF FREQUENCIES

cat > ${wave_namelist} <<EOF
 &coupling_mode_nml
  coupled_to_atmo     = .TRUE.
/
&run_nml
 num_lev              = 1
 modelTimeStep        = "${waveTimeStep}"     ! [s] timestep in ISO format, because dtime is legacy and should be avoided
 ltimer               = .true.
 timers_level         = 10
 msg_level            = 15
 ltestcase            = .FALSE.       ! run testcase
 ldynamics            = .TRUE.
 ltransport           = .FALSE.
 ntracer              = $((${nd}*${nf}))
 output               = "nml"
/
 &parallel_nml
  nproma               = ${nproma_wave}
  p_test_run           = .false.
  l_test_openmp        = .false.
  l_log_checks         = .false.
  num_io_procs         = ${mpi_waves_io_procs}
  num_restart_procs    = 0  ! number of restart processors
  num_prefetch_proc    = 0  ! number of processors for LBC prefetching
  num_io_procs_radar   = 0
  proc0_shift          = ${ICON_COMPONENT2_proc0_shift}
  num_dist_array_replicas = 4
  iorder_sendrecv      = 1
 /
 &grid_nml
  dynamics_grid_filename      = ${dynamics_grid_filename}
 /
 &extpar_nml
  itopo = 0
  extpar_filename = '${wave_extpar}'
 /
 &wave_nml
  ndirs       = ${nd}   ! number of directions
  nfreqs      = ${nf}   ! number of frequencies
  forc_file_prefix = '' ! prefix of forcing file name
 /
 &output_nml
  filetype                =                          4         ! output format: 2=GRIB2, 4=NETCDFv2
  dom                     =                         -1         ! write all domains
  output_start            =            "${start_date}"
  output_end              =              "${end_date}"
  output_interval         =  "${wave_output_interval}"
  mode                    =                          1       ! 1: forecast mode (relative t-axis), 2: climate mode (absolute t-axis)
  include_last            =                      .TRUE.      ! flag whether to include the last time step
  output_filename         =                      'WAVE'      ! file name base
  file_interval           =    "${wave_file_interval}"       ! the file interval
  output_grid             =                      .TRUE.      ! flag whether grid information is added to output.
  ml_varlist              = 'bathymetry_c','z0',
                            'group:wave_forcing','group:wave_short'
/
EOF



#-----------------------------------------------------------------------------
#
# directories definition
#
#RUNSCRIPTDIR=${basedir}/run
if [ x$grids_folder = x ] ; then
   HGRIDDIR=${basedir}/grids
else
   HGRIDDIR=$grids_folder
fi

#-----------------------------------------------------------------------------
final_status_file=${EXPDIR}/${job_name}.final_status
rm -f ${final_status_file}

#-----------------------------------------------------------------------------
# set up the model lists if they do not exist
# this works for single model runs
# for coupled runs the lists should be declared explicilty
if [ x$namelist_list = x ]; then
#  minrank_list=(        0           )
#  maxrank_list=(     65535          )
#  incrank_list=(        1           )
  minrank_list[0]=0
  maxrank_list[0]=65535
  incrank_list[0]=1
  if [ x$atm_namelist != x ]; then
    # this is the atmo model
    namelist_list[0]="$atm_namelist"
    modelname_list[0]="atmo"
    modeltype_list[0]=1
    run_atmo="true"
  elif [ x$ocean_namelist != x ]; then
    # this is the ocean model
    namelist_list[0]="$ocean_namelist"
    modelname_list[0]="oce"
    modeltype_list[0]=2
  elif [ x$psrad_namelist != x ]; then
    # this is the psrad model
    namelist_list[0]="$psrad_namelist"
    modelname_list[0]="psrad"
    modeltype_list[0]=3
  elif [ x$hamocc_namelist != x ]; then
    # this is the hamocc model
    namelist_list[0]="$hamocc_namelist"
    modelname_list[0]="hamocc"
    modeltype_list[0]=4
  elif [ x$wave_namelist != x ]; then
    # this is the wave model
    namelist_list[0]="$wave_namelist"
    modelname_list[0]="wave"
    modeltype_list[0]=98
  elif [ x$testbed_namelist != x ]; then
    # this is the testbed model
    namelist_list[0]="$testbed_namelist"
    modelname_list[0]="testbed"
    modeltype_list[0]=99
  else
    check_error 1 "No namelist is defined"
  fi
fi


#-----------------------------------------------------------------------------
# set some default values and derive some run parameteres
restart=${restart:=".false."}
restartSemaphoreFilename='isRestartRun.sem'
#AUTOMATIC_RESTART_SETUP:
if [ -f ${restartSemaphoreFilename} ]; then
  restart=.true.
  #  do not delete switch-file, to enable restart after unintended abort
  #[[ -f ${restartSemaphoreFilename} ]] && rm ${restartSemaphoreFilename}
else
  if [[ "$initialiseOcean" == "FALSE" ]]; then
#   add_link_file ${restart_dir}/${restart_exp}/${restart_exp}_restart_atm_${restart_yea}0101T000000Z.nc init-restart-atm.nc
#   add_link_file ${restart_dir}/${restart_exp}/${restart_exp}_restart_oce_${restart_yea}0101T000000Z.nc init-restart-oce.nc

#   add_link_file ${ocean_data_InputFolder}/slo1414_restart_atm_21000101T000000Z.nc  init-restart-atm.nc
#   add_link_file ${ocean_data_InputFolder}/slo1414_restart_oce_21000101T000000Z.nc  init-restart-oce.nc

#   add_link_file init-restart-atm.nc restart_atm_DOM01.nc
#   add_link_file init-restart-oce.nc restart_ocean_DOM01.nc

    add_link_file ${ocean_data_InputFolder}/slo1414_restart_atm_21000101T000000Z.nc restart_atm_DOM01.nc
#    add_link_file ${ocean_data_InputFolder}/slo1414_restart_oce_21000101T000000Z.nc restart_ocean_DOM01.nc
  fi
fi
#END AUTOMATIC_RESTART_SETUP
#
# wait 5min to let GPFS finish the write operations
if [ "x$restart" != 'x.false.' -a "x$submit" != 'x' ]; then
  if [ x$(df -T ${EXPDIR} | cut -d ' ' -f 2) = gpfs ]; then
    sleep 10;
  fi
fi
# fill some checks

run_atmo=${run_atmo="false"}
if [ x$atm_namelist != x ]; then
  run_atmo="true"
fi
run_ocean=${run_ocean="false"}
if [ x$ocean_namelist != x ]; then
  run_ocean="true"
fi
run_wave=${run_wave="false"}
if [ x$wave_namelist != x ]; then
  run_wave="true"
fi
run_psrad=${run_psrad="false"}
if [ x$psrad_namelist != x ]; then
  run_psrad="true"
fi
run_hamocc=${run_hamocc="false"}
if [ x$hamocc_namelist != x ]; then
  run_hamocc="true"
fi

#-----------------------------------------------------------------------------
# add grids to required files
all_grids="${atmo_dyn_grids} ${atmo_rad_grids} ${wave_grids}"
for gridfile in ${all_grids}; do
  #
  gridfile=${gridfile//\'/} # strip all ' in case ' is used to delimit the grid names
  gridfile=${gridfile//\"/} # strip all " in case " is used to delimit the grid names
  gridfile=${gridfile//\,/} # strip all , in case , is used to separate the grid names
  #
  grfinfofile=${gridfile%.nc}-grfinfo.nc
  #
  ls -l ${HGRIDDIR}/$gridfile
  check_error $? "${HGRIDDIR}/$gridfile does not exist."
  add_link_file ${HGRIDDIR}/${gridfile} ./
  if [ -f ${HGRIDDIR}/${grfinfofile} ]; then
    add_link_file ${HGRIDDIR}/${grfinfofile} ./
  fi
done


#-----------------------------------------------------------------------------
# print_required_files
copy_required_files
link_required_files


#-----------------------------------------------------------------------------
# get restart files

if  [ x$restart_atmo_from != "x" ] ; then
  rm -f restart_atm_DOM01.nc
#  ln -s ${basedir}/experiments/${restart_from_folder}/${restart_atmo_from} ${EXPDIR}/restart_atm_DOM01.nc
  cp ${basedir}/experiments/${restart_from_folder}/${restart_atmo_from} cp_restart_atm.nc
  ln -s cp_restart_atm.nc restart_atm_DOM01.nc
  restart=".true."
fi
#if  [ x$restart_ocean_from != "x" ] ; then
#  rm -f restart_oce.nc
#  ln -s ${basedir}/experiments/${restart_from_folder}/${restart_ocean_from} ${EXPDIR}/restart_oce.nc
#  cp ${basedir}/experiments/${restart_from_folder}/${restart_ocean_from} cp_restart_oce_DOM01.nc
#  ln -s cp_restart_oce_DOM01.nc restart_oce_DOM01.nc
#  restart=".true."
#fi
#-----------------------------------------------------------------------------


read_restart_namelists=${read_restart_namelists:=".true."}

#-----------------------------------------------------------------------------
#
# create ICON master namelist
# ------------------------
# For a complete list see Namelist_overview and Namelist_overview.pdf

#-----------------------------------------------------------------------------
# create master_namelist
master_namelist=icon_master.namelist
if [ x$end_date = x ]; then
cat > $master_namelist << EOF
&master_nml
 lrestart            = $restart
 lrestart_write_last = .true.
/
&master_time_control_nml
 experimentStartDate  = "$start_date"
 restartTimeIntval    = "$restart_interval"
 checkpointTimeIntval = "$checkpoint_interval"
/
&time_nml
 is_relative_time = .false.
/
EOF
else
if [ x$calendar = x ]; then
  calendar='proleptic gregorian'
  calendar_type=1
else
  calendar=$calendar
  calendar_type=$calendar_type
fi
cat > $master_namelist << EOF
&master_nml
 lrestart            = $restart
 lrestart_write_last = .true.
 read_restart_namelists = $read_restart_namelists
/
&master_time_control_nml
 calendar             = "$calendar"
 checkpointTimeIntval = "$checkpoint_interval"
 restartTimeIntval    = "$restart_interval"
 experimentStartDate  = "$start_date"
 experimentStopDate   = "$end_date"
/
&time_nml
 is_relative_time = .false.
/
EOF
fi
#-----------------------------------------------------------------------------


#-----------------------------------------------------------------------------
# add model component to master_namelist
add_component_to_master_namelist()
{

  model_namelist_filename="$1"
  model_name=$2
  model_type=$3
  model_min_rank=$4
  model_max_rank=$5
  model_inc_rank=$6

cat >> $master_namelist << EOF
&master_model_nml
  model_name="$model_name"
  model_namelist_filename="$model_namelist_filename"
  model_type=$model_type
  model_min_rank=$model_min_rank
  model_max_rank=$model_max_rank
  model_inc_rank=$model_inc_rank
/
EOF

}
#-----------------------------------------------------------------------------


no_of_models=${#namelist_list[*]}
echo "no_of_models=$no_of_models"

j=0
while [ $j -lt ${no_of_models} ]
do
  add_component_to_master_namelist "${namelist_list[$j]}" "${modelname_list[$j]}" ${modeltype_list[$j]} ${minrank_list[$j]} ${maxrank_list[$j]} ${incrank_list[$j]}
  j=`expr ${j} + 1`
done


#
# configure START_MODEL_function
#
ICON_COMPONENT2_VE_procs=$mpi_waves_procs    # START_MODEL_function expects ICON_COMPONENT2_VE_procs
ICON_COMPONENT1_VH_procs=$mpi_atm_io_procs
ICON_COMPONENT2_VH_procs=$mpi_waves_io_procs
echo "mpi procs: total=$mpi_total_procs waves=${ICON_COMPONENT2_VE_procs} atmo=total-waves (will be computed implicitly)"

# ----------------------------------------------------------------------
# run the model!
# ----------------------------------------------------------------------

rm -f finish.status
date


echo "START_MODEL: ${START_MODEL}"
# ----------------------------------------------------------------------
# run the model!
# ----------------------------------------------------------------------

$START_MODEL
EXIT_STATUS=$?

if [ "$EXIT_STATUS" -ne "0" ]; then
  echo "ICON EXIT_STATUS: $EXIT_STATUS"
  exit $EXIT_STATUS
fi

date

if [ -r finish.status ] ; then
  check_final_status 0
else
  check_final_status -1
fi
#
#-----------------------------------------------------------------------------
#
finish_status=`cat finish.status`
echo $finish_status
echo "============================"
echo "Script run successfully: $finish_status"
echo "============================"

#-----------------------------------------------------------------------------
# rm output_schedule_steps*
#-----------------------------------------------------------------------------
# if [[ "x$use_hamocc" = "xyes" ]]; then
#   # store HAMOCC log file
#   strg="$(ls -rt ${EXPNAME}_hamocc_EU*.nc* | tail -1 )"
#   prefx="${EXPNAME}_hamocc_EU_tendencies"
#   foo=${strg##${prefx}}
#   foo=${foo%%.*}
#   bgcout_file="bgcout_${foo}"
#   mv bgcout $bgcout_file
# fi

#-----------------------------------------------------------------------------
namelist_list=""
#-----------------------------------------------------------------------------
# check if we have to restart, ie resubmit
#   Note: this is a different mechanism from checking the restart
if [ $finish_status = "RESTART" ] ; then
  echo "restart next experiment..."
  this_script="${RUNSCRIPTDIR}/${job_name}"
  echo 'this_script: ' "$this_script"
  touch ${restartSemaphoreFilename}
  cd ${RUNSCRIPTDIR}
  ${submit} ${this_script}          # $run_param_0
else
  [[ -f ${restartSemaphoreFilename} ]] && rm ${restartSemaphoreFilename}
fi
#
#-----------------------------------------------------------------------------
# automatic call/submission of post processing if available
# if [ "x${autoPostProcessing}" = "xtrue" ]; then
#   # check if there is a postprocessing is available
#   cd ${RUNSCRIPTDIR}
#   targetPostProcessingScript="./post.${EXPNAME}.run"
#   [[ -x $targetPostProcessingScript ]] && ${submit} ${targetPostProcessingScript}
#   cd -
# fi

#-----------------------------------------------------------------------------

# cd $RUNSCRIPTDIR

#-----------------------------------------------------------------------------

if [ ${finish_status} == 'OK' ]; then
  EXIT_STATUS=0
else
  EXIT_STATUS=1
fi

echo "EXIT_STATUS: $EXIT_STATUS"
exit $EXIT_STATUS
#
#-----------------------------------------------------------------------------
