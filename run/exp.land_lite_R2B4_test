# ICON
#
# ------------------------------------------
# Copyright (C) 2004-2024, DWD, MPI-M, DKRZ, KIT, ETH, MeteoSwiss
# Contact information: icon-model.org
# See AUTHORS.TXT for a list of authors
# See LICENSES/ for license information
# SPDX-License-Identifier: BSD-3-Clause
# ------------------------------------------

#--------------------------------------------------------------------------------------------------
#
# ICON-JS4 Standalone experiment
#
author_list="Veronika Gayler, Rainer Schneck, MPIM"
#
#--------------------------------------------------------------------------------------------------
#
# This file describes an ICON-Land offline experiment for testing.
# - The simulation runs only for a few days, not enough for natural or antropogenic land cover changes 
# - The idea is however, to switch on as many proceses as possible
#
#--------------------------------------------------------------------------------------------------

# (0) unset some setting of create_target_header for levante

unset OMPI_MCA_coll_fca_enable
unset OMPI_MCA_coll_fca_priority

#--------------------------------------------------------------------------------------------------

# (1) Variables provided by the scripting mechanism

# EXPNAME                       = name of exp. in 'exp.<name>'
# basedir                       = base directory, where src/, run/ etc exist
# icon_data_poolFolder          = base directory, where grids/, input/ and setup/ exist
# nproma                        = blocking length for array dimensioning and inner loop lengths

icon_data_poolFolder="${icon_data_rootFolder:-/pool/data/ICON}/grids/public/mpim"

#--------------------------------------------------------------------------------------------------

# (2) Set variables needed by the scripting mechanism

# horizontal grid(s)
#
# domain globe
grid_id=0043
grid_refinement=R02B04
grid_label=G
grid_name=icon_grid_${grid_id}_${grid_refinement}_${grid_label}
atmo_dyn_grids="'${grid_name}.nc',"
#
grids_folder=${icon_data_poolFolder}/${grid_id}

lnd_data_InputFolder=${icon_data_poolFolder}/${grid_id}/land/r0004
refyear=1979

calendar="proleptic gregorian"  # '365 day year' or '360 day year' or 'proleptic gregorian'

# start and end date+time
start_date=${start_date:="1979-01-01T00:00:00Z"}
    end_date=${end_date:="1979-01-03T00:00:00Z"}
modelTimeStep="PT30M"   # this must not be longer than 1 day because mo_jsb4_forcing can not handle this!

# restart intervals
checkpoint_interval="P1D"
restart_interval="P1D"

# output intervals
output_interval="PT6H" # P1D, PT6H
file_interval="P1D"

# namelist files
jsbach_namelist="NAMELIST_${EXPNAME}_jsb"

# interface variables input infos
years_for_cyclic_forcing=0       # If > 0, number of years to use for cyclic forcing
start_year_for_cyclic_forcing=9999 # First year of cyclic forcing; 9999 means use start year of experiment
forcing_tag="GSWP3"
ghg_scenario="false"             # greenhouse gases file for scenario runs
forcing_steps_per_day="1"        # Number of forcing time steps per day, e.g. 1 for daily forcing
forcing_synchron_factor="48"     # Number of model time steps per forcing time step,
                                 #  e.g. 48 for daily forcing and half-hourly time step.
#--------------------------------------------------------------------------------------------------

# (3) Define the model configuration

# JSBACH settings
jsbach_usecase=jsbach_lite    # jsbach_lite or jsbach_pfts or jsbach_jedi
jsbach_with_lakes=yes
jsbach_with_hd=yes
jsbach_with_carbon=no         # yes needs jsbach_pfts usecase
jsbach_check_wbal=yes         # check water balance
output_lnd=medium             # amount of output: none/basic/medium/full
                              #  -> Note: full output does not work with all processes switched on
                              #     (too many variables)

# Some further processing for land configuration
# ----------------------------------------------
#
output_tiles="'box'"
if [[ ${output_lnd} == "basic" ]]
then
  output_tiles="${output_tiles}, 'glac', 'veg'"
fi
if [[ $jsbach_with_lakes == yes ]]
then
  [[ ${output_lnd} == "full" ]] && output_tiles="${output_tiles}, 'lake', 'land'"
fi
jsbach_use_jedi=$([ "${jsbach_usecase}" == jsbach_jedi ] && echo yes || echo no )
llake=$([ "${jsbach_with_lakes:=yes}" == yes ] && echo .TRUE. || echo .FALSE. )
lcarbon=$([ "${jsbach_with_carbon:=yes}" == yes ] && echo .TRUE. || echo .FALSE. )
#
if [[ $jsbach_usecase == *pfts* ]] || [[ $jsbach_usecase == *jedi* ]]
then
  pft_file_tag="11pfts_"
  if [[ ${jsbach_use_jedi} == yes ]] || [[ ${output_lnd} == "full" ]]
  then
    output_tiles="${output_tiles}, 'pft*'"
  fi
else
  pft_file_tag=""
fi



#####################
# Prepare NAMELISTS #
#####################

case ${forcing_tag} in
  GSWP3 )
    forcing_set_ocean_to_constants=true  # in this version wind is only defined for land cells
    forcing_precip_in_mm_per_day=false    # true: mm/day; false: mm/s (= kg/m2s)
    forcing_qair_type=QAIR               # specific humidity in forcing data
    forcing_height_humidity=2.           # reference height for specific humidity data
    forcing_height_wind=10.              # reference height for wind data
    #  CO2 forcing not included in GSWP3 forcing data
    forcing_co2_frequ=CONST              # constant CO2 forcing
    forcing_co2_const_co2=367            # default for 1999
    forcing_co2_unit="ppmv"              # mol_per_mol (mol/mol) / ppmv / kg_per_kg (kg/kg)
    ;;
  * )
    print "\t|- WARNING: Check if namelist parameters correspond to forcing data!"
    # example for forcing data generated from ECHAM output (pre industrial control)
    forcing_set_ocean_to_constants=false # For all variables echam forcing is defined for all cells
    forcing_precip_in_mm_per_day=false   # true: mm/day; false mm/s (= kg/m2s)
    forcing_qair_type=QAIR               # only available in recent model versions (after CMIP5)
    forcing_co2_frequ=CONST              # constant CO2 forcing
    forcing_co2_const_co2=284.725e-6     # pre-industrial (1850)
    forcing_co2_unit="mol_per_mol"       # mol_per_mol (mol/mol) / ppmv / kg_per_kg (kg/kg)
  ;;
esac

if [[ ${ghg_scenario} = false ]]; then  
  forcing_co2_file="climate_"
else
  forcing_co2_file="greenhouse_gases.nc"
  forcing_co2_unit="ppmv"
  if [[ ${forcing_co2_frequ} != "" ]]; then
    print "\t|- WARNING: CO2 concentration is read from greenhouse gas scenario file ${forcing_co2_file}."
    print "\t|           The value you set for forcing_co2_frequ is ignored."
  fi
  forcing_co2_frequ="ghg_scenario"
fi

# namelists inherited from NAMELIST_atm_amip_les_atm:
# ---------------------------------------------------
cat > $jsbach_namelist << EOF
&parallel_nml
 nproma           = ${nproma}
 num_io_procs     = 0     ! Number of procs for output (not more than number of output files!)
! pio_type         = 1          ! 1 is default and means pio_type_async
! num_restart_procs = 2         ! 0 for sync restart_write_mode
/
&grid_nml
 dynamics_grid_filename = ${atmo_dyn_grids}
! l_limited_area = .FALSE. ! just to be sure
! vertical_grid_filename =
! ifeedback_type = 2 ! default is 2. Als long as we use only one grid in JS4-driver this does not matter. However, later this has to be 2. 
!                    ! 1: incremental feedback; 2: relaxation-based feedback. 
!                    ! Note: vertical nesting requires option 2 to run numerically stable over longer time periods
/
&run_nml
 num_lev          = 1           ! Number of full levels for each domain. For JS4-driver we use 1.
 modelTimeStep    = "${modelTimeStep}"     ! this is dtime
 output           = 'nml'
 msg_level        = 0          ! e.g. 15. level of details report during integration 
 restart_filename = "${EXPNAME}_restart_jsbalone_<rsttime>.nc"  ! rsttime in JS4-ICON-Driver nicht vorhanden???
 activate_sync_timers = .FALSE. ! nur zum debuggen wieder auf .FALSE. setzen
 ltimer           = .TRUE.     ! monitoring the runtime of specific routines
 timers_level     = 10
! profiling_output = 1   ! 1 ist default. 
                        ! TIMER_MODE_AGGREGATED=1,
                        ! TIMER_MODE_DETAILED=2,
                        ! TIMER_MODE_WRITE_FILES=3
/
&jsb_forcing_nml
    cyclic_nyears=${years_for_cyclic_forcing}
    cyclic_start_year=${start_year_for_cyclic_forcing}
    forcing_synchron_factor=${forcing_synchron_factor}
    forcing_steps_per_day=${forcing_steps_per_day}
    forcing_height_wind=${forcing_height_wind}
    forcing_height_humidity=${forcing_height_humidity}
    !--- Some external forcing is only defined for land cells. In this case ocean cells need to be replaced
    !    by constants (reasonable values for the different variables) to ensure numeric stability.
    !    If set to false forcing is expected for all variables for all cells (e.g. forcing from echam)
    forcing_set_ocean_to_constants=.${forcing_set_ocean_to_constants:-true}.

    !--- temperature forcing ----
    forcing_temp_file_prefix="climate_"
    forcing_temp_frequ="DAILY"       !Forcing frequency (DAILY/TIMESTEP/CONST)
    forcing_temp_ocean=0.0           !jsb4 calculates for all cells, CRUNCEP has missingValue for ocean cells
    forcing_temp_unit="${forcing_tmp_unit:-""}"

    !--- precipitation forcing ----
    forcing_precip_file_prefix="climate_"
    forcing_precip_frequ="DAILY"     !Forcing frequency (DAILY/TIMESTEP/CONST)
    forcing_precip_ocean=0.0         !jsb4 calculates for all cells, CRUNCEP has missingValue for ocean cells
    forcing_precip_in_mm_per_day=.${forcing_precip_in_mm_per_day:-false}.
    forcing_precip_unit="${forcing_precip_unit:-""}"

    !--- atmospheric humidity forcing
    forcing_qair_file_prefix="climate_"
    forcing_qair_type="${forcing_qair_type:-QAIR}" ! (QAIR/RH/NONE)
    forcing_qair_frequ="DAILY"       !Forcing frequency (DAILY/TIMESTEP/CONST)
    forcing_qair_ocean=1e-5          !jsb4 calculates for all cells, CRUNCEP has missingValue for ocean cells
    forcing_qair_unit="${forcing_qair_unit:-""}"

    !--- longwave radiative forcing [W/m^2] ---
    forcing_lw_file_prefix="climate_"
    forcing_lw_frequ="DAILY"         !Forcing frequency (MONTHLY/DAILY/CONST)
    forcing_lw_ocean=100             !jsb4 calculates for all cells, CRUNCEP has missingValue for ocean cells
    forcing_lw_unit="${forcing_lw_unit:-""}"

    !--- shortwave radiative forcing [W/m^2] ---
    forcing_sw_file_prefix="climate_"
    forcing_sw_frequ="DAILY"         !Forcing frequency (DAILY/TIMESTEP/CONST)
    forcing_sw_ocean=0               !jsb4 calculates for all cells, CRUNCEP has missingValue for ocean cells
    forcing_sw_unit="${forcing_sw_unit:-""}"

    ! --- CO2 forcing ---
    forcing_co2_file_prefix="${forcing_co2_file}"
    forcing_co2_frequ="${forcing_co2_frequ:-CONST}"  !Forcing frequency (DAILY/TIMESTEP/CONST/GHG_SCENARIO)
    forcing_co2_ocean=367  !3.67e-4                  !jsb4 calculates for all cells, CRUNCEP has missingValue for ocean cells
    forcing_co2_const_co2=${forcing_co2_const_co2:-367}  ! default for 1999
    forcing_co2_unit="${forcing_co2_unit:-""}"

    ! --- wind speed forcing ---
    forcing_wind_file_prefix="climate_"
    forcing_wind_frequ="DAILY"       !Forcing frequency (DAILY/TIMESTEP/CONST)
    forcing_wind_ocean=0             !jsb4 calculates for all cells, CRUNCEP has missingValue for ocean cells
    forcing_wind_unit="${forcing_wind_unit:-""}"
/
EOF


# namelists inherited from NAMELIST_atm_amip_les_lnd:
# ---------------------------------------------------
cat >> $jsbach_namelist << EOF
&jsb_model_nml  ! Same jsb_model_nml namelist name exists in namelist_standalone_master but has different content
  usecase         = "${jsbach_usecase}"
  use_lakes       = ${llake}
  fract_filename  = "bc_land_frac.nc"
  output_tiles    = ${output_tiles}     ! List of tiles to output
  enforce_water_budget = 'error'        ! Error: stop in case of water conservation problem
/
&jsb_seb_nml
  bc_filename     = 'bc_land_phys.nc'
  ic_filename     = 'ic_land_soil.nc'
/
&jsb_rad_nml
  use_alb_veg_simple = .TRUE.           ! Use TRUE for jsbach_lite, FALSE for jsbach_pfts/jsbach_jedi
  !use_alb_canopy  = .FALSE.             ! Use FALSE for jsbach_jedi, comment out otherwise
  bc_filename     = 'bc_land_phys.nc'
  ic_filename     = 'ic_land_soil.nc'
/
&jsb_turb_nml
  bc_filename     = 'bc_land_phys.nc'
  ic_filename     = 'ic_land_soil.nc'
/
&jsb_sse_nml
  l_heat_cap_map  = .FALSE.
  l_heat_cond_map = .FALSE.
  l_heat_cap_dyn  = .TRUE.
  l_heat_cond_dyn = .TRUE.
  l_snow          = .TRUE.
  l_dynsnow       = .TRUE.
  l_freeze        = .TRUE.
  l_supercool     = .TRUE.
  bc_filename     = 'bc_land_soil.nc'
  ic_filename     = 'ic_land_soil.nc'
/
&jsb_hydro_nml
  l_organic       = .FALSE.
  l_socmap        = .TRUE.
  bc_filename     = 'bc_land_soil.nc'
  ic_filename     = 'ic_land_soil.nc'
  bc_sso_filename = 'bc_land_sso.nc'
/
&jsb_assimi_nml
  active          = .FALSE.             ! Use FALSE for jsbach_lite, TRUE for jsbach_pfts/jsbach_jedi
/
&jsb_pheno_nml
  scheme          = 'climatology'       ! scheme = logrop (jsbach_pfts) / jedi_phenology (jsbach_jedi) / climatology (jsbach_lite)
  bc_filename     = 'bc_land_phys.nc'
  ic_filename     = 'ic_land_soil.nc'
/
&jsb_carbon_nml
  active                 = ${lcarbon}
  bc_filename            = 'bc_land_carbon.nc'
  ic_filename            = 'ic_land_carbon.nc'
  read_cpools            = .FALSE.
  !fire_frac_wood_2_atmos = 0.2
/
&jsb_fuel_nml
  active                 = ${lcarbon}
  fuel_algorithm         = 1
/
&jsb_disturb_nml
  active                  = .FALSE.
  ic_filename             = 'ic_land_soil.nc'
  bc_filename             = 'bc_land_phys.nc'
  fire_algorithm          = 1
  windbreak_algorithm     = 1
  lburn_pasture           = .FALSE.
  !fire_litter_threshold  = 16.67
  !fire_rel_hum_threshold = 70.0
  !fire_minimum_woody     = 0.002
  !fire_minimum_grass     = 0.006
  !fire_tau_woody         = 6.0
  !fire_tau_grass         = 2.0
  !wnd_threshold          = 2.25
  !wnd_damage_scale       = 5.e-03
/
EOF

if [[ ${jsbach_with_hd} = yes ]]; then
  cat >> $jsbach_namelist << EOF
&jsb_hd_nml
  active               = .TRUE.
  routing_scheme       = 'full'
  bc_filename          = 'bc_land_hd.nc'
  diag_water_budget    = .TRUE.
  debug_hd             = .FALSE.
/
EOF
fi

#--------------------------------------------------------------------------------------------------

# (4) Define the input

# model files
#
# jsbach namelist file
#
add_required_file ${basedir}/run/$jsbach_namelist            ./

# initial conditions
#
# - land: source?, date+time?
datadir=${lnd_data_InputFolder}
add_link_file ${datadir}/ic_land_soil_${refyear}.nc                     ./ic_land_soil.nc
# added in namelist, but not active and not yet available (2017-Dec-07)
#add_link_file ${datadir}/ic_land_carbon_1976.nc                         ./ic_land_carbon.nc

# boundary conditions
#
# - well mixed greenhouse gases
datadir=${icon_data_poolFolder}/common/greenhouse_gases
add_link_file $datadir/greenhouse_historical_plus.nc                    ./bc_greenhouse_gases.nc
#
# - land parameters
datadir=${lnd_data_InputFolder}
add_link_file $datadir/bc_land_frac_${pft_file_tag}${refyear}.nc        ./bc_land_frac.nc
add_link_file $datadir/bc_land_phys_${refyear}.nc                       ./bc_land_phys.nc
add_link_file $datadir/bc_land_soil_${refyear}.nc                       ./bc_land_soil.nc
add_link_file $datadir/bc_land_sso_${refyear}.nc                        ./bc_land_sso.nc
# added in namelist, but not active and not yet available (2017-Dec-07)
#datadir=${icon_data_poolFolder}/preliminary_land/r0002/${grid_refinement}_${grid_label}/land
#add_link_file $datadir/bc_land_carbon_${refyear}.nc                     ./bc_land_carbon.nc

if [[ ${jsbach_with_hd} = yes ]]; then
  add_link_file $datadir/hdpara_r2b4_0043_no_sinks.nc                   ./bc_land_hd.nc
fi
#
# - lctlib file for JSBACH
if [[ "${jsbach_use_jedi}" == yes ]]
then
  add_link_file /home/mpim/m300557/TOOL/SCRIPTS/tree_c3_c4_311_cover_lctlib_nlct21_spc250.def   ./lctlib_nlct21.def
else
  add_link_file ${basedir}/externals/jsbach/data/lctlib_nlct21.def              ./lctlib_nlct21.def
fi

# range of years for yearly files
# assume start_date and end_date have the format yyyy-...
start_year=$(( ${start_date%%-*} - 1 ))
end_year=$(( ${end_date%%-*} + 1 ))
if [ ${years_for_cyclic_forcing} -gt 0 ]
then
  [[ ${start_year_for_cyclic_forcing} -eq 9999 ]] || (( start_year=start_year_for_cyclic_forcing - 1 ))
  (( end_year = start_year + years_for_cyclic_forcing + 1 ))
fi
#
# Provide Links to the climate forcing files 

SEP=/pool/data/JSBACH/jsbalone_forcing/${grid_refinement}/${grid_id}  # path on DKRZ and MPIM machines

year=$start_year
while [[ $year -le $end_year ]]
  do

  case ${forcing_tag} in
    GSWP3 )
      forcing_dir=${SEP}/GSWP3-W5E5/data
      add_link_file   ${forcing_dir}/climate_gswp3-w5e5_daily_${year}.nc            ./climate_${year}.nc
      ;;
    * )
      add_link_file   Climate_${forcing_tag}_${year}.nc                             ./climate_${year}.nc
      ;;
  esac

  if [[ ${ghg_scenario} != false ]]; then
    [[ -d ${inpdir}/echam6 ]] || mkdir ${inpdir}/echam6
    forcing_dir=""
    add_link_file    ${forcing_dir}/greenhouse_${ghg_scenario}.nc                ./greenhouse_gases.nc
  fi
  (( year = year+1 ))
done

#--------------------------------------------------------------------------------------------------

# (5) Define the output

# Parameters for all output files
# -------------------------------
cat >> $jsbach_namelist << EOF
! &jsb_io_nml  ! R: von Julia: src_jsbach4/src/base/mo_jsb_io.f90 ruft auf: src_jsbach4/src/adapters/mo_jsb_io_iface.f90: SUBROUTINE read_io_namelist(filename)
!     ! --- Experiment name ---
!     out_expname = "${expid}"
! 
!     read_interface_vars=.${read_interface_vars:-false}.
!     write_interface_vars=.${write_interface_vars:-false}.
! /
&io_nml
 restart_file_type= 5
 restart_write_mode = "sync"  ! Default: " " =Fallback mode. If num_restart_proc == 0 (parallel_nml), then this behaves like ”sync”, otherwise like ”async”. 
                               ! If async is choosen, the num_restart_procs must be bigger than 0! 
                               ! "joint procs multifile" not necessary/useful in default r2b4 setup. 
/
EOF

# Define output files
# -------------------
if [[ "$output_lnd" != "none" ]]; then
  cat >> $jsbach_namelist << EOF
&output_nml
 output_filename  = "${EXPNAME}_lnd_fract"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5
 remap            = 0
 output_grid      = .TRUE.
 output_start     = "${start_date}"
 output_end       = "${start_date}"
 output_interval  = "${output_interval}"
 file_interval    = "${file_interval}"
 include_last     = .FALSE.
 ml_varlist       = 'group:jsb_tile_fractions'
/
&output_nml
 output_filename  = "${EXPNAME}_lnd_basic"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5
 remap            = 0
 operation        = 'mean'
 output_grid      = .TRUE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${output_interval}"
 file_interval    = "${file_interval}" ! R: PT1H nur zum debuggen
 include_last     = .FALSE.
 ml_varlist       = 'group:jsb_all_basic'
/
EOF
fi

case "${output_lnd}" in
  medium|full)
    cat >> $jsbach_namelist << EOF
&output_nml
 output_filename  = "${EXPNAME}_lnd_medium"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5
 remap            = 0
 operation        = 'mean'
 output_grid      = .TRUE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${output_interval}"
 file_interval    = "${file_interval}"
 include_last     = .FALSE.
 ml_varlist       = 'group:jsb_all_medium'
/
EOF
    ;;
esac

case "${output_lnd}" in
  full)
    cat >> $jsbach_namelist << EOF
&output_nml
 output_filename  = "${EXPNAME}_lnd_full"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5
 remap            = 0
 operation        = 'mean'
 output_grid      = .TRUE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${output_interval}"
 file_interval    = "${file_interval}"
 include_last     = .FALSE.
 ml_varlist       = 'group:jsb_all_full'
/
EOF
    ;;
esac

if [[ "$jsbach_check_wbal" == "yes" ]]; then
  cat >> $jsbach_namelist << EOF
&output_nml
 output_filename  = "${EXPNAME}_lnd_wbal"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5
 remap            = 0
 operation        = 'mean'
 output_grid      = .TRUE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${output_interval}"
 file_interval    = "${file_interval}"
 include_last     = .FALSE.
 ml_varlist       = 'hydro_weq_fluxes_box', 'hydro_weq_land_box', 'hydro_weq_balance_err_box',
EOF
  if [[ "$jsbach_with_hd" == "yes" ]]; then
    cat >> $jsbach_namelist << EOF
                    'hydro_runoff_box'   , 'hydro_drainage_box',
                    'hd_water_budget_box', 'hd_local_wbal_error_box'
EOF
  fi
  cat >> $jsbach_namelist << EOF
/
EOF
fi

#-----------------------------------------------------------------------------






