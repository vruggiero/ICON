#! /usr/bin/bash

# ICON
#
# ------------------------------------------
# Copyright (C) 2004-2024, DWD, MPI-M, DKRZ, KIT, ETH, MeteoSwiss
# Contact information: icon-model.org
# See AUTHORS.TXT for a list of authors
# See LICENSES/ for license information
# SPDX-License-Identifier: BSD-3-Clause
# ------------------------------------------

#=============================================================================

# levante shared batch job parameters
# --------------------------------
#SBATCH --account=mh0156
#SBATCH --partition=shared
#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --mem=20G
#SBATCH --output=LOG.exp.ocean_omip_R2B4_V1_GM1_comparison.run.run.o
#SBATCH  --error=LOG.exp.ocean_omip_R2B4_V1_GM1_comparison.run.run.o
#SBATCH --time=00:10:00

module load cdo

EXPNAME="ocean_omip_R2B4_V1_GM1"

basedir="$(pwd)/../build"

refbuild=("cpurun" "cpurun_lvec" "cpurun")
cmpbuild=("gpurun" "gpurun_lvec" "cpurun_lvec")


echo "------------------------------"
echo "Comparing files for experiment ${EXPNAME}"
echo "------------------------------"

# Compare result files
function comparison_ocean_omip() {
   # Compare all relevant output files for variants of ocean_omip experiment
   experimentname="$1"
   refdirname="$2"
   expdirname="$3"
   timestamp_restart="20000102T000000Z"

   # List all relevant netCDF output files to compare between different runs
   filelist=(
      "${experimentname}*_fx_20000101T000000Z.nc"
      "${experimentname}*_P1D_kin_20000101T000000Z.nc"
      "${experimentname}*_P1D_kin_${timestamp_restart}.nc"
      "${experimentname}*_P1M_2d_20000101T000000Z.nc"
      "${experimentname}*_P1M_2d_${timestamp_restart}.nc"
      "${experimentname}*_P1M_3d_20000101T000000Z.nc"
      "${experimentname}*_P1M_3d_${timestamp_restart}.nc"
      "${experimentname}*_P1M_max_20000101T000000Z.nc"
      "${experimentname}*_P1M_max_${timestamp_restart}.nc"
      "${experimentname}*_P1M_min_20000101T000000Z.nc"
      "${experimentname}*_P1M_min_${timestamp_restart}.nc"
      "${experimentname}*_P1M_moc_20000101T000000Z.nc"
      "${experimentname}*_P1M_moc_${timestamp_restart}.nc"
      "${experimentname}*_P1M_mon_20000101T000000Z.nc"
      "${experimentname}*_P1M_mon_${timestamp_restart}.nc"
      "${experimentname}*_P1M_sqr_20000101T000000Z.nc"
      "${experimentname}*_P1M_sqr_${timestamp_restart}.nc"
      "${experimentname}*_P1M_tke_20000101T000000Z.nc"
      "${experimentname}*_P1M_tke_${timestamp_restart}.nc"
      "${experimentname}*_restart_oce_${timestamp_restart}.nc"
   )

   # Check which result files are present and different
   notpresent=0
   different=0
   for filename in ${filelist[@]}; do
      reffile="${refdirname}/${filename}"
      expfile="${expdirname}/${filename}"
      if [ ! -f ${reffile} ] || [ ! -f ${expfile} ]; then
         let notpresent=notpresent+1
         continue
      fi

      cdo -s diffn ${reffile} ${expfile}
      retval=$?
      if [ ${retval} -ne 0 ]; then
         let different=different+1
      fi
   done

   # The comparison is only successfull if all files are present in both directories
   # and show no difference
   if [ ${notpresent} -gt 0 ] || [ ${different} -gt 0 ]; then
      echo "... FAILED: ${different} files different; ${notpresent} files missing"
      return 1
   else
      echo "... ok"
      return 0
   fi
}

notpassed=0
for idxpair in $(seq "${#refbuild[@]}"); do
    echo "Comparing ${refbuild[${idxpair}-1]} <-> ${cmpbuild[${idxpair}-1]}"
    temp_refdir="${basedir}/${refbuild[${idxpair}-1]}/experiments/${EXPNAME}_${refbuild[${idxpair}-1]}"
    temp_cmpdir="${basedir}/${cmpbuild[${idxpair}-1]}/experiments/${EXPNAME}_${cmpbuild[${idxpair}-1]}"
    if [ ! -d ${temp_refdir} ] || [ ! -d "${temp_cmpdir}" ]; then
       echo "... FAILED: Required experiment folders not found. Expecting the following"
       echo "            - ${temp_refdir}"
       echo "            - ${temp_cmpdir}"
       let notpassed=notpassed+1
       continue
    fi
    comparison_ocean_omip ${EXPNAME} "${temp_refdir}" "${temp_cmpdir}"
    retval=$?
    let notpassed=notpassed+retval
done

if [ ${notpassed} -gt 0 ]; then
   exit 1
else
   exit 0
fi

