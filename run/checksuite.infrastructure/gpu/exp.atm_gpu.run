#! /usr/bin/bash

# ICON
#
# ------------------------------------------
# Copyright (C) 2004-2024, DWD, MPI-M, DKRZ, KIT, ETH, MeteoSwiss
# Contact information: icon-model.org
# See AUTHORS.TXT for a list of authors
# See LICENSES/ for license information
# SPDX-License-Identifier: BSD-3-Clause
# ------------------------------------------

#=============================================================================

# mistral cpu batch job parameters
# --------------------------------
#SBATCH --account=mh0156
#SBATCH --job-name=exp.atm_gpu.run
#SBATCH --partition=gpu
#SBATCH --nodes=1
#SBATCH --mem=0
#SBATCH --output=LOG.exp.atm_gpu.run.run.o
#SBATCH --exclusive
#SBATCH --reservation=phase2-gpu
#SBATCH --constraint=a100_80
#SBATCH --time=00:30:00
#=============================================================================
set +x

#=============================================================================
#
# ICON run script:
# !ATTENTION! Do not change the format of the following lines.
#             They are evaluated by checksuite scripts.
# created by /work/k20200/k202137/levante_gpu_bb_tests/run/make_target_runscript
# target machine is bull_milan
# target use_compiler is pgi
# with_mpi=yes
# with_openmp=no
# memory_model=large
# submit with sbatch
#
builder=bull_milan_pgi
#=============================================================================
#
# OpenMP environment variables
# ----------------------------
export OMP_NUM_THREADS=1
export ICON_THREADS=1
export OMP_SCHEDULE=dynamic,1
export OMP_DYNAMIC="false"
export OMP_STACKSIZE=200M
#
# MPI variables
# -------------
no_of_nodes=${SLURM_JOB_NUM_NODES:=1}
mpi_procs_pernode=6
mpi_io_procs=2
((mpi_total_procs=no_of_nodes * mpi_procs_pernode))
#
# blocking length
# ---------------
nproma=8000
rrtmgp_columns_chunk=800
nblocks_c=1
#
#=============================================================================

# load local setting, if existing
# -------------------------------
if [ -a ../setting ]
then
  echo "Load Setting"
  . ../setting
fi

# environment variables for the experiment and the target system
# --------------------------------------------------------------
export EXPNAME="atm_qubicc_test"
export OMPI_MCA_pml=ucx
export OMPI_MCA_btl="^vader,tcp,openib,smcuda"
export UCX_RNDV_SCHEME=put_zcopy
export UCX_RNDV_THRESH=16384
export UCX_IB_GPU_DIRECT_RDMA=yes
export UCX_TLS=cma,rc,mm,cuda_ipc,cuda_copy,gdr_copy
export UCX_MEMTYPE_CACHE=n

# load profile
# ------------
if [[ -a  /etc/profile ]]
then
	. /etc/profile
fi

#=============================================================================
# directories with absolute paths
# -------------------------------
thisdir=$(pwd)
basedir="${thisdir}/.."
# experiments_dir can be predefined in a machine specific run_target_* header
experiments_dir="${experiments_dir:=${basedir}/experiments}"
export basedir
icon_data_rootFolder="/pool/data/ICON"

# how to start the icon model
# ---------------------------
export START="srun -l --kill-on-bad-exit=1 --nodes=${SLURM_JOB_NUM_NODES:-1} --ntasks=$((no_of_nodes * mpi_procs_pernode)) ${basedir}/run/run_wrapper_levante.sh -n $mpi_total_procs -o $mpi_io_procs -e "
export MODEL="${basedir}/bin/icon"

set | grep SLURM

# how to submit the next job
# --------------------------
submit="sbatch"
job_name="exp.atm_qubicc_test.run"

# cdo for post-processing
# -----------------------
cdo="cdo"
cdo_diff="cdo diffn"

# define script functions used in the experiment run script
# ---------------------------------------------------------
. ./add_run_routines

#=============================================================================

ulimit -s 2097152
ulimit -c 0

echo
echo --------------------------------------------------------------------------------------------
echo Start of exp.${EXPNAME}
echo
set -x
#
# QUBICC test experiment for Buildbot 
#
author_list='Marco Giorgetta, MPIM'
#
# This file describes a test experiment for the atmosphere using Sapphire physics.
# The specific setup is derived from a QUBICC experiment on a R2B9 grid (dx=5km).
# This test runs on the R2B4 grid (dx=160km) using the original time step dt_atm = 40s.
# The length is reduced to 6 time steps = 4min with checkpointing every 3rd time step.
# Therefore the radiation time step dt_rad is reduced from 12 to 2 minutes.
#
# This experiment depends on data files for the grid, the initial conditions and
# the specification of atmosphere and land conditions. These data are stored
# in a package for which the path must be specified in the variable datadir.
#
# Transient atmosphere and land conditions from files are used for:
# - SST and sea ice
# - spectral solar irradiation
# - well mixed greenhouse gases CO2, CH4, N2O, CFCs
# - O3 concentration
#
# - no aerosols  --> aes_rad_nml/aes_rad_config(1)%irad_aero  =  0
#                    THIS SHOULD BE CHANGED TO TRANSIENT AEROSOLS
#                    INCLUDING BACKGROUND, ANTHROPOGENIC (PLUMES)
#                    AND VOLCANIC.
#
#--------------------------------------------------------------------------------------------------
#
# Technical setup:
#
# - no_of_nodes          = number of nodes
# - mpi_procs_pernode    = processes/node
# - mpi_total_procs      = number of processes = no_of_nodes * mpi_procs_pernode
#                          --> start ICON mpi_total_procs times
#
# - num_io_procs         = number of output processes
#                          --> parallel_nml/num_io_procs
#
# --> number of compute processes = mpi_total_procs - num_io_procs
#
# - nproma / nblocks_c   : determine the main blocking length and inner loop lengths
#                          if nblocks_c <= 0 then nproma as specified is used
#                          if nblocks_c >  0 then nproma is computed as (cells on patch - 1)/nblocks_c + 1
#                          --> parallel_nml/nproma
#                          --> parallel_nml/nblocks_c
#
# - rrtmgp_columns_chunk = radiation blocking length, <= nproma
#                          --> aes_rad_nml(1)%rrtmgp_columns_chunk
#
#--------------------------------------------------------------------------------------------------
#
# Variables provided by the header section (->create_target_header) of the full runscript
# which are used below:
#
# EXPNAME               = name of exp. in 'exp.<name>'
# basedir               = base directory of the ICON repository,
#                         where bin/, experiments/, externals/, and run/ exist
#
# icon_data_rootFolder  = root directory for ICON data
#
# nproma                = blocking length for array dimensioning and inner loop lengths
#                         which is set in run/create_target_header for the used machine
#
# nblocks_c             = number of looping chunks used for cells
#                         which is set in run/create_target_header for the used machine
#
# rrtmgp_columns_chunk  = radiation blocking length
#
#--------------------------------------------------------------------------------------------------
#
# Variables required by the executing section (->exec.iconrun) of the full runscript
# which are defined below:
#
# start_date            = start date of the experiment
# end_date              = end date of the experiment
# checkpoint_interval   = interval for writing restart files
# restart_interval      = interval for restarting
# atmo_namelist         = file with namelists for the atmosphere
# jsbach_namelist       = file with namelists for the land
# run_jsbach            = switch for JSBACH land, yes|true:on, else:off
#
#--------------------------------------------------------------------------------------------------

# (1) Define the experimental setup: time frame and output

# date+time
start_date=1979-01-01T00:00:00Z
  end_date=1979-01-01T00:04:00Z

# restart intervals
checkpoint_interval=PT2M
   restart_interval=PT4M

# output intervals
first_output_date=1979-01-01T00:00:40Z
last__output_date=1979-01-01T00:04:00Z
atm_output_interval=PT40S
  atm_file_interval=PT40S

# output format
grib_format=2               # with 2nd level compression, see gribout_nml/lgribout_compress_ccsds
netcdf_format=5             # in 32-bit precision       , see io_nml/lnetcdf_flt64_output
output_format=${grib_format}

# output control
# - files are produced for every output date for single variables or variable groups, as specified
# - the amount of variables depends on the model configuration
output_atm_vgrid=on         # 1 file/variable             , start date
output_atm_state_3d_ini=on  # 1 file/variable             , start_date
output_atm_state_3d_sim=on  # 1 file/variable/date        , first_output_date to last__output_date
output_atm_state_2d_sim=on  # 1 file/(variable group)/date, first_output_date to last__output_date
output_atm_tend_3d=on       # 1 file/variable/date        , first_output_date to last__output_date
output_atm_flux_2d=on       # 1 file/(variable group)/date, first_output_date to last__output_date

#--------------------------------------------------------------------------------------------------

# (2) Define the model configuration

# atmospheric dynamics and physics
# --------------------------------
#
dt_atm=PT40S        # time step for atmosphere
#
htop_cloudy=22500.  # [m] top height for clouds in transport and microphysics, also height of first flat level
#
ldynamics=.TRUE.    # .TRUE.: on       , .FALSE.: off
ltransport=.TRUE.   # .TRUE.: on       , .FALSE.: off
iforcing=2          #     2 : Sapphire ,  0     : off
#
if [ ${iforcing} -eq 2 ]
then
#
dt_rad=PT2M         # '': off, any valid PT... > 0s: on and recomputed with the specified time step
if [ x${dt_rad} != x ]
then
lclearsky=.TRUE.    # .TRUE.: clear sky fluxes computed, .FALSE.: ... not computed
fi # ${dt_rad}
#
dt_vdf=${dt_atm}    # as above
#
dt_mig=${dt_atm}    # as above
#
run_jsbach=yes      # yes,true: on, else: off
#
fi # ${iforcing}

atmo_namelist=NAMELIST_${EXPNAME}_atm # also used in exec.iconrun
#
cat > ${atmo_namelist} << EOF
!
&parallel_nml
 nproma             = ${nproma}
 nblocks_c          = ${nblocks_c}
 num_io_procs       = ${mpi_io_procs}
 io_proc_chunk_size = 16
 iorder_sendrecv    = 3
/
&run_nml
 num_lev            = 191         ! number of full levels
 modelTimeStep      = '${dt_atm}'
 ltestcase          = .FALSE.
 ldynamics          = ${ldynamics}
 ltransport         = ${ltransport}
 iforcing           = ${iforcing}
 output             = 'nml'
 msg_level          = 12
 restart_filename   = '${EXPNAME}_restart_atm_<rsttime>.mfr'
 activate_sync_timers = .TRUE.
/
&grid_nml
 dynamics_grid_filename = 'icon_grid.nc'
/
&sleve_nml
 min_lay_thckn      = 40.         ! [m]
 top_height         = 83000.      ! [m]
 stretch_fac        = 0.9
 decay_scale_1      = 4000.       ! [m]
 decay_scale_2      = 2500.       ! [m]
 decay_exp          = 1.2
 flat_height        = ${htop_cloudy}
/
&extpar_nml
 itopo              = 1           ! 1: read topography from the grid file
 itype_lwemiss      = 0
/
&initicon_nml
 init_mode          = 2           ! 2: initialize from IFS analysis
 ifs2icon_filename  = 'ic_atmosphere.nc'
 pinit_seed         = -1          ! seed for perturbation of initial model state. no perturbation by default
 pinit_amplitude    = 0.          ! amplitude of perturbation
/
EOF

# Dynamics
# --------
if [ ${ldynamics} = '.TRUE.' ]
then
cat >> ${atmo_namelist} << EOF
!
&nonhydrostatic_nml
 ndyn_substeps      = 5           ! dtime/dt_dyn
 damp_height        = 50000.      ! [m]
 rayleigh_coeff     = 1.0
 vwind_offctr       = 0.2
 !divdamp_order      = 24         ! 24 is not allowed for checkpoint_interval < 2.5h (why?)
 divdamp_type       = 3
 divdamp_fac        = 0.004
 thslp_zdiffu       = 0.02
 thhgtd_zdiffu      = 125.
 htop_moist_proc    = ${htop_cloudy}
/
&diffusion_nml
 hdiff_order        = 5
 hdiff_efdt_ratio   = 24.0        ! change from default 36.0 to 24.0
 hdiff_smag_fac     = 0.025       ! change from default 0.015 to 0.025
/
EOF
fi # ${ldynamics}

# Tracers and transport
# ---------------------
# 'tracer_names' must be defined for the atmospheric state
cat >> ${atmo_namelist} << EOF
!
&transport_nml
 tracer_names       = 'hus','clw','cli', 'qr', 'qs', 'qg'
EOF
#
# Additional parameters are needed if the transport scheme is used
if [ ${ltransport} = .TRUE. ]
then
cat >> ${atmo_namelist} << EOF
 ivadv_tracer       =    3 ,   3 ,   3 ,   3 ,   3 ,   3
 itype_hlimit       =    3 ,   4 ,   4 ,   4 ,   4 ,   4
 ihadv_tracer       =   20 ,  20 ,  20 ,  20 ,  20 ,  20
EOF
fi # ${ltransport}
#
cat >> ${atmo_namelist} << EOF
/
EOF

# Forcing
# -------
if [ ${iforcing} -eq 2 ]
then
#
cat >> ${atmo_namelist} << EOF
!
&aes_phy_nml ! grid(1)
!
! atmospheric physics
 aes_phy_config(1)%dt_rad     = '${dt_rad}'
 aes_phy_config(1)%dt_vdf     = '${dt_vdf}'
 aes_phy_config(1)%dt_mig     = '${dt_mig}'
!
! surface (.TRUE. or .FALSE.)
 aes_phy_config(1)%ljsb       = .TRUE.
 aes_phy_config(1)%lamip      = .TRUE.
 aes_phy_config(1)%lice       = .TRUE.
 aes_phy_config(1)%lmlo       = .FALSE.
 aes_phy_config(1)%llake      = .TRUE.
!
! top height for cloud processes
 aes_phy_config(1)%zmaxcloudy = ${htop_cloudy}
!
! fix negative humidity
 aes_phy_config(1)%iqneg_d2p  = 2     ! after dynamics: set neg. humidity to 0
 aes_phy_config(1)%iqneg_p2d  = 2     ! after physics : set neg. humidity to 0
/
&aes_cov_nml ! grid(1)
 aes_cov_config(1)%cqx        = 1.e-6
/
&aes_cop_nml ! grid(1)
 aes_cop_config(1)%cn1lnd     =  50.0
 aes_cop_config(1)%cn2lnd     = 220.0
 aes_cop_config(1)%cn1sea     =  50.0
 aes_cop_config(1)%cn2sea     = 100.0
 aes_cop_config(1)%cinhomi    =   1.0
 aes_cop_config(1)%cinhoms    =   1.0
 aes_cop_config(1)%cinhoml    =   1.0
/
EOF
#
# Radiation
# ---------
if [ x${dt_rad} != x ]
then
cat >> ${atmo_namelist} << EOF
!
&aes_rad_nml ! grid(1)
 aes_rad_config(1)%isolrad    =  1
 aes_rad_config(1)%irad_h2o   =  1
 aes_rad_config(1)%irad_co2   =  3
 aes_rad_config(1)%irad_ch4   =  13
 aes_rad_config(1)%irad_n2o   =  13
 aes_rad_config(1)%irad_o3    =  5
 aes_rad_config(1)%irad_o2    =  2
 aes_rad_config(1)%irad_cfc11 =  3
 aes_rad_config(1)%irad_cfc12 =  3
 aes_rad_config(1)%irad_aero  =  0
 aes_rad_config(1)%lclearsky  = ${lclearsky}
 aes_rad_config(1)%rrtmgp_columns_chunk = ${rrtmgp_columns_chunk}
/
EOF
fi # ${dt_rad}
#
# Vertical diffusion
# ------------------
if [ x${dt_vdf} != x ]
then
cat >> ${atmo_namelist} << EOF
!
&aes_vdf_nml ! grid(1)
 aes_vdf_config(1)%lmix_max   =  150.
 aes_vdf_config(1)%pr0        =  0.7
/
EOF
fi # ${dt_vdf}
#
# Cloud microphysics
# ------------------
if [ x${dt_mig} != x ]
then
cat >> ${atmo_namelist} << EOF
!
&cloud_mig_nml ! grid(1)
 cloud_mig_config(1)%mu_rain        = 0.5
 cloud_mig_config(1)%rain_n0_factor = 0.1
 cloud_mig_config(1)%v0snow         = 25.
/
EOF
fi # ${dt_mig}
#

# land surface and soil
# ---------------------
if [ ${run_jsbach} = yes ]; then
#
jsbach_namelist=NAMELIST_${EXPNAME}_lnd # also used in exec.iconrun
#
cat > ${jsbach_namelist} << EOF
&jsb_model_nml
  usecase                 = 'jsbach_lite'
  use_lakes               = .TRUE.
  fract_filename          = 'bc_land_frac.nc'
/
&jsb_seb_nml
  bc_filename             = 'bc_land_phys.nc'
  ic_filename             = 'ic_land_soil.nc'
/
&jsb_rad_nml
  use_alb_veg_simple      = .TRUE.
  bc_filename             = 'bc_land_phys.nc'
  ic_filename             = 'ic_land_soil.nc'
/
&jsb_turb_nml
  bc_filename             = 'bc_land_phys.nc'
  ic_filename             = 'ic_land_soil.nc'
/
&jsb_sse_nml
  l_heat_cap_map          = .FALSE.
  l_heat_cond_map         = .FALSE.
  l_heat_cap_dyn          = .FALSE.
  l_heat_cond_dyn         = .FALSE.
  l_snow                  = .TRUE.
  l_dynsnow               = .TRUE.
  l_freeze                = .TRUE.
  l_supercool             = .TRUE.
  bc_filename             = 'bc_land_soil.nc'
  ic_filename             = 'ic_land_soil.nc'
/
&jsb_hydro_nml
  l_organic               = .FALSE.
  bc_filename             = 'bc_land_soil.nc'
  ic_filename             = 'ic_land_soil.nc'
  bc_sso_filename         = 'bc_land_sso.nc'
/
&jsb_assimi_nml
  active                  = .FALSE.
/
&jsb_pheno_nml
  scheme                  = 'climatology'
  bc_filename             = 'bc_land_phys.nc'
  ic_filename             = 'ic_land_soil.nc'
/
&jsb_carbon_nml
  active                  = .FALSE.
/
&jsb_fuel_nml
  active                  = .FALSE.
/
&jsb_disturb_nml
  active                  = .FALSE.
/
EOF

fi # ${run_jsbach}

fi # ${iforcing}

#--------------------------------------------------------------------------------------------------

# (3) Define the input: model constants, grid, initial state, boundary conditions

# data directory for the input of this experiment
datadir=${icon_data_rootFolder}/experiments/data.atm_qubicc_test.r1
if [ ! -d ${datadir} ]
then
    echo "ERROR: input data directory ${datadir} not found"
    exit
fi

# data directory for the output of this experiment
expdir=${basedir}/experiments/${EXPNAME}
if [ ! -d ${expdir} ]
then
    mkdir -p ${expdir}
fi

# Radiation constants
# -------------------
if [ x${dt_rad} != x ]
then
#
# - constants for gas optical properties
ln -s ${basedir}/data/rrtmgp-gas-lw-g128.nc ${expdir}/coefficients_lw.nc
ln -s ${basedir}/data/rrtmgp-gas-sw-g112.nc ${expdir}/coefficients_sw.nc
#
# - constants for cloud optical properties
ln -s ${basedir}/data/ECHAM6_CldOptProps_rrtmgp_lw.nc ${expdir}/rrtmgp-cloud-optics-coeffs-lw.nc
ln -s ${basedir}/data/ECHAM6_CldOptProps_rrtmgp_sw.nc ${expdir}/rrtmgp-cloud-optics-coeffs-sw.nc
#
fi # ${dt_rad}

# Land constants
# --------------
if [ ${run_jsbach} = yes ]; then
#
# - land constants
ln -s ${basedir}/externals/jsbach/data/lctlib_nlct21.def ${expdir}/lctlib_nlct21.def
#
fi # ${run_jsbach}

# Grid, initial state, boundary conditions
# ----------------------------------------
# The datadir directory contains the data files with their original names and symbolic links
# to these files with names as used in ICON. Here we create symbolic links in the experiment
# directory expdir with names as used in ICON, pointing to the files with their original names.
#
for file in ${datadir}/*
do
    if [ -L ${file} ]                                # if this file is a symbolic links
    then
        source_file=$( readlink -f ${file} )         # the original file name
	target_file=${expdir}/$( basename ${file} )  # the ICON file name
	ln -s ${source_file} ${target_file}
    fi
done

#--------------------------------------------------------------------------------------------------

# (4) Define the output: namelists for formats, files, variables

# Output formats
# --------------
#
if [ ${output_format} = ${grib_format} ]
then
    cat >> ${atmo_namelist} << EOF
&gribout_nml
 preset                          = 'deterministic' ! 'none' seems to produce non-reproducible results
 generatingCenter                = 252    ! This is MPI-M
 generatingSubcenter             =   3    ! 1 (we at DKRZ), 2 (we at CSCS), 3 (we at JSC) 
 tablesVersion                   =   4    ! WMO predefined table version
 localTablesVersion              =   1    ! MPI-M defined local table version 
 significanceOfReferenceTime     =   2    ! grib2/tables/4/1.2.table
 productionStatusOfProcessedData =   2    ! grib2/tables/4/1.3.table
 typeOfProcessedData             =   1    ! grib2/tables/4/1.4.table
 typeOfGeneratingProcess         =   2    ! grib2/tables/4/4.3.table
 generatingProcessIdentifier     =   0
 lgribout_compress_ccsds         = .FALSE.
/
EOF
fi # ${output_format}

# Parameters for all output files
# -------------------------------
cat >> ${atmo_namelist} << EOF
&io_nml
 output_nml_dict      = '${basedir}/run/dict.iconam.mpim'
 netcdf_dict          = '${basedir}/run/dict.iconam.mpim'
 itype_pres_msl       = 4
 restart_file_type    = 5
 restart_write_mode   = 'joint procs multifile'
 lnetcdf_flt64_output = .TRUE.
/
EOF

# Define output files
# -------------------

# vertical grid
# -----------------------------------------
# - constant in time
# - output at start_date only
#
if [ ${output_atm_vgrid} = on ]
then
#
# - all levels
#
varlist="'zghalf' 'zg' 'dzghalf'"
#
for var in ${varlist}
do
  cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = '${EXPNAME}_${var//\'}'
 filename_format  = '${EXPNAME}_${var//\'}_ml'
 ready_file       = '${EXPNAME}_${var//\'}_ml.ready'
 filetype         = ${output_format}
 remap            = 0
 output_grid      = .FALSE.
 output_start     = '${start_date}'
 output_end       = '${start_date}'
 output_interval  = '${atm_output_interval}'
 file_interval    = '${atm_file_interval}'
 ml_varlist       = ${var}
/
EOF
done
#
fi # ${output_atm_vgrid}

# initial state of the atmosphere
# -------------------------------
# - instananeous values
# - output at start_date only
#
if [ ${output_atm_state_3d_ini} = on ]
then
#
# - all levels
#
varlist="'pfull' 'ta' 'rho' 'ua' 'va' 'wa' 'hus'"
#
for var in ${varlist}
do
  cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = '${EXPNAME}_${var//\'}'
 filename_format  = '${EXPNAME}_${var//\'}_ml_<datetime2>'
 ready_file       = '${EXPNAME}_${var//\'}_ml_<datetime2>.ready'
 filetype         = ${output_format}
 remap            = 0
 output_grid      = .FALSE.
 output_start     = '${start_date}'
 output_end       = '${start_date}'
 output_interval  = '${atm_output_interval}'
 file_interval    = '${atm_file_interval}'
 include_last     = .FALSE.
 ml_varlist       = ${var}
/
EOF
done
#
# - cloudy levels 101...nlev (level 101 is at 22500m height, as set in htop_cloudy)
#
varlist="'clw' 'cli' 'qr' 'qs' 'qg'"
#
for var in ${varlist}
do
  cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = '${EXPNAME}_${var//\'}'
 filename_format  = '${EXPNAME}_${var//\'}_ml_<datetime2>'
 ready_file       = '${EXPNAME}_${var//\'}_ml_<datetime2>.ready'
 filetype         = ${output_format}
 remap            = 0
 output_grid      = .FALSE.
 output_start     = '${start_date}'
 output_end       = '${start_date}'
 output_interval  = '${atm_output_interval}'
 file_interval    = '${atm_file_interval}'
 include_last     = .FALSE.
 m_levels         = '101...nlev'
 ml_varlist       = ${var}
/
EOF
done
#
fi # ${output_atm_state_3d_ini}

# simulated atmospheric state
# ---------------------------
# - instantaneous values
# - from first_output_date to last__output_date 
#
if [ ${output_atm_state_3d_sim} = on ]
then
#
# - all levels
#
varlist="'pfull' 'ta' 'rho' 'ua' 'va' 'wa' 'hus'"
#
for var in ${varlist}
do
  cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = '${EXPNAME}_${var//\'}'
 filename_format  = '${EXPNAME}_${var//\'}_ml_<datetime2>'
 ready_file       = '${EXPNAME}_${var//\'}_ml_<datetime2>.ready'
 filetype         = ${output_format}
 remap            = 0
 output_grid      = .FALSE.
 output_start     = '${first_output_date}'
 output_end       = '${last__output_date}'
 output_interval  = '${atm_output_interval}'
 file_interval    = '${atm_file_interval}'
 include_last     = .FALSE.
 ml_varlist       = ${var}
/
EOF
done
#
# - cloudy levels 101...nlev
#
varlist="'clw' 'cli' 'qr' 'qs' 'qg'"
#
for var in ${varlist}
do
  cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = '${EXPNAME}_${var//\'}'
 filename_format  = '${EXPNAME}_${var//\'}_ml_<datetime2>'
 ready_file       = '${EXPNAME}_${var//\'}_ml_<datetime2>.ready'
 filetype         = ${output_format}
 remap            = 0
 output_grid      = .FALSE.
 output_start     = '${first_output_date}'
 output_end       = '${last__output_date}'
 output_interval  = '${atm_output_interval}'
 file_interval    = '${atm_file_interval}'
 include_last     = .FALSE.
 m_levels         = '101...nlev'
 ml_varlist       = ${var}
/
EOF
done
#
fi # ${output_atm_state_3d_sim}

# 2-dimensional state variables
# -----------------------------
# - instantaneous values
# - from first_output_date to last__output_date 
# - single levels
# - multi-variables
#
if [ ${output_atm_state_2d_sim} = on ]
then
#
varlist="'ps' 'psl'"
#
if [ ${iforcing} -eq 2 ] ; then
varlist="${varlist} 'ts'"
if [ x${dt_rad} != x ] ; then varlist="${varlist} 'cosmu0' 'albedo' "; fi
if [ x${dt_vdf} != x ] ; then varlist="${varlist} 'sic' 'sit' 'sfcwind' 'uas' 'vas' 'tas' 'dew2'   "; fi
if [ x${dt_mig} != x ] ; then varlist="${varlist} 'clt' 'prw' 'cllvi' 'clivi' 'qrvi' 'qsvi' 'qgvi' "; fi
fi # ${iforcing}
#
if [ "x${varlist}" != x ] ; then
cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = '${EXPNAME}_atm2d'
 filename_format  = '${EXPNAME}_atm2d_ml_<datetime2>'
 ready_file       = '${EXPNAME}_atm2d_ml_<datetime2>.ready'
 filetype         = ${output_format}
 remap            = 0
 output_grid      = .FALSE.
 output_start     = '${first_output_date}'
 output_end       = '${last__output_date}'
 output_interval  = '${atm_output_interval}'
 file_interval    = '${atm_file_interval}'
 include_last     = .FALSE.
 ml_varlist       = ${varlist}
/
EOF
fi # varlist
#
fi # ${output_atm_state_2d_sim}

# tendencies used in the simulation
# ---------------------------------
# - time mean over output interval
# - from first_output_date to last__output_date 
#
if [ ${output_atm_tend_3d} = on ]
then
#
# - all levels
#
varlist=''
#
if [ ${ldynamics}  = .TRUE. ] ; then varlist="${varlist}                         \
   'ddt_ua_dyn' 'ddt_ua_adv' 'ddt_ua_cor' 'ddt_ua_pgr' 'ddt_ua_dmp' 'ddt_ua_hdf' \
   'ddt_va_dyn' 'ddt_va_adv' 'ddt_va_cor' 'ddt_va_pgr' 'ddt_va_dmp' 'ddt_va_hdf' "; fi
#
if [ ${iforcing} -eq 2 ] ; then
if [ x${dt_rad} != x ] ; then varlist="${varlist} 'tend_ta_rlw' 'tend_ta_rsw'"  ; fi
if [ x${dt_vdf} != x ] ; then varlist="${varlist} 'tend_ua_vdf' 'tend_va_vdf' 'tend_ta_vdf' 'tend_hus_vdf'"; fi
if [ x${dt_mig} != x ] ; then varlist="${varlist} 'tend_ta_mig' 'tend_hus_mig'"; fi
fi # ${iforcing}
#
for var in ${varlist}
do
  cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = '${EXPNAME}_${var//\'}'
 filename_format  = '${EXPNAME}_${var//\'}_ml_<datetime2>'
 ready_file       = '${EXPNAME}_${var//\'}_ml_<datetime2>.ready'
 filetype         = ${output_format}
 remap            = 0
 operation        = 'mean'
 output_grid      = .FALSE.
 output_start     = '${first_output_date}'
 output_end       = '${last__output_date}'
 output_interval  = '${atm_output_interval}'
 file_interval    = '${atm_file_interval}'
 include_last     = .FALSE.
 ml_varlist       = ${var}
/
EOF
done
#
# - cloudy levels 101...nlev
#
varlist=''
#
if [ ${iforcing} -eq 2 ] ; then
if [ x${dt_vdf} != x ] ; then varlist="${varlist} 'tend_clw_vdf' 'tend_cli_vdf'"; fi
if [ x${dt_mig} != x ] ; then varlist="${varlist} 'tend_clw_mig' 'tend_cli_mig'"; fi
fi # iforcing
#
for var in ${varlist}
do
cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = '${EXPNAME}_${var//\'}'
 filename_format  = '${EXPNAME}_${var//\'}_ml_<datetime2>'
 ready_file       = '${EXPNAME}_${var//\'}_ml_<datetime2>.ready'
 filetype         = ${output_format}
 remap            = 0
 operation        = 'mean'
 output_grid      = .FALSE.
 output_start     = '${first_output_date}'
 output_end       = '${last__output_date}'
 output_interval  = '${atm_output_interval}'
 file_interval    = '${atm_file_interval}'
 include_last     = .FALSE.
 m_levels         = '101...nlev'
 ml_varlist       = ${var}
/
EOF
done
#
fi # ${output_atm_tend_3d}

# 2-dimensional flux variables
# ----------------------------
# - time mean values for output interval
# - from first_output_date to last__output_date 
# - multi-variables
# - single levels
#
if [ ${output_atm_flux_2d} = on ]
then
#
varlist=''
#
if [ ${iforcing} -eq 2 ] ; then
if [ x${dt_rad} != x ]        ; then varlist="${varlist} 'rsdt' 'rsut' 'rlut' 'rsds' 'rlds' 'rsus' 'rlus' "; fi
if [ ${lclearsky} = .TRUE. ]  ; then varlist="${varlist} 'rsutcs' 'rlutcs' 'rsdscs' 'rldscs' 'rsuscs'     "; fi
if [ x${dt_vdf} != x ]        ; then varlist="${varlist} 'evspsbl' 'hfls' 'hfss' 'tauu' 'tauv'            "; fi
if [ x${dt_mig} != x ]        ; then varlist="${varlist} 'pr' 'prlr' 'prls'                               "; fi
fi # ${iforcing}
#
if [ "x${varlist}" != x ] ; then
cat >> ${atmo_namelist} << EOF
&output_nml
 output_filename  = '${EXPNAME}_flx2d'
 filename_format  = '${EXPNAME}_flx2d_ml_<datetime2>'
 ready_file       = '${EXPNAME}_flx2d_ml_<datetime2>.ready'
 filetype         = ${output_format}
 remap            = 0
 operation        = 'mean'
 output_grid      = .FALSE.
 output_start     = '${first_output_date}'
 output_end       = '${last__output_date}'
 output_interval  = '${atm_output_interval}'
 file_interval    = '${atm_file_interval}'
 include_last     = .FALSE.
 ml_varlist       = ${varlist}
/
EOF
fi # varlist
#
fi # ${output_atm_flux_2d}

set +x
echo
echo End of exp.${EXPNAME}
echo --------------------------------------------------------------------------------------------
echo
#!/bin/ksh
#=============================================================================
#
# This section of the run script prepares and starts the model integration. 
#
# MODEL and START must be defined as environment variables or
# they must be substituted with appropriate values.
#
# Marco Giorgetta, MPI-M, 2010-04-21
#
#-----------------------------------------------------------------------------
final_status_file=${basedir}/run/${job_name}.final_status
rm -f ${final_status_file}
#-----------------------------------------------------------------------------
#
# directories definition
#
RUNSCRIPTDIR=${basedir}/run
if [ x$grids_folder = x ] ; then
   HGRIDDIR=${basedir}/grids
else
   HGRIDDIR=$grids_folder
fi

make_and_change_to_experiment_dir

#-----------------------------------------------------------------------------
final_status_file=${RUNSCRIPTDIR}/${job_name}.final_status
rm -f ${final_status_file}

#-----------------------------------------------------------------------------
# set up the model lists if they do not exist
# this works for single model runs
# for coupled runs the lists should be declared explicilty
if [ x$namelist_list = x ]; then
#  minrank_list=(        0           )
#  maxrank_list=(     65535          )
#  incrank_list=(        1           )
  minrank_list[0]=0
  maxrank_list[0]=65535
  incrank_list[0]=1
  if [ x$atmo_namelist != x ]; then
    # this is the atmo model
    namelist_list[0]="$atmo_namelist"
    modelname_list[0]="atmo"
    modeltype_list[0]=1
    run_atmo="true"
  elif [ x$ocean_namelist != x ]; then
    # this is the ocean model
    namelist_list[0]="$ocean_namelist"
    modelname_list[0]="oce"
    modeltype_list[0]=2
  elif [ x$psrad_namelist != x ]; then
    # this is the psrad model
    namelist_list[0]="$psrad_namelist"
    modelname_list[0]="psrad"
    modeltype_list[0]=3
  elif [ x$hamocc_namelist != x ]; then
    # this is the hamocc model
    namelist_list[0]="$hamocc_namelist"
    modelname_list[0]="hamocc"
    modeltype_list[0]=4
  elif [ x$jsbach_namelist != x ]; then
    # this is the jsbach standalone model
    namelist_list[0]="$jsbach_namelist"
    modelname_list[0]="jsbach"
    modeltype_list[0]=5
    run_jsbach_standalone="true"
  elif [ x$dace_namelist != x ]; then
    # this is the dace model
    namelist_list[0]="$dace_namelist"
    modelname_list[0]="dace"
    modeltype_list[0]=6
  elif [ x$testbed_namelist != x ]; then
    # this is the testbed model
    namelist_list[0]="$testbed_namelist"
    modelname_list[0]="testbed"
    modeltype_list[0]=99
  else
    check_error 1 "No namelist is defined"
  fi 
fi

#-----------------------------------------------------------------------------


#-----------------------------------------------------------------------------
# set some default values and derive some run parameteres
restart=${restart:=".false."}
restartSemaphoreFilename='isRestartRun.sem'
#AUTOMATIC_RESTART_SETUP:
if [ -f ${restartSemaphoreFilename} ]; then
  restart=.true.
  #  do not delete switch-file, to enable restart after unintended abort
  #[[ -f ${restartSemaphoreFilename} ]] && rm ${restartSemaphoreFilename}
fi
#END AUTOMATIC_RESTART_SETUP
#
# wait 5min to let GPFS finish the write operations
if [ "x$restart" != 'x.false.' -a "x$submit" != 'x' ]; then
  if [ x$(df -T ${EXPDIR} | cut -d ' ' -f 2) = gpfs ]; then
    sleep 10;
  fi
fi
# fill some checks

run_atmo=${run_atmo="false"}
if [ x$atmo_namelist != x ]; then
  run_atmo="true"
  run_jsbach_standalone="false"
fi
run_jsbach=${run_jsbach="false"}
if [ x$jsbach_namelist != x ]; then
  run_jsbach="true"
fi
run_ocean=${run_ocean="false"}
if [ x$ocean_namelist != x ]; then
  run_ocean="true"
fi
run_psrad=${run_psrad="false"}
if [ x$psrad_namelist != x ]; then
  run_psrad="true"
fi
run_hamocc=${run_hamocc="false"}
if [ x$hamocc_namelist != x ]; then
  run_hamocc="true"
fi

#-----------------------------------------------------------------------------
# add grids to required files
all_grids="${atmo_dyn_grids} ${atmo_rad_grids} ${ocean_grids}"
for gridfile in ${all_grids}; do
  #
  gridfile=${gridfile//\'/} # strip all ' in case ' is used to delimit the grid names
  gridfile=${gridfile//\"/} # strip all " in case " is used to delimit the grid names
  gridfile=${gridfile//\,/} # strip all , in case , is used to separate the grid names
  #
  grfinfofile=${gridfile%.nc}-grfinfo.nc
  #
  ls -l ${HGRIDDIR}/$gridfile
  check_error $? "${HGRIDDIR}/$gridfile does not exist."
  add_link_file ${HGRIDDIR}/${gridfile} ./
  if [ -f ${HGRIDDIR}/${grfinfofile} ]; then    
    add_link_file ${HGRIDDIR}/${grfinfofile} ./
  fi
done
#-----------------------------------------------------------------------------
# print_required_files
copy_required_files
link_required_files


#-----------------------------------------------------------------------------
# get restart files

if  [ x$restart_atmo_from != "x" ] ; then
  rm -f restart_atm_DOM01.nc
#  ln -s ${basedir}/experiments/${restart_from_folder}/${restart_atmo_from} ${EXPDIR}/restart_atm_DOM01.nc
  cp ${basedir}/experiments/${restart_from_folder}/${restart_atmo_from} cp_restart_atm.nc
  ln -s cp_restart_atm.nc restart_atm_DOM01.nc
  restart=".true."
fi
if  [ x$restart_ocean_from != "x" ] ; then
  rm -f restart_oce.nc
#  ln -s ${basedir}/experiments/${restart_from_folder}/${restart_ocean_from} ${EXPDIR}/restart_oce.nc
  cp ${basedir}/experiments/${restart_from_folder}/${restart_ocean_from} cp_restart_oce_DOM01.nc
  ln -s cp_restart_oce_DOM01.nc restart_oce_DOM01.nc
  restart=".true."
fi
#-----------------------------------------------------------------------------


read_restart_namelists=${read_restart_namelists:=".true."}

#-----------------------------------------------------------------------------
#
# create ICON master namelist
# ------------------------
# For a complete list see Namelist_overview and Namelist_overview.pdf

#-----------------------------------------------------------------------------
# create master_namelist
if [ -z "$dont_create_icon_master_namelist" ]; then
  master_namelist=icon_master.namelist

  calendar=${calendar:="proleptic gregorian"}
  calendar_type=${calendar_type:=1}
  {
    echo "&master_nml"
    echo " lrestart               =  $restart"
    echo " read_restart_namelists =  $read_restart_namelists"
    echo "/"

    if [ -z "$nsteps" ]; then
      echo "&master_time_control_nml"
      echo " calendar             = '$calendar'"
      echo " experimentStartDate  = '$start_date'"
      echo " restartTimeIntval    = '$restart_interval'"
      echo " checkpointTimeIntval = '$checkpoint_interval'"
      if [ -n "$end_date" ]; then
        echo " experimentStopDate = '$end_date'"
      fi
      echo "/"

      echo "&time_nml"
      echo " is_relative_time     = .false."
      echo "/"

    else # $nsteps is set -> use time_nml:ini_datetime_string
      echo "&time_nml"
      echo " calendar             =  $calendar_type"
      echo " ini_datetime_string  = '$start_date'"
      echo " dt_restart           =  $dt_restart"
      echo "/"
    fi
  } > $master_namelist

fi
#-----------------------------------------------------------------------------


#-----------------------------------------------------------------------------
# add model component to master_namelist
add_component_to_master_namelist()
{
  model_namelist_filename=$1
  if [ x${dont_create_icon_master_namelist+set} != xset ]; then
    model_name=$2
    model_type=$3
    model_min_rank=$4
    model_max_rank=$5
    model_inc_rank=$6
    model_rank_group_size=$7
    cat >> $master_namelist << EOF
&master_model_nml
  model_name="$model_name"
  model_namelist_filename="$model_namelist_filename"
  model_type=$model_type
  model_min_rank=$model_min_rank
  model_max_rank=$model_max_rank
  model_inc_rank=$model_inc_rank
  model_rank_group_size=$model_rank_group_size
/
EOF
  fi

  #-----------
  #get namelist
  if [ -f ${RUNSCRIPTDIR}/$model_namelist_filename ] ; then
    mv -f ${RUNSCRIPTDIR}/$model_namelist_filename ${EXPDIR}
    check_error $? "mv -f ${RUNSCRIPTDIR}/$model_namelist_filename ${EXPDIR}"
  else
    check_error 1 "${RUNSCRIPTDIR}/$model_namelist_filename does not exist"
  fi
}
#-----------------------------------------------------------------------------


no_of_models=${#namelist_list[*]}
echo "no_of_models=$no_of_models"

rank_group_size=1
j=0
while [ $j -lt ${no_of_models} ]
do
  add_component_to_master_namelist "${namelist_list[$j]}" "${modelname_list[$j]}" ${modeltype_list[$j]} ${minrank_list[$j]} ${maxrank_list[$j]} ${incrank_list[$j]} ${rank_group_size}
  j=`expr ${j} + 1`
done

#-----------------------------------------------------------------------------
# Add JSBACH part to master_namelist
# For several domains, $jsbach_namelist is only the basename for each domain's jsbach namelist;
#   the actual namelist files are appended by suffixes '_d1', '_d2', etc.

if [[ $run_jsbach == @(yes|true) ]]; then
  cat >> $master_namelist << EOF
&jsb_control_nml
 is_standalone      = .${run_jsbach_standalone:=false}.
 restart_jsbach     = ${restart}
 debug_level        = 0
 timer_level        = 0
/
EOF
#
if [[ -n ${atmo_dyn_grids} ]]; then
  no_of_domains=${#atmo_dyn_grids[@]}
else
  no_of_domains=1
fi
echo "no_of_domains=$no_of_domains"
domain=""
domain_suffix=""
j=1
while [ $j -le ${no_of_domains} ]
do
  if [[ $no_of_domains -gt 1 ]]; then
    # no_of_domains < 10 !
    domain=" DOM0${j}"
    domain_suffix="_d${j}"
  fi
  cat >> $master_namelist << EOF
&jsb_model_nml
 model_id = $j
 model_name = "JSBACH${domain}"
 model_shortname = "jsb${domain_suffix}"
 model_description = 'JSBACH land surface model'
 model_namelist_filename = "${jsbach_namelist}${domain_suffix}"
/
EOF
  if [[ ${run_jsbach_standalone} != true ]]; then
    if [[ -f ${RUNSCRIPTDIR}/${jsbach_namelist}${domain_suffix} ]] ; then
      mv ${RUNSCRIPTDIR}/${jsbach_namelist}${domain_suffix} ${EXPDIR}
      check_error $? "mv ${RUNSCRIPTDIR}/${jsbach_namelist}${domain_suffix}"
    else
      check_error 1 "${RUNSCRIPTDIR}/${jsbach_namelist}${domain_suffix} does not exist"
    fi
  fi
  j=`expr ${j} + 1`
done
fi
#
#  get model
#
ls -l ${MODEL}
check_error $? "${MODEL} does not exist?"
#
ldd ${MODEL}
#
#-----------------------------------------------------------------------------
#
# start experiment
#

rm -f finish.status
#
date
set -x
${START} ${MODEL} # > out.txt 2>&1
set +x
date
#
if [ -r finish.status ] ; then
  check_final_status 0 "${START} ${MODEL}"
else
  check_final_status -1 "${START} ${MODEL}"
fi
#
#-----------------------------------------------------------------------------
#
finish_status=`cat finish.status`
echo $finish_status
echo "============================"
echo "Script run successfully: $finish_status"
echo "============================"

#-----------------------------------------------------------------------------
# rm output_schedule_steps*
#-----------------------------------------------------------------------------
if [[ "x$use_hamocc" = "xyes" ]]; then
# store HAMOCC log file
strg="$(ls -rt ${EXPNAME}_hamocc_EU*.nc* | tail -1 )"
prefx="${EXPNAME}_hamocc_EU_tendencies"
foo=${strg##${prefx}}
foo=${foo%%.*}
bgcout_file="bgcout_${foo}"
mv bgcout $bgcout_file
fi
#-----------------------------------------------------------------------------
namelist_list=""
#-----------------------------------------------------------------------------
# check if we have to restart, ie resubmit
#   Note: this is a different mechanism from checking the restart
if [ $finish_status = "RESTART" ] ; then
  echo "restart next experiment..."
  this_script="${RUNSCRIPTDIR}/${job_name}"
  echo 'this_script: ' "$this_script"
  touch ${restartSemaphoreFilename}
  cd ${RUNSCRIPTDIR}
  ${submit} $this_script $run_param_0
else
  [[ -f ${restartSemaphoreFilename} ]] && rm ${restartSemaphoreFilename}
fi

#-----------------------------------------------------------------------------
# automatic call/submission of post processing if available
if [ "x${autoPostProcessing}" = "xtrue" ]; then
  # check if there is a postprocessing is available
  cd ${RUNSCRIPTDIR}
  targetPostProcessingScript="./post.${EXPNAME}.run"
  [[ -x $targetPostProcessingScript ]] && ${submit} ${targetPostProcessingScript}
  cd -
fi

#-----------------------------------------------------------------------------

cd $RUNSCRIPTDIR

#-----------------------------------------------------------------------------

	
# exit 0
#
# vim:ft=sh
#-----------------------------------------------------------------------------
