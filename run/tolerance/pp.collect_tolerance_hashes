#!/bin/bash

# ICON
#
# ------------------------------------------
# Copyright (C) 2004-2024, DWD, MPI-M, DKRZ, KIT, ETH, MeteoSwiss
# Contact information: icon-model.org
# See AUTHORS.TXT for a list of authors
# See LICENSES/ for license information
# SPDX-License-Identifier: BSD-3-Clause
# ------------------------------------------

set -euo pipefail

# This script collects all probtest tolerance/reference data and
# 1. creates a hash list of experiment:hash(tolerance, reference)
# 2. Copies new tolerance/reference data to the pool
# 3. adds the current data and icon-git-hash to used_in file


# Variables passed via list_probtest -> addexp/runexp -> create_target_header
#
# tolerance_experiments : comma separated list of experiments
# generate_hash_file : if "yes", then write a new yaml file. Otherwise print lines
#                      to update the hash_file (default: "yes")
# basedir : the directory where ICON has been build in.

# make sure the resulting data and directories are global readable
umask 0022

# get date string
date_str=$(date '+%Y-%m-%d %H:%M:%S')

# get repository
origin=$(git config --get remote.origin.url)

# get current commit
git_commit=$(git rev-parse HEAD)

builder=$(echo "${BB_NAME}" | tr '[:upper:]' '[:lower:]')


reference_root="${icon_data_rootFolder}/buildbot_data/ref"


# make sure the resulting data and directories are global readable
umask 0022

# generating iterable array of builders
IFS=',' read -ra experiments <<< "${tolerance_experiments}"

declare -A experiment_hashes

for exp in "${experiments[@]}"; do
    reference_file_name="${basedir}/${exp}_reference.csv"
    tolerance_file_name="${basedir}/${exp}_tolerance.csv"

    if [ -f "$tolerance_file_name" ]; then
        experiment_hash=$(cat "$reference_file_name" "$tolerance_file_name" | sha256sum | cut -b -40 )
        reference_dir=${reference_root}/${experiment_hash}
        experiment_hashes[$exp]=$experiment_hash

        mkdir -p "$reference_dir"
        mv -v "$reference_file_name" "${reference_dir}/${exp}_reference.csv"
        mv -v "$tolerance_file_name" "${reference_dir}/${exp}_tolerance.csv"

        # leave a log message
        echo "${builder} ${date_str} ${origin} ${git_commit}" >> "${reference_dir}/sources.log"
    else
        experiment_hashes[$exp]="NO TOLERANCE FILE WAS CREATED. RETRY FOR THIS EXPERIMENT AND UPDATE LINE"
        echo "WARNING: Tolerance generation failded for ${exp}"
    fi

done

# sort keys
declare -a sorted_keys
sort_keys () {
    # Sort function arguments into array `sorted_keys`.
    # Arguments must not contain a `\n` character.
    local IFS=$'\n' # use as separator for $* and to split the output of sort into an array
    # "$*" will be substituted by a IFS-joined string of all arguments.
    # Brackets convert the output of sort into array.
    local LC_ALL=C # use language independent, traditional sort order by byte values
    sorted_keys=($(sort <<< "$*"))
}
sort_keys "${!experiment_hashes[@]}"

# Please don't change these path/file names. They are used by buildbot.
hash_path=run/tolerance/hashes
mkdir -p "${basedir}/${hash_path}/new/"
hash_file=${basedir}/${hash_path}/${builder}
hash_file_new=${basedir}/${hash_path}/new/${builder}

# in case no hash file exists for this builder yet, create one
# or in case no update is requested, create new has file
if [[ ! -f "${basedir}/${hash_path}/${builder}" ]] ||  [[ "${generate_hash_file:=yes}" == yes ]]; then

    {
        # write yaml dictionary
        echo "--- # ICON probtest tolerance data"
        echo "# This file can be parsed using yaml"
        echo "# Data is stored in <icon_data_rootFolder>/buildbot_data/ref/<experiment_hash>"
        echo "icon_data_rootFolder: ${icon_data_rootFolder}"
        echo "builder: ${builder}"
        echo "# The list below maps each experiment to its current experiment_hash"
        for exp in "${sorted_keys[@]}"; do
            experiment_hash=${experiment_hashes[$exp]}
            echo "\"$exp\": $experiment_hash"
        done
    } > "$hash_file_new"

    cat "$hash_file_new"

else # update requested
    echo ""
    echo "Please update the following ${#sorted_keys[@]} line(s) in '${hash_path}/${builder}'."
    echo "If any of the experiments is not yet in the list, please add it in alphabetical order"
    for exp in "${sorted_keys[@]}"; do
        experiment_hash=${experiment_hashes[$exp]}
        echo "\"$exp\": $experiment_hash"
    done
    echo ""

    icon_data_rootFolder_in_hash_file=$(sed -n -e "s/^icon_data_rootFolder: //p" "$hash_file")
    if [[ "$icon_data_rootFolder" != "$icon_data_rootFolder_in_hash_file" ]]; then
        echo "╔══════════════════════════════════════════════════════════════════════════════╗"
        echo "║                                   WARNING                                    ║"
        echo "║                                                                              ║"
        echo "║ The icon_data_rootFolder used to create the new tolerance data and           ║"
        echo "║ icon_data_rootFolderdefined in the current                                   ║"
        printf "║   %-74s ║\n" "${hash_path}/${builder}"
        echo "║  yaml file are different!                                                    ║"
        echo "║                                                                              ║"
        echo "║ Please make sure that all (old) tolerance data is available under            ║"
        printf "║   %-74s ║\n" "${icon_data_rootFolder}/buildbot_data/ref"
        echo "║ and update icon_data_rootFolder in                                           ║"
        printf "║   %-74s ║\n" "${hash_path}/${builder}"
        echo "║ to                                                                           ║"
        echo "║   icon_data_rootFolder: ${icon_data_rootFolder}"
        echo "╚══════════════════════════════════════════════════════════════════════════════╝"
    fi

    echo "# Don't use this file" > "$hash_file_new"
    echo "# Please update the tolerance hashes manually by using the output of tolerance/pp.collect_tolerance_hashes" > "$hash_file_new"
fi

# exit 0 on success (and don't execute any appended scripts)
exit 0
