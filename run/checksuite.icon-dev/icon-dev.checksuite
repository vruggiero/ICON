#!/bin/bash

# ICON
#
# ------------------------------------------
# Copyright (C) 2004-2024, DWD, MPI-M, DKRZ, KIT, ETH, MeteoSwiss
# Contact information: icon-model.org
# See AUTHORS.TXT for a list of authors
# See LICENSES/ for license information
# SPDX-License-Identifier: BSD-3-Clause
# ------------------------------------------

set +x

# assume this script is started in run/checksuite.icon-dev
cd ..

# get paths standardized by pwd
SCRIPT_DIR=${SCRIPT_DIR:=`pwd`}
cd ..
MODEL_DIR=`pwd`
cd $SCRIPT_DIR

PREFIX=${PREFIX:=exp}

#################### functions ##########################################
function one_or_more_are_files
{
    # Test if one or more of given arguments are real files
    #
    # Invocation: one_or_more_are_files foo*

    #        $# is the number of arguments passed to this function
    while [ "$#" != "0" ]; do # loop as long as there is an argument left 
        if [ -f "$1" ]; then
            # at least one file was found
            return 0
        fi
        shift 1 # drop $1 argument, shift next argument to $1 and decrement $# by 1
    done
    # no file found for given argument
    return 1
}
function copy_experiment
{
    typeset MODEL_DIR EXP_ORI EXP_NEW
    MODEL_DIR=$1
    EXP_ORI=$2
    EXP_NEW=$3
    cd ${MODEL_DIR}/experiments
    if [ ! -d "${EXP_ORI}" ]; then
        echo 'no experiment '${EXP_ORI}' found'
        exit 1
    fi

    rm -rf ${EXP_NEW}
    mkdir ${EXP_NEW}

    # check for the existence of either
    #   - a restart file, or
    #   - a (multifile) "*.nc"-restart directory
    #   - a (multifile) "*.mfr"-restart directory
    #
    COMPS=''

    if one_or_more_are_files ${EXP_ORI}/${EXP_ORI}_restart_*${RESTART_DATE}.nc 1> /dev/null 2>&1; then

        # CASE 1: (Standard) Single-file restart

        echo "(Standard) Single-file restart"
        if one_or_more_are_files ${EXP_ORI}/${EXP_ORI}_restart_atm_*${RESTART_DATE}.nc 1> /dev/null 2>&1; then
            COMPS=${COMPS}' atm'
        fi
        if one_or_more_are_files ${EXP_ORI}/${EXP_ORI}_restart_oce_*${RESTART_DATE}.nc 1> /dev/null 2>&1; then
            COMPS=${COMPS}' oce'
        fi
        if one_or_more_are_files ${EXP_ORI}/${EXP_ORI}_restart_lnd_*${RESTART_DATE}.nc 1> /dev/null 2>&1; then
            COMPS=${COMPS}' lnd'
        fi
        if one_or_more_are_files ${EXP_ORI}/${EXP_ORI}_restart_wave_*${RESTART_DATE}.nc 1> /dev/null 2>&1; then
            COMPS=${COMPS}' wave'
        fi

        cd ${EXP_NEW}

        for COMP in ${COMPS}; do
            cp ../${EXP_ORI}/${EXP_ORI}_restart_${COMP}_*${RESTART_DATE}.nc .
            NDOM=`ls ../${EXP_ORI}/${EXP_ORI}_restart_${COMP}_*${RESTART_DATE}.nc | wc -w`
            DOM=01
            while [ "${DOM}" -le "${NDOM}" ]; do
                if [ ${#DOM} -lt 2 ]; then
                    DOM=0${DOM}
                fi 
                if [ ${NDOM} -eq 1 ]; then
                    ln -sf ${EXP_ORI}_restart_${COMP}_${RESTART_DATE}.nc restart_${COMP}_DOM${DOM}.nc
                else
                    ln -sf ${EXP_ORI}_restart_${COMP}_DOM${DOM}_${RESTART_DATE}.nc restart_${COMP}_DOM${DOM}.nc
                fi
                DOM=$(( DOM + 1 ))
            done
        done

    elif [ -d ${EXP_ORI}/${EXP_ORI}_restart_*${RESTART_DATE}.nc ]; then

            # CASE 2: Multifile restart with directory name extension .nc and with domain index DOM00

            echo "Multifile restart"
            if [ -d ${EXP_ORI}/${EXP_ORI}_restart_atm_*${RESTART_DATE}.nc ]; then
                COMPS=${COMPS}' atm'
            fi
            if [ -d ${EXP_ORI}/${EXP_ORI}_restart_oce_*${RESTART_DATE}.nc ]; then
                COMPS=${COMPS}' oce'
            fi
            if [ -d ${EXP_ORI}/${EXP_ORI}_restart_lnd_*${RESTART_DATE}.nc ]; then
                COMPS=${COMPS}' lnd'
            fi
            if [ -d ${EXP_ORI}/${EXP_ORI}_restart_wave_*${RESTART_DATE}.nc ]; then
                COMPS=${COMPS}' wave'
            fi

            cd ${EXP_NEW}

            for COMP in ${COMPS}; do
                cp -r ../${EXP_ORI}/${EXP_ORI}_restart_${COMP}_*${RESTART_DATE}.nc .
                ln -sf ${EXP_ORI}_restart_${COMP}_DOM00_${RESTART_DATE}.nc multifile_restart_${COMP}.mfr
            done

    elif [ -d ${EXP_ORI}/${EXP_ORI}_restart_*${RESTART_DATE}.mfr ]; then

            # CASE 3: Multifile restart with directory name extension .mfr and without domain index

            echo "Multifile restart"
            if [ -d ${EXP_ORI}/${EXP_ORI}_restart_atm_*${RESTART_DATE}.mfr ]; then
                COMPS=${COMPS}' atm'
            fi
            if [ -d ${EXP_ORI}/${EXP_ORI}_restart_oce_*${RESTART_DATE}.mfr ]; then
                COMPS=${COMPS}' oce'
            fi
            if [ -d ${EXP_ORI}/${EXP_ORI}_restart_lnd_*${RESTART_DATE}.mfr ]; then
                COMPS=${COMPS}' lnd'
            fi
            if [ -d ${EXP_ORI}/${EXP_ORI}_restart_wave_*${RESTART_DATE}.mfr ]; then
                COMPS=${COMPS}' wave'
            fi

	    cd ${EXP_NEW}

            for COMP in ${COMPS}; do
                cp -r ../${EXP_ORI}/${EXP_ORI}_restart_${COMP}_*${RESTART_DATE}.mfr .
                ln -sf ${EXP_ORI}_restart_${COMP}_${RESTART_DATE}.mfr multifile_restart_${COMP}.mfr
            done

    else

            echo "Cannot find restart file: ${EXP_ORI}/${EXP_ORI}_restart_*${RESTART_DATE}.nc "
            echo "and no multifile restart directory ../${EXP_ORI}/${EXP_ORI}_restart_*${RESTART_DATE}.nc"
            echo "and no multifile restart directory ../${EXP_ORI}/${EXP_ORI}_restart_*${RESTART_DATE}.mfr"
            echo "The run ${EXP_ORI} did not write any restart at ${RESTART_DATE}"
            exit 1
    fi
}
#------------------------------------------------------------------------
function print_usage
{
    typeset COMMAND
    COMMAND=$1
    
    echo "usage: ${COMMAND} [-c] [-d <dates>] [-e <experiment>] [-f yes|no] [-h] [-m <modes>] [-o yes|no] [-r <reference model path>] [-s <restart_date>] [-t <files>] [-u]"
    echo '-c : colour output'
    echo '-d : string containing the dates of the output files of the respective '
    echo '     experiment, default depends on experiment' 
    echo '-e : name of the experiment to be checked, default = atm_ape_test'
    echo '-f : '"'yes'"': force make_runscripts even if base runscript exists (default)'
    echo '     '"'no'"': perform make_runscripts only if no runscripts are available'
    echo '-h : display help'
    echo '-m : combination of letters representing possible tests to be ran:'
    echo '     (u)pdate, (r)estart, (n)proma, (m)pi, (o)mp, (t)olerance, (p)erformance,'
    echo '     (c)ompute-sanitizer and cuda-(g)raph'
    echo '     Default: rnmo'
    echo '-o : '"'yes'"': overwrite existing experiments (default)'
    echo '     '"'no'"': use existing experiments'
    echo '-r : reference model path'
    echo '-s : Date in file name of restart file of respective experiment,'
    echo '     the default depends on the respective experiment default'
    echo '-t : Types of output files, the default depends on the respective'
    echo '     experiment'
    echo '-u : if files of the experiments differ, '
    echo '     calculate the difference between these files with cdo sub'
    echo
    echo 'NOTE: In its current state this checksuite use the runscript generator'
    echo '      with its default values. Please check run/create_target_header'
    echo '      wrt. the target system for the exact values!'
}
#------------------------------------------------------------------------
function diff_results
{
    typeset MODEL_DIR1 DEXP1 MODEL_DIR2 DEXP2 TEST FILES FILE1 FILE2 STATUS
    MODEL_DIR1=$1
    DEXP1=$2
    MODEL_DIR2=$3
    DEXP2=$4
    TEST=$5
    #TYPES: defined in main script and used from main script 
    #DATES: defined in main script and used from main script 

    # status variable that is evaluated after the function call
    DIFF_STATUS=0

    # create more beautiful output for variables MODEL_DIR[12]
    cd $MODEL_DIR2; MODEL_DIR2=`pwd`
    cd $MODEL_DIR1; MODEL_DIR1=`pwd`

    # dump output of "cdo diffn", if differences exist, only for the first date
    CAT_CDO_DIFFN='yes'

    # if this is the restart test, then compare only for dates after the restart date
    DIFF_DATES=""
    if [ "$TEST" == "restart" ]; then
        for DATE in $DATES; do
            if [ $DATE \> $RESTART_DATE ]; then
                DIFF_DATES="$DIFF_DATES $DATE"
            fi
        done
    else
        DIFF_DATES=$DATES
    fi

    if [ "x$TYPES" == "x" ]; then
        echo "There are no file types to compare"
        exit 1
    fi

    if [ "x$TYPES" == "xmaxwinds.log" ]; then

        echo "=================================================================="
        echo "Comparing maxwinds.log files"
        echo " "
        FILE1="${MODEL_DIR1}/experiments/${DEXP1}/maxwinds.log"
        FILE2="${MODEL_DIR2}/experiments/${DEXP2}/maxwinds.log"
	# test if the maxwinds.log file of the restarted run is a
	# subset of the non-restarted run:
	subset_cmp=$(diff --unchanged-line-format= --old-line-format= --new-line-format='%L' ${FILE1} ${FILE2} | wc -l)
        echo " "
	if [ "$subset_cmp" -eq "0" ]
	then
	    echo "File maxwinds.log of the second run is a subset of the first run."
            DIFF_STATUS=0
            STATUS=0
	else
	    echo "File maxwinds.log of the second run is NOT a subset of the first run."
            DIFF_STATUS=1
            STATUS=1
	fi
        echo " "

    else

        if [ "x$DIFF_DATES" == "x" ]; then
            echo "There are no dates to compare"
            exit 1
        fi

        make_sure_cdo_exists_and_runs

        echo "=================================================================="
        echo "Compare these experiments:"
        echo "- ${MODEL_DIR1}/experiments/${DEXP1}"
        echo "- ${MODEL_DIR2}/experiments/${DEXP2}"
        echo " "
    
        for DATE in $DIFF_DATES; do
    
            echo "------------------------------------------------------------------"
            echo "Compare for DATE=$DATE"
            DIFFERENT_TYPES=''
    
            for TYPE in $TYPES; do

                TEMP_SUFFIX=$(cat /dev/urandom | env LC_ALL=C tr -cd 'a-f0-9' | head -c 16)

                rm -f  FILE1_undefined_${TEMP_SUFFIX}; FILE1="FILE1_undefined_${TEMP_SUFFIX}"
                rm -f  FILE2_undefined_${TEMP_SUFFIX}; FILE2="FILE2_undefined_${TEMP_SUFFIX}"

		if  [ -f  "${MODEL_DIR1}/experiments/${DEXP1}/${DEXP1}_${TYPE}_${DATE}.nc" ]
                then
                    FILE1="${MODEL_DIR1}/experiments/${DEXP1}/${DEXP1}_${TYPE}_${DATE}.nc"
                    #
                    if  [ -f  "${MODEL_DIR2}/experiments/${DEXP2}/${DEXP2}_${TYPE}_${DATE}.nc" ]
                    then
                        FILE2="${MODEL_DIR2}/experiments/${DEXP2}/${DEXP2}_${TYPE}_${DATE}.nc"
                    fi
                else
                    if  [ -f  "${MODEL_DIR1}/experiments/${DEXP1}/${DEXP1}_${TYPE}_${DATE}.grb" ]
                    then
                        FILE1="${MODEL_DIR1}/experiments/${DEXP1}/${DEXP1}_${TYPE}_${DATE}.grb"
                        #
                        if  [ -f  "${MODEL_DIR2}/experiments/${DEXP2}/${DEXP2}_${TYPE}_${DATE}.grb" ]
                        then
                        FILE2="${MODEL_DIR2}/experiments/${DEXP2}/${DEXP2}_${TYPE}_${DATE}.grb"
                        fi
                    fi
                fi

		if [ -f  "$FILE1" ] && [ -f  "$FILE2" ]
		then

                echo "Compare for TYPE=$TYPE"

                DIFF_FILE="cdo_diffn_${DEXP1}_${DEXP2}_${TYPE}_${DATE}_${TEMP_SUFFIX}.out"

                cdo diffn ${FILE1} ${FILE2} > ${DIFF_FILE}

		# does FILE2 contain the same variables as FILE1?
		not_found=$(grep 'not found' ${DIFF_FILE}|wc -l)
                if [ $not_found -ge 1 ]; then
                    echo " $not_found variable(s) of file 1 not found in file 2 -> files cannot be compared"
                    echo " - file 1: ${FILE1}"
                    echo " - file 2: ${FILE2}"
                    DIFFERENT_TYPES="$DIFFERENT_TYPES $TYPE"
                fi

		# have differences been reported?
		Max_Absdiff=$(grep 'Max_Absdiff' ${DIFF_FILE}|wc -l)
                if [ $Max_Absdiff -ne 0 ]; then
                    echo " File 1 and file 2 differ"
                    echo " - file 1: ${FILE1}"
                    echo " - file 2: ${FILE2}"
                    if [ "$CAT_CDO_DIFFN" == 'yes' ]; then
                        cat ${DIFF_FILE}
                    fi
                    rm  ${DIFF_FILE}
                    IS_DIFFERENT='yes'
                    DIFFERENT_TYPES="$DIFFERENT_TYPES $TYPE"
                    if [ "$SUB_FILES" == 'yes' ]; then
                        BFILE1=`basename $FILE1`
                        BFILE2=`basename $FILE2`
                        WDIR=`dirname $FILE2`
                        cdo sub ${FILE2} ${FILE1} ${WDIR}/diff_${BFILE2}-${BFILE1}
                    fi
                else
                    # No differences are reported.
                    # Thus the diff file can be deleted.
                    rm ${DIFF_FILE}
                fi

		else
		    echo "File(s) for $TYPE not found:"
		    if ! [ -f  "$FILE1" ]; then echo "FILE1 does not exist: ${MODEL_DIR1}/experiments/${DEXP1}/${DEXP1}_${TYPE}_${DATE}.<nc|grb>"; fi
		    if ! [ -f  "$FILE2" ]; then echo "FILE2 does not exist: ${MODEL_DIR2}/experiments/${DEXP2}/${DEXP2}_${TYPE}_${DATE}.<nc|grb>"; fi
                    DIFFERENT_TYPES="$DIFFERENT_TYPES $TYPE"
		fi

            done
    
            if [ "x$DIFFERENT_TYPES" != 'x' -a $CAT_CDO_DIFFN == 'yes' ]; then
                DIFF_STATUS=1
                DIFF_DATE=$DATE
                DIFF_TYPES=$DIFFERENT_TYPES
                CAT_CDO_DIFFN='no'
            fi
    
        done
    
        if [ $DIFF_STATUS == 0 ]; then
            echo " "
            echo "The experiments are equal"
            echo " "
        else
            echo " "
            echo "The experiments differ:"
            echo "- first at date/time $DIFF_DATE"
            echo "- for the file types $DIFF_TYPES"
            echo " "
        fi
    fi
}
#------------------------------------------------------------------------
function tolerance_check
{
    typeset MODEL_DIR1 EXP_BASE EXPERIMENT STATUS
    MODEL_DIR1=$1
    EXP_BASE=$2
    EXPERIMENT=$3

    cd $MODEL_DIR
    builder=$(echo "${BB_NAME}" | tr '[:upper:]' '[:lower:]')
    run/tolerance/check_tolerance "$EXPERIMENT" "${builder/_gpu/_cpu}" "$MODEL_DIR1" "$EXP_BASE" "$FACTOR"
    return $?
}

#------------------------------------------------------------------------
function performance_check
{
    typeset MODEL_DIR1 EXPERIMENT
    MODEL_DIR1=$1
    EXPERIMENT=$2
    PROBTEST=externals/probtest/probtest.py

    # status variable that is evaluated after the function call
    TOL_STATUS=0
    cd $MODEL_DIR1 || exit 1

    # use the correct reference
    PERFORMANCE_REFERENCE="${MODEL_DIR1}/run/performance_reference/${EXPERIMENT}_${BB_NAME}"

    # find LOG file (This assumes there is only one log file of the exp in question in the run directory)
    LOG_FILE=$(find "${MODEL_DIR1}/run" -name "LOG.check.${EXPERIMENT}*" -print -prune)

    echo "Running performance check with reference at ${PERFORMANCE_REFERENCE}"

    # generate performance data from the LOG file
    $PROBTEST --log-file "check-${EXPERIMENT}.log" performance \
        --timing-regex ${LOG_FILE} \
        --timing-database ${EXPERIMENT}_${BB_NAME} \
        --append-time False
    TOL_STATUS=$?

    # compare the generated performance against the reference
    # Assumption: The first table is the correct one
    $PROBTEST --log-file "check-${EXPERIMENT}.log" performance-check \
        --timing-current ${EXPERIMENT}_${BB_NAME} \
        --timing-reference run/performance_reference/${EXPERIMENT}_${BB_NAME} \
        --i-table 0 \
        --measurement-uncertainty 2 \
        --tolerance-factor 1.04 \
        --new-reference-threshold 0.96
    TOL_STATUS=$?

    # get the relevant success check
    fail=$(grep -c "RESULT.*FAIL" "check-${EXPERIMENT}.log" || true)
    crash=$(grep -c "RESULT.*CRASH" "check-${EXPERIMENT}.log" || true)
    finished=$(grep -c RESULT "check-${EXPERIMENT}.log" || true)
    if [[ $(($fail+$crash)) -gt 0 || $((finished)) -lt 1 ]] ; then
        TOL_STATUS=1
    fi

    if [[ $TOL_STATUS -gt 0 ]] ; then
        cat "check-${EXPERIMENT}.log"
        echo "testsuite did not complete successfully"
    fi

    return $TOL_STATUS
}

#------------------------------------------------------------------------
make_sure_cdo_exists_and_runs() {

    # is cdo in PATH?
    if ! [ -x "$(command -v cdo)" ]; then
        echo 'Error: cdo is not installed.' >&2
        exit 1
    fi

    # does cdo find all linked-libraries?
    cdo -sinfo -topo 1>/dev/null 2>&1
    if [ $? -ne 0 ]
    then
      echo 'Error: cdo does not run' >&2
      exit 1
    fi


}

#------------------------------------------------------------------------
# Functions to set or get namelist parameters assuming one parameter per line 

nml_replace(){
    PARAM=$1
    VALUE=$2
    FILE=$3
    if grep -q '^[[:space:]]*'${PARAM}'[[:space:]]*=' ${FILE}; then
        sed 's/\(^\s*'$PARAM'\s*=\s*\).*$/\1'${VALUE}'/' < ${FILE} > ${FILE}.out
        mv ${FILE}.out ${FILE}
    else
        echo "$0:${FUNCNAME}: ERROR parameter ${PARAM} not found in ${FILE}"
        exit 1
    fi
}

nml_add(){
    PARAM=$1
    VALUE=$2
    NML=$3
    FILE=$4
    if grep -q '^[[:space:]]*&'${NML}'[[:space:]]*' ${FILE}; then
        sed -e '/\s*&'${NML}'/a\'$'\n'${PARAM}' = '${VALUE} < ${FILE} > ${FILE}.out
        mv ${FILE}.out ${FILE}
    else
        echo "$0:${FUNCNAME}: ERROR namelist ${NML} not found in ${FILE}"
        exit 1
    fi
}

nml_replace_or_add(){
    PARAM=$1
    VALUE=$2
    NML=$3
    FILE=$4
    if grep -q '^[[:space:]]*'${PARAM}'[[:space:]]*=' ${FILE}; then
        nml_replace ${PARAM} ${VALUE} ${FILE}
    else
        nml_add ${PARAM} ${VALUE} ${NML} ${FILE}
    fi
}

#################### main script ########################################

date

while getopts ":cd:e:f:hm:o:r:s:t:u" OPT; do
    case $OPT in
        c  ) COLOUR='yes'
            ;;
        d  ) DATES=$OPTARG
            ;;
        e  ) EXPERIMENT=$OPTARG
            ;;
        f  ) FORCE_MRS=$OPTARG
            if [ "$FORCE_MRS" != 'yes' -a "$FORCE_MRS" != 'no' ]; then
                print_usage $0
                exit 1
            fi
            ;;
        h  ) print_usage $0
            exit 1
            ;;
        m  ) MODE=$OPTARG 
            case $MODE in
                'base')              MD='b';;
                'update')            MD='u';;
                'restart')           MD='r';;
                'nproma')            MD='n';;
                'mpi')               MD='m';;
                'omp')               MD='o';;
                'tolerance')         MD='t';;
                'performance')       MD='p';;
                'compute-sanitizer') MD='c';;
                'cuda-graph')        MD='g';;
                *)                   MD=$MODE;;
            esac

            # Check if the given MODE arguments are correct
            i=1
            while (( i <= ${#MD} ))
            do
               char=$(expr substr "$MD" $i 1)
               case "$char" in
                  b|u|r|n|m|o|t|p|c|g )
                     (( i += 1 ))
                     ;;
                  *) 
                     print_usage $0
                     exit 1
                     ;;
               esac
            done
            ;;
        o  ) OVERWRITE=$OPTARG
            if [ "$OVERWRITE" != 'yes' -a "$OVERWRITE" != 'no' ]; then
                print_usage $0
                exit 1
            fi
            ;;
        r  ) REFERENCE=$OPTARG
            if [[ ${MD} =~ .*u.* ]]; then
                if [ ! -d ${REFERENCE} ]; then
	            echo 'you asked for an update test, but no reference model found'
	            echo "reference model ${REFERENCE} does not exist"
	            exit 1
	        fi
            fi
            ;;
        s  ) RESTART_DATE=$OPTARG
            ;;
        t  ) TYPES=$OPTARG
            ;;
        u  ) SUB_FILES='yes'
            ;;
        \? ) print_usage $0
            exit ;;
    esac
done

# Default values:
# The following variables are set to a default value if these variables
# are not set by an option argument yet or an environment variable.
# A calling script can set these variables exporting their values.

# Ouput in colour
COLOUR=${COLOUR='no'}
# Experiment
EXPERIMENT=${EXPERIMENT='atm_ape_test'}
# Force to run "make_runscripts" for the specified experiment even
# if the respective runscript is present 
FORCE_MRS=${FORCE_MRS='yes'}
# Test mode
#
# u = update test
# r = restart test
# n = nproma test
# m = mpi test
# o = omp test
# t = tolerance test
# p = performance test
# c = compute-sanitizer test
# g = cuda-graph
#
MD=${MD='rnmo'}
# Force to overwrite existing experiments even if they are present
OVERWRITE=${OVERWRITE='yes'}
# Specify a reference model
REFERENCE=${REFERENCE=''}
# Do not calculate differences between differing files
SUB_FILES=${SUB_FILES='no'}

# Set defaults for file types, dates, and the restart date for the 
# checks depending on the experiment.
if [ "${EXPERIMENT}" == 'atm_amip_les_test' ]; then
    TYPES=${TYPES='atm_2d_ml atm_3d_ml lnd_basic_ml'}
    DATES=${DATES='19790101T000000Z 19790101T000400Z 19790101T000800Z 19790101T001200Z 19790101T001600Z'}
    RESTART_DATE=${RESTART_DATE='19790101T000800Z'}
fi
if [ "${EXPERIMENT}" == 'oce_omip_0160km' ]; then
    TYPES=${TYPES='oceDefault oceDiag'}
    DATES=${DATES='20010101T000000Z 20010101T120000Z 20010101T180000Z 20010102T000000Z 20010102T120000Z 20010102T180000Z 20010103T000000Z'}
    RESTART_DATE=${RESTART_DATE='20010102T000000Z'}
fi
if [ "${EXPERIMENT}" == 'atm_icoles_nested' ]; then
    TYPES=${TYPES='prog_vars_DOM01_ML prog_vars_DOM02_ML pbl_vars_DOM01_ML pbl_vars_DOM02_ML cloud_diag_DOM01_ML cloud_diag_DOM02_ML'}
    DATES=${DATES='20130424T000500Z 20130424T001000Z 20130424T001500Z 20130424T002000Z'}
    RESTART_DATE=${RESTART_DATE='20130424T001000Z'}
fi
if [ "${EXPERIMENT}" == 'atm_jww_hs_test' ]; then
    TYPES=${TYPES='ml'}
    DATES=${DATES='20080901T001000Z 20080901T002000Z 20080901T003000Z 20080901T005000Z 20080901T010000Z'}
    RESTART_DATE=${RESTART_DATE='20080901T003000Z'}
fi
if [ "${EXPERIMENT}" == 'atm_ape_test' ]; then
    TYPES=${TYPES='atm_2d_ml atm_3d_ml phy_3d_ml'}
    DATES=${DATES='19790101T000000Z 19790101T000400Z 19790101T000800Z 19790101T001200Z 19790101T001600Z'}
    RESTART_DATE=${RESTART_DATE='19790101T000800Z'}
fi
if [ "${EXPERIMENT}" == 'atm_ape_mlo_test' ]; then
    TYPES=${TYPES='atm_2d_ml atm_3d_ml phy_3d_ml trc_3d_ml'}
    DATES=${DATES='19790101T000000Z 19790101T000400Z 19790101T000800Z 19790101T001200Z 19790101T001600Z'}
    RESTART_DATE=${RESTART_DATE='19790101T000800Z'}
fi
if [ "${EXPERIMENT}" == 'atm_rce_test' ]; then
    TYPES=${TYPES='atm_2d_ml phy_3d_ml'}
    DATES=${DATES='19790101T000000Z 19790101T000400Z 19790101T000800Z 19790101T001200Z 19790101T001600Z'}
    RESTART_DATE=${RESTART_DATE='19790101T000800Z'}
fi
if [ "${EXPERIMENT}" == 'atm_sma_test' ]; then
    TYPES=${TYPES='atm_2d_ml atm_3d_ml'}
    DATES=${DATES='20080101T000000Z 20080101T000002Z 20080101T000004Z 20080101T000006Z 20080101T000008Z'}
    RESTART_DATE=${RESTART_DATE='20080101T000004Z'}
fi
if [ "${EXPERIMENT}" == 'atm_2mom_bubble_rceTorus_test' ]; then
    TYPES=${TYPES='atm_2d_ml atm_3d_ml'}
    DATES=${DATES='20080801T000000Z 20080801T000200Z 20080801T000400Z'}
    RESTART_DATE=${RESTART_DATE='20080801T000200Z'}
fi

echo " "
echo "=================================================================="
echo " "
echo "Run the checksuite for:"
echo "- EXPERIMENT   = ${EXPERIMENT:?   is not defined --> ERROR}"
echo "- TYPES        = ${TYPES:?        is not defined --> ERROR}"
echo "- DATES        = ${DATES:?        is not defined --> ERROR}"
echo "- RESTART_DATE = ${RESTART_DATE:? is not defined --> ERROR}"
echo "- CHECK MODE   = ${MD:?           is not defined --> ERROR}"
echo "------------------------------------------------------------------"
echo " "

# check if REFERENCE is defined if an update test is requested
if [[ ${MD} =~ .*u.* ]]; then
    echo "- REFERENCE    = ${REFERENCE:?  is not defined --> ERROR}"

    # get reference path standardized by pwd; exit if path is not available
    cd ${REFERENCE} || exit 1; REFERENCE=`pwd`
    if [ "${REFERENCE}" == "${MODEL_DIR}" ]; then
        if [ "$COLOUR" == 'no' ]; then
            echo 'reference model and test model are the same'
        else
            echo -e "\033[31mreference model and test model are the same\033[00m"
        fi
        exit 1
    fi
fi

SCRIPT=${EXPERIMENT}

cd ${MODEL_DIR}

MRS_SUBDIR="${SCRIPT_DIR#${MODEL_DIR}}"

if [ ! -f ${SCRIPT_DIR}/${PREFIX}.${SCRIPT}.run -o "$FORCE_MRS" == 'yes' ]; then
    ./make_runscripts ${SCRIPT} -d ${MRS_SUBDIR:+-r ${MRS_SUBDIR}}
fi

if [ ! -d experiments ]; then
    mkdir experiments
fi

# check if the test runscript exists
if [ ! -f ${SCRIPT_DIR}/${PREFIX}.${SCRIPT}.run ]; then
    if [ "$COLOUR" == 'no' ]; then
        echo "did not find base runscript ${SCRIPT_DIR}/${PREFIX}.${SCRIPT}.run"
    else
        echo "\033[31mdid not find base runscript ${SCRIPT_DIR}/${PREFIX}.${SCRIPT}.run\033[00m"
    fi
    exit 1
else
    echo "found runscript ${SCRIPT_DIR}/${PREFIX}.${SCRIPT}.run"
fi

# find out on which system we are
TARGET_MACHINE=`grep "# target machine is " ${SCRIPT_DIR}/${PREFIX}.${SCRIPT}.run`
TARGET_MACHINE=${TARGET_MACHINE#'# target machine is '}

# variables to track the test results
PASSED_TESTS="PASSED_TESTS: "
FAILED_TESTS="FAILED_TESTS: "
EXIT_STATUS=0

# now start with the tests
echo "Performing tests specified with MD=${MD}"


echo ' '
echo "####################    perform base test     ####################"
echo ' '
TEST='base'
EXP_BASE=${EXPERIMENT}_${TEST}
EXP_TEST=${EXPERIMENT}_${TEST}
if [ "${OVERWRITE}" == 'yes' -o ! -d ${MODEL_DIR}/experiments/${EXP_BASE} ]; then
    cd ${SCRIPT_DIR}
    RUN_SCRIPT=${PREFIX}.${EXP_BASE}.run
    sed    s/${SCRIPT}/${EXP_BASE}/g < ${PREFIX}.${SCRIPT}.run > ${RUN_SCRIPT} # change experiment name
    sed -i s/data.${EXP_BASE}/data.${SCRIPT}/g             ${RUN_SCRIPT} # except in the data package name

    echo "Perform $TEST run"
    chmod 755 ${RUN_SCRIPT}
    ${SCRIPT_DIR}/${RUN_SCRIPT}
    

    STATUS=$?
    if [ "$STATUS" -eq 0 ]; then
        PASSED_TESTS="$PASSED_TESTS $TEST"
        EXIT_STATUS=$(($EXIT_STATUS + 0))
    else
        FAILED_TESTS="$FAILED_TESTS $TEST"
        EXIT_STATUS=$((EXIT_STATUS + 1))
        if [ "$COLOUR" == 'no' ]; then
            echo "ERROR: Base run FAILED --> no further testing possible"
        else
            echo -e "\033[31mERROR: Base run FAILED --> no further testing possible\033[00m"
        fi
        exit 1
    fi
else
    echo "Found $TEST run"
fi # OVERWRITE


if [[ ${MD} =~ .*u.* ]]; then
    echo ' '
    echo "####################    perform update test   ####################"
    echo ' '
    TEST='update'
    cd ${REFERENCE} || exit 1
    RUN_STATUS=-1
    if [ ! -d experiments/${EXP_BASE} ] ;then 
        if [ ! -f run/${PREFIX}.${SCRIPT}.run -o "$FORCE_MRS" == 'yes' ]; then
            ${MODEL_DIR}/make_runscripts ${SCRIPT} ${MRS_SUBDIR:+-r ${MRS_SUBDIR}}
        fi
        if [ ! -d experiments ]; then
            mkdir experiments
        fi
        cd run
        if [ ! -f ${PREFIX}.${SCRIPT}.run ]; then
            if [ "$COLOUR" == 'no' ]; then
                echo 'reference model: '$REFERENCE
                echo "did not find base runscript for reference model ${PREFIX}.${SCRIPT}.run"
            else
                echo -e "\033[31mreference model: $REFERENCE\033[00m"
                echo -e "\033[31mdid not find base runscript for reference model ${PREFIX}.${SCRIPT}.run\033[00m"
            fi
            exit 1
        else
            echo "found base runscript ${PREFIX}.${SCRIPT}.run"
        fi

        RUN_SCRIPT=${PREFIX}.${EXP_BASE}.run
        sed    s/${SCRIPT}/${EXP_BASE}/g < ${PREFIX}.${SCRIPT}.run > ${RUN_SCRIPT} # change experiment name
        sed -i s/data.${EXP_BASE}/data.${SCRIPT}/g             ${RUN_SCRIPT} # except in the data package name

        echo "Perform $TEST run"
        chmod 755 ${RUN_SCRIPT}
        ${REFERENCE}/run/${RUN_SCRIPT}
        RUN_STATUS=$?

    else
        echo "Found $TEST run"
        RUN_STATUS=0
    fi # OVERWRITE

    if [ "$RUN_STATUS" == 0 ]; then
    # compare base run with test run
        diff_results $MODEL_DIR $EXP_BASE $REFERENCE $EXP_BASE $TEST
        if [ "$DIFF_STATUS" == 0 ]; then
            PASSED_TESTS="$PASSED_TESTS $TEST"
            EXIT_STATUS=$(($EXIT_STATUS + 0))
        else
            FAILED_TESTS="$FAILED_TESTS $TEST"
            EXIT_STATUS=$(($EXIT_STATUS + 1))
        fi
    else
        if [ "$COLOUR" == 'no' ]; then
            echo "ERROR: The $TEST test run aborted --> no comparison with the base run"
        else
            echo -e "\033[31mERROR: The $TEST test run aborted --> no comparison with the base run\033[00m"
        fi
        FAILED_TESTS="$FAILED_TESTS $TEST"
        EXIT_STATUS=$(($EXIT_STATUS + 1))
    fi # RUN_STATUS
fi # MODE


if [[ ${MD} =~ .*r.* ]]; then
    echo ' '
    echo "####################   perform restart test   ####################"
    echo ' '
    TEST='restart'
    RUN_STATUS=-1
    EXP_TEST=${EXPERIMENT}_${TEST}
    if [ "${OVERWRITE}" == 'yes' -o ! -d ${MODEL_DIR}/experiments/${EXP_TEST} ]; then

        copy_experiment ${MODEL_DIR} ${EXP_BASE} ${EXP_TEST}
        if [ $? -ne 0 ]; then
            if [ "$CLOLUR" == 'no' ]; then
                echo "could not get base experiment ${EXP_BASE} or create new experiment ${EXP_TEST}"
            else
	        echo -e "\033[31mcould not get base experiment ${EXP_BASE} or create new experiment ${EXP_TEST}\033[00m"
            fi
            exit 1
        fi

        RUN_SCRIPT=${PREFIX}.${EXP_TEST}.run
        cd ${SCRIPT_DIR}
        sed    s/${SCRIPT}/${EXP_TEST}/g < ${PREFIX}.${SCRIPT}.run > ${RUN_SCRIPT}
        sed -i s/data.${EXP_TEST}/data.${SCRIPT}/g             ${RUN_SCRIPT}

        sed s/restart:=\".false.\"/restart:=\".true.\"/g < ${RUN_SCRIPT} > ${RUN_SCRIPT}.out
        mv ${RUN_SCRIPT}.out ${RUN_SCRIPT}

        echo "Perform $TEST run"
        chmod 755 ${RUN_SCRIPT}
        ${SCRIPT_DIR}/${RUN_SCRIPT}
        RUN_STATUS=$?

    else
        echo "Found $TEST run"
        RUN_STATUS=0
    fi # OVERWRITE

    if [ "$RUN_STATUS" == 0 ]; then
        # compare base run with test run
        diff_results $MODEL_DIR $EXP_BASE $MODEL_DIR $EXP_TEST $TEST
        if [ "$DIFF_STATUS" == 0 ]; then
            PASSED_TESTS="$PASSED_TESTS $TEST"
            EXIT_STATUS=$(($EXIT_STATUS + 0))
        else
            FAILED_TESTS="$FAILED_TESTS $TEST"
            EXIT_STATUS=$(($EXIT_STATUS + 1))
        fi
    else
        if [ "$COLOUR" == 'no' ]; then
            echo "ERROR: The $TEST test run aborted --> no comparison with the base run"
        else
            echo -e "\033[31mERROR: The $TEST test run aborted --> no comparison with the base run\033[00m"
        fi
        FAILED_TESTS="$FAILED_TESTS $TEST"
        EXIT_STATUS=$(($EXIT_STATUS + 1))
    fi # RUN_STATUS
fi # MODE


if [[ ${MD} =~ .*n.* ]]; then
    echo ' '
    echo "####################   perform nproma test    ####################"
    echo ' '
    TEST='nproma'
    RUN_STATUS=-1
    EXP_TEST=${EXPERIMENT}_${TEST}
    if [ "${OVERWRITE}" == 'yes' -o ! -d ${MODEL_DIR}/experiments/${EXP_TEST} ]; then

        RUN_SCRIPT=${PREFIX}.${EXP_TEST}.run
        cd ${SCRIPT_DIR}
        sed    s/${SCRIPT}/${EXP_TEST}/g < ${PREFIX}.${SCRIPT}.run > ${RUN_SCRIPT}
        sed -i s/data.${EXP_TEST}/data.${SCRIPT}/g             ${RUN_SCRIPT}

        TEST_POSSIBLE=no
        N_NPROMA=`grep "nproma=" ${RUN_SCRIPT}`
        N_NPROMA=${N_NPROMA#nproma=}
        if ((N_NPROMA > 0)); then
            ((N_NPROMA_NEW=N_NPROMA + 1))
            sed s/nproma=$N_NPROMA/nproma=$N_NPROMA_NEW/g < ${RUN_SCRIPT} > ${RUN_SCRIPT}.out
            mv ${RUN_SCRIPT}.out ${RUN_SCRIPT}
            TEST_POSSIBLE=yes
        else
            N_NBLOCKS_C=$(grep "nblocks_c=" ${RUN_SCRIPT})
            N_NBLOCKS_C=${N_NBLOCKS_C#nblocks_c=}
            if ((N_NBLOCKS_C > 0)); then
                sed s/nblocks_c=$N_NBLOCKS_C/nblocks_c=$((N_NBLOCKS_C+1))/g < ${RUN_SCRIPT} > ${RUN_SCRIPT}.out
                mv ${RUN_SCRIPT}.out ${RUN_SCRIPT}
                TEST_POSSIBLE=yes
            fi
        fi

        if [[ $TEST_POSSIBLE == yes ]]; then
            echo "Perform $TEST run"
            chmod 755 ${RUN_SCRIPT}
            ${SCRIPT_DIR}/${RUN_SCRIPT}
            RUN_STATUS=$?
        else
            echo "ERROR: Could not determine nproma-setting mechanism (neither nproma nor nblocks_c are valid)"
            RUN_STATUS=1
        fi

    else
        echo "Found $TEST run"
        RUN_STATUS=0
    fi # OVERWRITE

    if [ "$RUN_STATUS" == 0 ]; then
        # compare base run with test run
        diff_results $MODEL_DIR $EXP_BASE $MODEL_DIR $EXP_TEST $TEST
        if [ "$DIFF_STATUS" == 0 ]; then
            PASSED_TESTS="$PASSED_TESTS $TEST"
            EXIT_STATUS=$(($EXIT_STATUS + 0))
        else
            FAILED_TESTS="$FAILED_TESTS $TEST"
            EXIT_STATUS=$(($EXIT_STATUS + 1))
        fi
    else
        if [ "$COLOUR" == 'no' ]; then
            echo "ERROR: The $TEST test run aborted --> no comparison with the base run"
        else
            echo -e "\033[31mERROR: The $TEST test run aborted --> no comparison with the base run\033[00m"
        fi
        FAILED_TESTS="$FAILED_TESTS $TEST"
        EXIT_STATUS=$(($EXIT_STATUS + 1))
    fi # RUN_STATUS
fi # MODE


if [[ ${MD} =~ .*m.* ]]; then
    echo ' '
    echo "####################     perform mpi test     ####################"
    echo ' '
    TEST='mpi'
    TEST_POSSIBLE='no'
    RUN_STATUS=-1
    EXP_TEST=${EXPERIMENT}_${TEST}
    if [ "${OVERWRITE}" == 'yes' -o ! -d ${MODEL_DIR}/experiments/${EXP_TEST} ]; then
        cd ${SCRIPT_DIR}
        MPI=`grep with_mpi ${PREFIX}.${SCRIPT}.run`
        MPIYES='# with_mpi=yes'
        if [ "$MPI" == "$MPIYES" ]; then

            # find out how many nodes and processes per node are in use

            OMP_NUM_THREADS=`grep "export OMP_NUM_THREADS=" ${PREFIX}.${SCRIPT}.run`
            eval OMP_NUM_THREADS=\""${OMP_NUM_THREADS#'export OMP_NUM_THREADS='}"\"
            N_NODES=${no_of_nodes:?no_of_nodes not set}
            N_PPNODE=${mpi_procs_pernode:?mpi_procs_pernode not set}
            N_PROCS=$(( N_NODES * N_PPNODE ))

            if [ $N_PROCS -gt 1 ]; then

	        TEST_POSSIBLE='yes'

                RUN_SCRIPT=${PREFIX}.${EXP_TEST}.run
                cd ${SCRIPT_DIR}
                sed    s/${SCRIPT}/${EXP_TEST}/g < ${PREFIX}.${SCRIPT}.run > ${RUN_SCRIPT}
                sed -i s/data.${EXP_TEST}/data.${SCRIPT}/g             ${RUN_SCRIPT}

                if [ $N_PPNODE -gt 1 ]; then

                    # keep number of nodes, and use one process less per node

	            N_NODES_NEW=$N_NODES
                    N_PPNODE_NEW=$(( N_PPNODE - 1 ))

                    # change script variables
                    sed -i \
                      's/\b\(mpi_procs_pernode\)=.*/\1='"$N_PPNODE_NEW"'/g' \
                      ${RUN_SCRIPT}

	        else

                    # use one node less and keep one process per node

	            N_NODES_NEW=$(( N_NODES - 1 ))
	            N_PPNODE_NEW=$N_PPNODE

                    # change script variables
	            sed -i \
                      's/\b\(no_of_nodes\)=.*/\1='"$N_NODES_NEW"'/g' \
                      ${RUN_SCRIPT}

	        fi # N_PPNODE>1

                N_PROCS_NEW=$(( N_NODES_NEW * N_PPNODE_NEW ))
                sed -i \
                  's/((\(mpi_total_procs=\).*/\1'"$N_PROCS_NEW"'/g' \
                  ${RUN_SCRIPT}

                echo "Perform $TEST run"
                chmod 755 ${RUN_SCRIPT}
                ${SCRIPT_DIR}/${RUN_SCRIPT}
                RUN_STATUS=$?

            else
                if [ "$COLOUR" == 'no' ]; then
                    echo "No MPI parallelization test because total number of MPI processors is : $N_PROCS"
	        else
                    echo -e "\033[31mNo MPI parallelization test because total number of MPI processors is : $N_PROCS\033[00m"
	        fi
            fi # total number of procs > 1

        else
            if [ "$COLOUR" == 'no' ]; then
                echo "No MPI parallelization test is peformed because: $MPI"
            else
                echo -e "\033[31mNo MPI parallelization test is peformed because: $MPI\033[00m"
            fi
        fi # MPI = yes

    else
        echo "Found $TEST run"
        TEST_POSSIBLE='yes'
        RUN_STATUS=0
    fi # OVERWRITE

    if [ "${TEST_POSSIBLE}" == 'yes' ]; then
        if [ "$RUN_STATUS" == 0 ]; then
      # compare base run with test run
            diff_results $MODEL_DIR $EXP_BASE $MODEL_DIR $EXP_TEST $TEST
            if [ "$DIFF_STATUS" == 0 ]; then
                PASSED_TESTS="$PASSED_TESTS $TEST"
                EXIT_STATUS=$(($EXIT_STATUS + 0))
            else
                FAILED_TESTS="$FAILED_TESTS $TEST"
                EXIT_STATUS=$(($EXIT_STATUS + 1))
            fi
        else
            if [ "$COLOUR" == 'no' ]; then
                echo "ERROR: The $TEST test run aborted --> no comparison with the base run"
            else
                echo -e "\033[31mERROR: The $TEST test run aborted --> no comparison with the base run\033[00m"
            fi
            FAILED_TESTS="$FAILED_TESTS $TEST"
            EXIT_STATUS=$(($EXIT_STATUS + 1))
        fi # RUN_STATUS
    fi # TEST_POSSIBLE
fi # MODE


if [[ ${MD} =~ .*o.* ]]; then
    echo ' '
    echo "####################     perform omp test     ####################"
    echo ' '
    TEST='omp'
    TEST_POSSIBLE='no'
    RUN_STATUS=-1
    EXP_TEST=${EXPERIMENT}_${TEST}
    if [ "${OVERWRITE}" == 'yes' -o ! -d ${MODEL_DIR}/experiments/${EXP_TEST} ]; then
        cd ${SCRIPT_DIR}
        OMP=`grep with_openmp ${PREFIX}.${SCRIPT}.run`
        OMPYES='# with_openmp=yes'
        if [ "$OMP" == "$OMPYES" ]; then

            # find out how many omp threads are in use

            N_OMP_NUM_THREADS=`grep "export OMP_NUM_THREADS=" ${PREFIX}.${SCRIPT}.run`
            eval N_OMP_NUM_THREADS=\""${N_OMP_NUM_THREADS#'export OMP_NUM_THREADS='}"\"
            N_ICON_THREADS=`grep "export ICON_THREADS=" ${PREFIX}.${SCRIPT}.run`
            eval N_ICON_THREADS=\""${N_ICON_THREADS#'export ICON_THREADS='}"\"

            if [ $N_OMP_NUM_THREADS -gt 1 ]; then

	        TEST_POSSIBLE='yes'

                RUN_SCRIPT=${PREFIX}.${EXP_TEST}.run
                sed    s/${SCRIPT}/${EXP_TEST}/g < ${PREFIX}.${SCRIPT}.run > ${RUN_SCRIPT}
                sed -i s/data.${EXP_TEST}/data.${SCRIPT}/g             ${RUN_SCRIPT}

                N_OMP_NUM_THREADS_NEW=$(( N_OMP_NUM_THREADS - 1 ))
	        N_ICON_THREADS_NEW=$(( N_ICON_THREADS - 1 ))

                # since the mistral script dynamically adapts the
                # number of tasks to the number of threads, these need
                # to be fixed too
                OMP_NUM_THREADS=$N_OMP_NUM_THREADS
                N_PPNODE=${mpi_procs_pernode:?mpi_procs_pernode not set}

                # change script variables
                sed -i \
                  -e 's/\b\(OMP_NUM_THREADS\)=.*/\1='"$N_OMP_NUM_THREADS_NEW"'/g' \
                  -e 's/\b\(ICON_THREADS\)=.*/\1='"$N_ICON_THREADS_NEW"'/g' \
                  -e 's/\b\(mpi_procs_pernode\)=.*/\1='"$N_PPNODE"'/g' \
                      ${RUN_SCRIPT}

                echo "Perform $TEST run"
                chmod 755 ${RUN_SCRIPT}
                ${SCRIPT_DIR}/${RUN_SCRIPT}
                RUN_STATUS=$?

            else
	        if [ "$COLOUR" == 'no' ]; then
                    echo "No OMP parallelization test because number of OMP threads = $N_OMP_NUM_THREADS"
	        else
                    echo -e "\033[31mNo OMP parallelization test because number of OMP threads = $N_OMP_NUM_THREADS\033[00m"
	        fi
            fi # total number of omp threads > 1

        else
            if [ "$COLOUR" == 'no' ]; then
                echo "No OMP parallelization test is peformed because: $OMP"
            else
                echo -e "\033[31mNo OMP parallelization test is peformed because: $OMP\033[00m"
            fi
        fi # OMP = yes

    else
        echo "Found $TEST run"
        TEST_POSSIBLE='yes'
        RUN_STATUS=0
    fi # OVERWRITE

    if [ "${TEST_POSSIBLE}" == 'yes' ]; then
        if [ "$RUN_STATUS" == 0 ]; then
            # compare base run with test run
            diff_results $MODEL_DIR $EXP_BASE $MODEL_DIR $EXP_TEST $TEST
            if [ "$DIFF_STATUS" == 0 ]; then
                PASSED_TESTS="$PASSED_TESTS $TEST"
                EXIT_STATUS=$(($EXIT_STATUS + 0))
            else
                FAILED_TESTS="$FAILED_TESTS $TEST"
                EXIT_STATUS=$(($EXIT_STATUS + 1))
            fi
        else
            if [ "$COLOUR" == 'no' ]; then
                echo "ERROR: The $TEST test run aborted --> no comparison with the base run"
            else
                echo -e "\033[31mERROR: The $TEST test run aborted --> no comparison with the base run\033[00m"
            fi
            FAILED_TESTS="$FAILED_TESTS $TEST"
            EXIT_STATUS=$(($EXIT_STATUS + 1))
        fi # RUN_STATUS
    fi # TEST_POSSIBLE
fi # MODE

if [[ ${MD} =~ .*t.* ]]; then
    echo ' '
    echo "####################  perform tolerance test  ####################"
    echo ' '
    TEST='tolerance'

    # compare base run with reference
    tolerance_check $MODEL_DIR $EXP_BASE $EXPERIMENT
    if [ "$?" == 0 ]; then
        PASSED_TESTS="$PASSED_TESTS $TEST"
        EXIT_STATUS=$(($EXIT_STATUS + 0))
    else
        FAILED_TESTS="$FAILED_TESTS $TEST"
        EXIT_STATUS=$(($EXIT_STATUS + 1))
    fi
fi

if [[ ${MD} =~ .*p.* ]]; then
    echo ' '
    echo "#################### perform performance test ####################"
    echo ' '
    TEST='performance'

    # compare base run with reference
    performance_check $MODEL_DIR $EXPERIMENT

    if [ "$?" == 0 ]; then
        PASSED_TESTS="$PASSED_TESTS $TEST"
        EXIT_STATUS=$(($EXIT_STATUS + 0))
    else
        FAILED_TESTS="$FAILED_TESTS $TEST"
        EXIT_STATUS=$(($EXIT_STATUS + 1))
    fi
fi

if [[ ${MD} =~ .*c.* ]]; then
    echo ' '
    echo "################# perform compute-sanitizer test  ################"
    echo ' '
    TEST='compute-sanitizer'

    lowercase_bb_name=$(echo ${BB_NAME} | tr '[:upper:]' '[:lower:]')
    if [[ ${lowercase_bb_name} =~ "gpu" ]]; then
        ${SCRIPT_DIR}/${RUN_SCRIPT} --compute-sanitizer
        if [ "$?" == 0 ]; then
            PASSED_TESTS="$PASSED_TESTS $TEST"
            EXIT_STATUS=$(($EXIT_STATUS + 0))
        else
            FAILED_TESTS="$FAILED_TESTS $TEST"
            EXIT_STATUS=$(($EXIT_STATUS + 1))
        fi
    else
        echo "Warning: ${BB_NAME} does not seem to be a GPU builder."
        echo "The compute-sanitizer test will not be executed."
        PASSED_TESTS="$PASSED_TESTS $TEST"
        EXIT_STATUS=$(($EXIT_STATUS + 0))
    fi
fi

if [[ ${MD} =~ .*g.* ]]; then
    echo ' '
    echo "#################### perform cuda-graph test  ####################"
    echo ' '
    TEST='cuda-graph'
    RUN_STATUS=-1
    EXP_TEST=${EXPERIMENT}_${TEST}
    if [ "${OVERWRITE}" == 'yes' -o ! -d ${MODEL_DIR}/experiments/${EXP_TEST} ]; then

        RUN_SCRIPT=${PREFIX}.${EXP_TEST}.run
        cd ${SCRIPT_DIR}
        sed    s/${SCRIPT}/${EXP_TEST}/g < ${PREFIX}.${SCRIPT}.run > ${RUN_SCRIPT}
        sed -i s/data.${EXP_TEST}/data.${SCRIPT}/g             ${RUN_SCRIPT}

        nml_replace_or_add lcuda_graph_lnd .TRUE. lnd_nml ${RUN_SCRIPT}
        nml_replace_or_add lcuda_graph_turb_tran .TRUE. nwp_phy_nml ${RUN_SCRIPT}

        echo "Perform $TEST run"
        chmod 755 ${RUN_SCRIPT}
        ${SCRIPT_DIR}/${RUN_SCRIPT}
        RUN_STATUS=$?

    else
        echo "Found $TEST run"
        RUN_STATUS=0
    fi # OVERWRITE

    if [ "$RUN_STATUS" == 0 ]; then
        # compare base run with test run
        diff_results $MODEL_DIR $EXP_BASE $MODEL_DIR $EXP_TEST $TEST
        if [ "$DIFF_STATUS" == 0 ]; then
            PASSED_TESTS="$PASSED_TESTS $TEST"
            EXIT_STATUS=$(($EXIT_STATUS + 0))
        else
            FAILED_TESTS="$FAILED_TESTS $TEST"
            EXIT_STATUS=$(($EXIT_STATUS + 1))
        fi
    else
        if [ "$COLOUR" == 'no' ]; then
            echo "ERROR: The $TEST test run aborted --> no comparison with the base run"
        else
            echo -e "\033[31mERROR: The $TEST test run aborted --> no comparison with the base run\033[00m"
        fi
        FAILED_TESTS="$FAILED_TESTS $TEST"
        EXIT_STATUS=$(($EXIT_STATUS + 1))
    fi # RUN_STATUS
fi # MODE


echo ' '
echo ' '
echo '####################     test summary     ########################'
echo ' '
if [ "$COLOUR" == 'no' ]; then
    echo $PASSED_TESTS
    echo $FAILED_TESTS
else
    echo -e "\033[32m$PASSED_TESTS\033[00m"
    echo -e "\033[31m$FAILED_TESTS\033[00m"
fi
echo ' '
echo 'EXIT_STATUS: '$EXIT_STATUS
echo ' '
echo '=================================================================='
date
exit $EXIT_STATUS
