#!/bin/bash

# ICON
#
# ------------------------------------------
# Copyright (C) 2004-2024, DWD, MPI-M, DKRZ, KIT, ETH, MeteoSwiss
# Contact information: icon-model.org
# See AUTHORS.TXT for a list of authors
# See LICENSES/ for license information
# SPDX-License-Identifier: BSD-3-Clause
# ------------------------------------------

export LANG=en_US.utf8

set -eu
unset CDPATH
ulimit -c 0

script_dir=$(cd "$(dirname "$0")"; pwd)
icon_dir=$(cd "${script_dir}/../.."; pwd)

# We do not use Spack to speed up the configuration. Uncomment the following
# lines if you need to re-explore the environment using the commented spack
# commands that you can find below.
#
# compiler='intel@2021.5.0'
# mpi='openmpi@4.1.2'

# MPI_ROOT=$(spack find --format='{prefix}' "${mpi}%${compiler}")
MPI_ROOT='/sw/spack-levante/openmpi-4.1.2-yfwe6t'

# ZLIB_ROOT=$(spack find --format='{prefix}' "zlib%${compiler}")
ZLIB_ROOT='/usr'
ZLIB_LIBS='-lz'

# HDF5_ROOT=$(spack find --format='{prefix}' "hdf5%${compiler} +fortran+hl ^${mpi}%${compiler}")
HDF5_ROOT='/sw/spack-levante/hdf5-1.12.1-tvymb5'
HDF5_LIBS='-lhdf5_hl_fortran -lhdf5_fortran -lhdf5'

# NETCDF_ROOT=$(spack find --format='{prefix}' "netcdf-c%${compiler} ^${mpi}%${compiler}")
NETCDF_ROOT='/sw/spack-levante/netcdf-c-4.8.1-2k3cmu'
NETCDF_LIBS='-lnetcdf'

# NETCDFF_ROOT=$(spack find --format='{prefix}' "netcdf-fortran%${compiler} ^${mpi}%${compiler}")
NETCDFF_ROOT='/sw/spack-levante/netcdf-fortran-4.5.3-k6xq5g'
NETCDFF_LIBS='-lnetcdff'

lapack_provider=netlib
case $lapack_provider in
  netlib)
    # NETLIB_LAPACK_ROOT=$(spack find --format='{prefix}' "netlib-lapack%${compiler}")
    NETLIB_LAPACK_ROOT='/sw/spack-levante/netlib-lapack-3.9.1-rwhcz7'
    BLAS_LAPACK_BUILD_ENV="export LD_LIBRARY_PATH=\"${NETLIB_LAPACK_ROOT}/lib64:\${LD_LIBRARY_PATH}\";"
    BLAS_LAPACK_LDFLAGS="-L${NETLIB_LAPACK_ROOT}/lib64"
    BLAS_LAPACK_LIBS='-llapack -lblas'
    ;;
  mkl)
    # MKL_ROOT=$(spack find --format='{prefix}/mkl/{version}' "intel-oneapi-mkl@2022.0.1")
    MKL_ROOT='/sw/spack-levante/intel-oneapi-mkl-2022.0.1-ttdktf/mkl/2022.0.1'
    BLAS_LAPACK_BUILD_ENV="export LD_LIBRARY_PATH=\"${MKL_ROOT}/lib/intel64:\${LD_LIBRARY_PATH}\";"
    BLAS_LAPACK_LDFLAGS="-qmkl=sequential -L${MKL_ROOT}/lib/intel64"
    # Alternative configuration, which prevents us from running 'make' in the
    # subfolders of the bundled libraries (due to the peculiarities of the MKL
    # installation on the machine) but is closer to how the compiler developers
    # see it should be done:
    # BLAS_LAPACK_BUILD_ENV="export MKLROOT=\"${MKL_ROOT}\";"
    # BLAS_LAPACK_LDFLAGS="-qmkl=sequential -Wl,-rpath -Wl,${MKL_ROOT}/lib/intel64"
    BLAS_LAPACK_LIBS=''
    ;;
  *)
    echo "ERROR: unknown LAPACK provider '$lapack_provider'" >&2
    exit 1
    ;;
esac

# ECCODES_ROOT=$(spack find --format='{prefix}' "eccodes%${compiler} +fortran")
ECCODES_ROOT='/sw/spack-levante/eccodes-2.21.0-3ehkbb'
ECCODES_LIBS='-leccodes_f90 -leccodes'

# XML2_ROOT=$(spack find --format='{prefix}' "libxml2%${compiler}")
XML2_ROOT='/usr'
XML2_LIBS='-lxml2'

#module load python3/2022.01-gcc-11.2.0
#PYTHON=$(which python)

PYTHON=/sw/spack-levante/python-3.9.9-fwvsvi/bin/python

################################################################################

BUILD_ENV="export LD_LIBRARY_PATH=\"${HDF5_ROOT}/lib:${NETCDF_ROOT}/lib:${NETCDFF_ROOT}/lib:${ECCODES_ROOT}/lib64:\${LD_LIBRARY_PATH}\"; export PATH=\"${HDF5_ROOT}/bin:\${PATH}\"; ${BLAS_LAPACK_BUILD_ENV}"

CC="${MPI_ROOT}/bin/mpicc"
CFLAGS='-g -gdwarf-4 -qno-opt-dynamic-align -ftz -fp-trap=all'
##old CFLAGS='-O3'
CPPFLAGS="-I${HDF5_ROOT}/include -I${NETCDF_ROOT}/include -I${ECCODES_ROOT}/include -I${XML2_ROOT}/include/libxml2"

FC="${MPI_ROOT}/bin/mpif90"
FCFLAGS="-I${HDF5_ROOT}/include -I${NETCDFF_ROOT}/include -I${ECCODES_ROOT}/include -g -gdwarf-4 -pc64 -fp-model source"
ICON_FCFLAGS='-DDO_NOT_COMBINE_PUT_AND_NOCHECK -D__SWAPDIM -DOCE_SOLVE_OMP'
ICON_OCEAN_FCFLAGS='-O3 -assume norealloc_lhs -reentrancy threaded -qopt-report-file=stdout -qopt-report=0 -qopt-report-phase=vec'

LDFLAGS="-L${HDF5_ROOT}/lib -L${NETCDF_ROOT}/lib -L${NETCDFF_ROOT}/lib ${BLAS_LAPACK_LDFLAGS} -L${ECCODES_ROOT}/lib64"
LIBS="-Wl,--disable-new-dtags -Wl,--as-needed ${XML2_LIBS} ${ECCODES_LIBS} ${BLAS_LAPACK_LIBS} ${NETCDFF_LIBS} ${NETCDF_LIBS} ${HDF5_LIBS} ${ZLIB_LIBS}"

AR="$($CC -show | sed 's: .*$::;s:/[^/]*$::')/xiar"

MPI_LAUNCH="${MPI_ROOT}/bin/mpiexec"

##suggestion of dkrz for levante: EXTRA_CONFIG_ARGS='--enable-rte-rrtmgp --enable-vectorized-lrtm --enable-parallel-netcdf'
##  but this additional flags will not work properly or are related to the old radiation scheme rrtm
##suggestion from MISTRAL experience '--enable-mixed-precision' (works perfectly)
##--enable-openmp (no trust anymore by Daniel Rieger)
EXTRA_CONFIG_ARGS='--enable-mixed-precision --enable-ecrad --enable-intel-consistency --enable-grib2 --disable-parallel-netcdf --disable-coupling --disable-ocean --disable-jsbach'


flag_set=default
case $flag_set in
  default)
    CFLAGS="${CFLAGS} -no-prec-sqrt -no-prec-div -fast-transcendentals -m64 -march=core-avx2 -mtune=core-avx2 -no-fma -ip -pc64 -std=gnu99"
    ICON_CFLAGS='-O3'
    ICON_BUNDLED_CFLAGS='-O2 -ftz'
    ICON_YAC_CFLAGS=${ICON_BUNDLED_CFLAGS}
    ICON_CDI_CFLAGS=''
    ICON_FCFLAGS="${ICON_FCFLAGS} -qoverride-limits -assume realloc_lhs -align array64byte -no-prec-sqrt -no-prec-div -fast-transcendentals -m64 -march=core-avx2 -mtune=core-avx2 -no-fma -ftz -fpe0 -fp-model source -no-vec -qno-opt-dynamic-align -ip"
    ##miss the option -no-vec, but try without first
    ICON_ECRAD_FCFLAGS=${ICON_FCFLAGS}
    EXTRA_CONFIG_ARGS="${EXTRA_CONFIG_ARGS} --enable-art"
    ;;
  legacy)  # from Mistral
    CFLAGS="${CFLAGS} -O3 -ftz"
    ICON_CFLAGS='-march=native'
    ICON_BUNDLED_CFLAGS=${ICON_CFLAGS}
    ICON_YAC_CFLAGS=''  # the compiler crashes when compiling area.c with -march=native
    ICON_CDI_CFLAGS=''  # the compiler crashes when compiling cgribexlib.c with -march=native
    FCFLAGS="${FCFLAGS} -march=native"
    ICON_FCFLAGS="${ICON_FCFLAGS} -O2 -assume realloc_lhs -ftz -no-fma -fpe0 -no-vec -fp-model source -no-prec-sqrt -no-prec-div -qno-opt-dynamic-align"
    ICON_ECRAD_FCFLAGS='-no-fma -fpe0 -no-vec -fp-model source -no-prec-sqrt -no-prec-div -qno-opt-dynamic-align'  # no optimization?
    EXTRA_CONFIG_ARGS="${EXTRA_CONFIG_ARGS} --enable-art"
    ;;
  *)
    echo "ERROR: unknown flag set '$flag_set'" >&2
    exit 1
    ;;
esac

##die alten switches:
##-no-vec -qno-opt-dynamic-align -fpe0 -no-fma -fp-model source -qoverride-limits 
##-assume realloc_lhs -align array64byte -no-prec-sqrt -no-prec-div -fast-transcendentals 
##-m64 -march=core-avx2 -mtune=core-avx2 -g -gdwarf-4 -ip -pc64 
##-D__LOOP_EXCHANGE -D__SWAPDIM -DIFORT_CONSISTENCY_ENFORCE -DLRTM_FULL_VECTORIZATION -DOCE_SOLVE_OMP 



################################################################################

"${icon_dir}/configure" \
AR="${AR}" \
BUILD_ENV="${BUILD_ENV}" \
CC="${CC}" \
CFLAGS="${CFLAGS}" \
CPPFLAGS="${CPPFLAGS}" \
FC="${FC}" \
FCFLAGS="${FCFLAGS}" \
ICON_BUNDLED_CFLAGS="${ICON_BUNDLED_CFLAGS}" \
ICON_CDI_CFLAGS="${ICON_CDI_CFLAGS}" \
ICON_CFLAGS="${ICON_CFLAGS}" \
ICON_ECRAD_FCFLAGS="${ICON_ECRAD_FCFLAGS}" \
ICON_FCFLAGS="${ICON_FCFLAGS}" \
ICON_OCEAN_FCFLAGS="${ICON_OCEAN_FCFLAGS}" \
ICON_YAC_CFLAGS="${ICON_YAC_CFLAGS}" \
LDFLAGS="${LDFLAGS}" \
LIBS="${LIBS}" \
MPI_LAUNCH="${MPI_LAUNCH}" \
PYTHON="${PYTHON}" \
${EXTRA_CONFIG_ARGS} \
"$@"

for arg in "$@"; do
  case $arg in
    -help | --help | --hel | --he | -h | -help=r* | --help=r* | --hel=r* | --he=r* | -hr* | -help=s* | --help=s* | --hel=s* | --he=s* | -hs*)
      test -n "${EXTRA_CONFIG_ARGS}" && echo '' && echo "This wrapper script ('$0') calls the configure script with the following extra arguments, which might override the default values listed above: ${EXTRA_CONFIG_ARGS}"
      exit 0 ;;
  esac
done

# Copy runscript-related files when building out-of-source:
if test $(pwd) != $(cd "${icon_dir}"; pwd); then
  echo "Copying runscript input files from the source directory..."
  rsync -uavz ${icon_dir}/run . --exclude='*.in' --exclude='.*' --exclude='standard_*'
  ln -sf -t run/ ${icon_dir}/run/standard_*
  rsync -uavz ${icon_dir}/externals . --exclude='.git' --exclude='*.f90' --exclude='*.F90' --exclude='*.c' --exclude='*.h' --exclude='*.Po' --exclude='tests' --exclude='rrtmgp*.nc' --exclude='*.mod' --exclude='*.o'
  rsync -uavz ${icon_dir}/make_runscripts .
  ln -sf ${icon_dir}/data
  ln -sf ${icon_dir}/vertical_coord_tables
fi

