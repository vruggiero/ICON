#!/bin/bash

# ICON
#
# ------------------------------------------
# Copyright (C) 2004-2024, DWD, MPI-M, DKRZ, KIT, ETH, MeteoSwiss
# Contact information: icon-model.org
# See AUTHORS.TXT for a list of authors
# See LICENSES/ for license information
# SPDX-License-Identifier: BSD-3-Clause
# ------------------------------------------

set -eu
unset CDPATH
ulimit -c 0

script_dir=$(cd "$(dirname "$0")"; pwd)
icon_dir=$(cd "${script_dir}/../.."; pwd)

cmp_ver='12.3.0'
mpi_ver='3.4.0'

modules="vh/gcc/${cmp_ver} ve/mpi/${mpi_ver}"

ZLIB_LIBS='-lz'

HDF5_ROOT="/opt/dkrz/vh/hdf5/1.10.5_gnu-${cmp_ver}_mpi-${mpi_ver}_localdisk"
HDF5_LIBS='-lhdf5hl_fortran -lhdf5_hl -lhdf5_fortran -lhdf5'

NETCDF_ROOT="/opt/dkrz/vh/netcdf-c/4.7.4_gnu-${cmp_ver}_mpi-${mpi_ver}_localdisk"
NETCDF_LIBS='-lnetcdf'

NETCDFF_ROOT="/opt/dkrz/vh/netcdf-fortran/4.5.4_gnu-${cmp_ver}_mpi-${mpi_ver}_localdisk"
NETCDFF_LIBS='-lnetcdff'

# There is no installation for ${cmp_ver}:
BLAS_LAPACK_ROOT='/work/k20200/sw/aurora/linux-rocky8-skylake_avx512/gcc-12.2.0/openblas-0.3.23-ncapi3svqnylp3ypbqcspmfimizhksyx'
BLAS_LAPACK_LIBS='-lopenblas'

ECCODES_ROOT='/opt/dkrz/vh/eccodes/2.18.0_gnu-8.5.0_serial_localdisk'
ECCODES_LIBS='-leccodes_f90 -leccodes'

FYAML_ROOT='/opt/dkrz/vh/libfyaml/0.7.12_gcc-8.5.0'
FYAML_LIBS='-lfyaml'

XML2_CPPFLAGS='-I/usr/include/libxml2'
XML2_LIBS='-lxml2'

################################################################################

BUILD_ENV=". ${MODULESHOME}/init/sh; module purge; save_CC=\$CC; save_CXX=\$CXX; save_FC=\$FC; save_F77=\$F77; module load ${modules}; CC=\$save_CC; CXX=\$save_CXX; FC=\$save_FC; F77=\$save_F77; export LD_LIBRARY_PATH=\"${HDF5_ROOT}/lib:${NETCDF_ROOT}/lib:${NETCDFF_ROOT}/lib:${BLAS_LAPACK_ROOT}/lib:${ECCODES_ROOT}/lib:${FYAML_ROOT}/lib:\${LD_LIBRARY_PATH-}\";"

CC='mpincc -vh'
CFLAGS='-g1 -march=native -mpc64'
ICON_CFLAGS='-O3'
ICON_BUNDLED_CFLAGS='-O2'

CPPFLAGS="-I${HDF5_ROOT}/include -I${NETCDF_ROOT}/include -I${ECCODES_ROOT}/include -I${FYAML_ROOT}/include ${XML2_CPPFLAGS}"

FC='mpinfort -vh'
FCFLAGS="-I${HDF5_ROOT}/include -I${NETCDFF_ROOT}/include -I${ECCODES_ROOT}/include -g1 -fbacktrace -march=native -mpc64 -O2 -fmodule-private -fimplicit-none -fno-range-check -fmax-identifier-length=63 -fall-intrinsics -Wall -Wcharacter-truncation -Wunderflow -Wunused-parameter -Wno-surprising"

ICON_FCFLAGS='-D__COMM_OPT__ -D__BLOCK_GET__ -D__NEC_VH__ -std=f2008 -fallow-argument-mismatch'

ICON_DACE_FCFLAGS='-fallow-argument-mismatch'
ICON_DACE_PATH='externals/dace_icon'

ICON_BUNDLED_FCFLAGS='-std=f2008'

ICON_ECRAD_FCFLAGS='-finline-functions'

LDFLAGS="-L${HDF5_ROOT}/lib -L${NETCDF_ROOT}/lib -L${NETCDFF_ROOT}/lib -L${BLAS_LAPACK_ROOT}/lib -L${ECCODES_ROOT}/lib -L${FYAML_ROOT}/lib -shared-mpi"

LIBS="-Wl,--as-needed ${XML2_LIBS} ${FYAML_LIBS} ${ECCODES_LIBS} ${BLAS_LAPACK_LIBS} ${NETCDFF_LIBS} ${NETCDF_LIBS} ${HDF5_LIBS} ${ZLIB_LIBS}"

MPI_LAUNCH='mpirun -vh'

EXTRA_CONFIG_ARGS='--enable-fcgroup-DACE --enable-active-target-sync --enable-mixed-precision --disable-loop-exchange --enable-grib2 --enable-mpi --disable-openmp --enable-ecrad --disable-art'

################################################################################

"${icon_dir}/configure" \
BUILD_ENV="${BUILD_ENV}" \
CC="${CC}" \
CFLAGS="${CFLAGS}" \
CPPFLAGS="${CPPFLAGS}" \
FC="${FC}" \
FCFLAGS="${FCFLAGS}" \
ICON_BUNDLED_CFLAGS="${ICON_BUNDLED_CFLAGS}" \
ICON_BUNDLED_FCFLAGS="${ICON_BUNDLED_FCFLAGS}" \
ICON_CFLAGS="${ICON_CFLAGS}" \
ICON_DACE_FCFLAGS="${ICON_DACE_FCFLAGS}" \
ICON_DACE_PATH="${ICON_DACE_PATH}" \
ICON_ECRAD_FCFLAGS="${ICON_ECRAD_FCFLAGS}" \
ICON_FCFLAGS="${ICON_FCFLAGS}" \
LDFLAGS="${LDFLAGS}" \
LIBS="${LIBS}" \
MPI_LAUNCH="${MPI_LAUNCH}" \
${EXTRA_CONFIG_ARGS} \
"$@"

for arg in "$@"; do
  case $arg in
    -help | --help | --hel | --he | -h | -help=r* | --help=r* | --hel=r* | --he=r* | -hr* | -help=s* | --help=s* | --hel=s* | --he=s* | -hs*)
      test -n "${EXTRA_CONFIG_ARGS}" && echo '' && echo "This wrapper script ('$0') calls the configure script with the following extra arguments, which might override the default values listed above: ${EXTRA_CONFIG_ARGS}"
      exit 0 ;;
  esac
done

# Copy runscript-related files when building out-of-source:
if test $(pwd) != $(cd "${icon_dir}"; pwd); then
  echo "Copying runscript input files from the source directory..."
  rsync -uavz ${icon_dir}/run . --exclude='*.in' --exclude='.*' --exclude='standard_*'
  ln -sf -t run/ ${icon_dir}/run/standard_*
  ln -sf set-up.info run/SETUP.config
  rsync -uavz ${icon_dir}/externals . --exclude='.git' --exclude='*.f90' --exclude='*.F90' --exclude='*.c' --exclude='*.h' --exclude='*.Po' --exclude='tests' --exclude='*.mod' --exclude='*.o'
  rsync -uavz ${icon_dir}/make_runscripts .
  rsync -uavz ${icon_dir}/scripts .
  ln -sf ${icon_dir}/data
  ln -sf ${icon_dir}/vertical_coord_tables
fi

