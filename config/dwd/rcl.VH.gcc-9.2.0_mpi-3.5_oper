#!/bin/bash

# ICON
#
# ------------------------------------------
# Copyright (C) 2004-2024, DWD, MPI-M, DKRZ, KIT, ETH, MeteoSwiss
# Contact information: icon-model.org
# See AUTHORS.TXT for a list of authors
# See LICENSES/ for license information
# SPDX-License-Identifier: BSD-3-Clause
# ------------------------------------------

##################################################################
###        Configure wrapper for NEC SX AURORA                 ###
###                     VECTOR HOST                            ###
##################################################################

set -eu

SCRIPT_DIR=$(cd "$(dirname "$0")">/dev/null; pwd)
ICON_DIR=$(cd "${SCRIPT_DIR}/../..">/dev/null; pwd)

# make module command available
MODULE_SETTINGS=". ${MODULESHOME}/init/sh; module purge"


MODULES='apps sx/default gcc/9.2.0 mpi/3.5.0 netcdf4/4.7.3-VH-gnu hdf5/1.10.5-VH-gnu eccodes/2.36.0-VH-gnu aec/1.1.2-VH-gnu aocl/2.1-VH-gnu szip/2.1.1-VH-gnu libfyaml/0.8-VH-gnu unsupported cmake/3.26.4'


### Libraries ###

# NETCDF
NETCDFF_LIBS='-lnetcdff'
NETCDF_LIBS='-lnetcdf'

# HDF5
HDF5_LIBS='-lhdf5hl_fortran -lhdf5_fortran -lhdf5_hl -lhdf5'

# BLAS, LAPACK
AMDLIB_ROOT='/hpc/sw/amd/aocl/2.1'
AMD_LIBS='-lflame -lblis'

# ECCODES - note that we use a double underscore because ECCODES_LIBS may be overwritten by system settings
ECCODES__LIBS='-leccodes_f90 -leccodes'

# XML
XML2ROOT='/hpc/sw/libxml2/2.9.10/VH'
XML2_LIBS='-lxml2'

# AEC
AEC_LIB='-laec'

# SZIP
SZIP_LIB='-lsz'

# ZLIB
ZLIBROOT='/hpc/sw/zlib/1.2.11/x86/gnu'
ZLIB_LIB='-lz' 

# RTTOV
RTTOV_ROOT='/hpc/rhome/for0adm/nwp/x86_vh/external'
RTTOV_LIBS='-lrttov13'

# FYAML
FYAML_LIB='-lfyaml'

# C++ standard library (for eccodes > 2.31.0)
CXX_LIB='-lstdc++'

# flags needed for static linking
STATICLINK_FLAGS='-static -add-gcc-rpath'

################################################################################


BUILD_ENV="${MODULE_SETTINGS} && . \"${SCRIPT_DIR}/module_switcher\"; switch_for_module ${MODULES}; export NMPI_FC_H=gfortran;"
echo ${BUILD_ENV}

# We need some of the environment variables set by the modules now:
eval "$BUILD_ENV"

# C compiler wrapper on NEC machine
CC='mpincc -vh'
CXX='mpinc++ -vh'
CFLAGS='-std=gnu99 -mavx2 -mno-fma -O3 -DUSE_XML2 -fbacktrace -g'
ICON_CFLAGS=''
ICON_BUNDLED_CFLAGS='-O2'
CPPFLAGS="${ECCODES_INCLUDE} -I${HDF5ROOT}/include -I${NETCDFROOT}/include ${ECCODES_INCLUDE} -I${XML2ROOT}/include/libxml2"

# Fortran compiler wrapper on NEC machine
FC='mpinfort -vh'
FCFLAGS="${ECCODES_INCLUDE} -I${HDF5ROOT}/include -I${NETCDFROOT}/include -I${NETCDFFROOT}/include -I${RTTOV_ROOT}/include/rttov13 -std=gnu -fno-range-check -fbacktrace -g -fmodule-private -fimplicit-none -fmax-identifier-length=63 -ffree-line-length-none -Wall -Wcharacter-truncation -Wconversion -Wunderflow -Wunused-parameter -Wno-surprising -fall-intrinsics -mavx2 -O2 -mno-fma -mpc64  -D__COMM_OPT__ -D__BLOCK_GET__ -D__NEC_VH__ -DUSE_XML2"
ICON_FCFLAGS=''
ICON_OCEAN_FCFLAGS='-O2 -D__LVECTOR__'
ICON_OCEAN_PATH='src/hamocc:src/ocean:src/sea_ice'
ICON_ECRAD_FCFLAGS=""

LDFLAGS="-L${ZLIBROOT}/lib -L${AEC_DIR}/lib -L${SZIPROOT}/lib -L${HDF5ROOT}/lib -L${NETCDFROOT}/lib -L${NETCDFFROOT}/lib -L${RTTOV_ROOT}/lib -L${ECCODES_LIB_DIR} -L${AMDLIB_ROOT}/libs -L${XML2ROOT}/lib -shared-mpi"
LIBS="-Wl,--as-needed ${XML2_LIBS} ${ECCODES__LIBS} ${RTTOV_LIBS} ${AMD_LIBS} ${NETCDFF_LIBS} ${NETCDF_LIBS} ${HDF5_LIBS} ${SZIP_LIB} ${AEC_LIB} ${ZLIB_LIB} ${FYAML_LIB} ${CXX_LIB} ${STATICLINK_FLAGS}"

MPI_LAUNCH=''  # needed e.g. for yac configuration. What is the correct setting for gnu ?? 

# full operational NWP configuration including ecRad and DACE+EMVORADO coupling
EXTRA_CONFIG_ARGS='--disable-mpi-checks --disable-rpaths --enable-active-target-sync --enable-mixed-precision --enable-loop-exchange --enable-grib2 --enable-mpi --enable-openmp --enable-rttov --enable-ecrad --enable-dace --enable-emvorado --enable-art --disable-aes --disable-jsbach --disable-ocean --disable-coupling'

################################################################################


"${ICON_DIR}/configure" \
BUILD_ENV="${BUILD_ENV}" \
CC="${CC}" \
CXX="${CXX}" \
CFLAGS="${CFLAGS}" \
CPPFLAGS="${CPPFLAGS}" \
FC="${FC}" \
FCFLAGS="${FCFLAGS}" \
ICON_BUNDLED_CFLAGS="${ICON_BUNDLED_CFLAGS}" \
ICON_CFLAGS="${ICON_CFLAGS}" \
ICON_FCFLAGS="${ICON_FCFLAGS}" \
ICON_OCEAN_FCFLAGS="${ICON_OCEAN_FCFLAGS}" \
ICON_OCEAN_PATH="${ICON_OCEAN_PATH}" \
ICON_ECRAD_FCFLAGS="${ICON_ECRAD_FCFLAGS}" \
LDFLAGS="${LDFLAGS}" \
LIBS="${LIBS}" \
MPI_LAUNCH="${MPI_LAUNCH}" \
${EXTRA_CONFIG_ARGS} \
"$@"

for arg in "$@"; do
  case $arg in
    -help | --help | --hel | --he | -h | -help=r* | --help=r* | --hel=r* | --he=r* | -hr* | -help=s* | --help=s* | --hel=s* | --he=s* | -hs*)
      test -n "${EXTRA_CONFIG_ARGS}" && echo '' && echo "This wrapper script ('$0') calls the configure script with the following extra arguments, which might override the default values listed above: ${EXTRA_CONFIG_ARGS}"
      exit 0 ;;
  esac
done

#Hack to switch back to RTTOV12 (in addition to replacing 'rttov13' with 'rttov12' in this script)':
#sed -i 's;_RTTOV_VERSION=13;_RTTOV_VERSION=12;' icon.mk


# Copy runscript-related files when building out-of-source:
if test $(pwd) != $(cd "${ICON_DIR}"; pwd); then
  echo "Copying runscript input files from the source directory..."
  rsync -uavz ${ICON_DIR}/run . --exclude='*.in' --exclude='.*'
  rsync -uavz ${ICON_DIR}/externals . --exclude='.git' --exclude='*.f90' --exclude='*.F90' --exclude='*.c' --exclude='*.h' --exclude='*.Po' --exclude='tests' --exclude='*.mod' --exclude='*.o'
  rsync -uavz ${ICON_DIR}/make_runscripts .
  ln -sf ${ICON_DIR}/data
  ln -sf ${ICON_DIR}/vertical_coord_tables
fi

