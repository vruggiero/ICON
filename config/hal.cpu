#!/bin/bash

set -eu

SCRIPT_DIR=$(cd "$(dirname "$0")"; pwd)
ICON_DIR=$(cd "${SCRIPT_DIR}/../.."; pwd)

#MODULES='modules craype cdt-cuda PrgEnv-nvidia nvidia-icon/21.3.0 gcc/9.3.0 cray-mpich cray-netcdf cray-hdf5 cudatoolkit/21.3_11.2'

# Requirements
#if [ -z "${XML2_ROOT+x}" ]; then
#    echo "ERROR: XML2_ROOT is not set, please use spack or set manually."
#    exit 1
#else
#    XML2_LIBS='-lxml2'
#fi

XML2_ROOT='/usr'
XML2_LIBS='-lxml2'

#if [ -z "${SERIALBOX2_ROOT+x}" ]; then
#    echo "Warning: SERIALBOX2_ROOT is not set, please use spack or set manually, if you intend to use serialization"
#    SERIALBOX2_ROOT=''
#    SERIALBOX2_LIBS=''
#    SERIALBOXI=''
#    SB2PP=''
#else
#    SERIALBOX2_LIBS='-lSerialboxFortran -lSerialboxC -lSerialboxCore'
#    SERIALBOXI="-I${SERIALBOX2_ROOT}/include"
#    SB2PP="python2 ${SERIALBOX2_ROOT}/python/pp_ser/pp_ser.py"
#fi
#if [ -z "${ECCODES_ROOT+x}" ]; then
#    echo "Warning: ECCODES_ROOT is not set, please use spack or set manually if you intend to use ECCODES"
#    ECCODES_ROOT=''
#    ECCODES_LIBS=''
#    ECCODESI=''
#else
#    ECCODES_LIBS='-leccodes'
#    ECCODESI="-I${ECCODES_ROOT}/include"
#fi

####ECCODES_ROOT="/home/share/opt_rh8/eccodes/2.16.0/netcdf-c/4.8.0/hdf5/1.12.1/intel/2022.1.2"
ECCODES_ROOT="/home/vittorio/SORGENTI_ICON/eccodes-2.36.0-Source"
ECCODES_LIBS='-leccodes_f90 -leccodes'
ECCODESI="-I${ECCODES_ROOT}/include"

# Mandatory LIBS
BLAS_LAPACK_LIBS='-llapack -lblas'
#NETCDF_LIBS='-lnetcdf -lnetcdff'

HDF5_ROOT="/home/share/opt_rh8/hdf5/1.12.1/intel/2022.1.2/"
HDF5_LIBS='-lhdf5'

NETCDF_ROOT="/home/share/opt_rh8/netcdf-c/4.8.0/intel/2022.1.2/"
NETCDF_LIBS='-lnetcdf'

NETCDFF_ROOT="/home/share/opt_rh8/netcdf-f/4.5.3/intel/2022.1.2/"
NETCDFF_LIBS='-lnetcdff'

# The rest of libraries required by CUDA will be provided by PGI compiler:
STDCPP_LIBS='-lstdc++fs -lstdc++'

################################################################################

#BUILD_ENV=". \"${SCRIPT_DIR}/module_switcher\"; module use /project/d56/modules; switch_for_module cce; export PATH=\"\${CRAY_BINUTILS_BIN}:\${PATH}\"; switch_for_module ${MODULES}; export LD_LIBRARY_PATH=\"${XML2_ROOT}/lib:\${LD_LIBRARY_PATH}:/opt/pgi/20.1.1/linux86-64-llvm/20.1/lib/libomp\"; export CUDA_HOME=\${CUDATOOLKIT_HOME};"
#BUILD_ENV="export LD_LIBRARY_PATH=\"${XML2_ROOT}/lib:\"; export CUDA_HOME=\${CUDATOOLKIT_HOME};"
#VICBUILD_ENV="export LD_LIBRARY_PATH=\"${CUDA_HOME}/lib64:\${LD_LIBRARY_PATH}\"; "
BUILD_ENV=""
#BUILD_ENV="export LD_LIBRARY_PATH=\"${CUDA_HOME}/lib64:\"${HDF5_ROOT}/lib:${NETCDF_ROOT}/lib:${NETCDFF_ROOT}/lib:${ECCODES_ROOT}/lib:\${LD_LIBRARY_PATH}\";"

# We need some of the environment variables set by the modules now:
eval "$BUILD_ENV"

#if [ -z "${CLAW+x}" ]; then
#    echo "Warning: CLAW is not set, please use spack or set manually if you intend to use CLAW"
#    CLAW=''
#    NETCDFI=''
#    CLAWFLAGS=''
#else
#    # We have to tell CLAW where to look for netcdf.inc:
#    NETCDFI="-I${NETCDF_DIR}/include"
#    CLAWFLAGS=${NETCDFI}
#fi

CC='mpicc'
CFLAGS=' -O2 -I${NETCDF_ROOT}/include -I${ECCODES_ROOT}/include'
CPPFLAGS="-I${XML2_ROOT}/include/libxml2 -I${NETCDF_ROOT}/include -I${ECCODES_ROOT}/include"

FC='mpif90'
#FCFLAGS="-g -O -Mrecursive -Mallocatable=03 -Mbackslash -acc=verystrict -ta=nvidia:cc60 -Minfo=accel,inline ${SERIALBOXI} ${ECCODESI} -D__SWAPDIM"
#FCFLAGS=" -O -Mrecursive -Mallocatable=03 -Mbackslash -acc=verystrict -ta=nvidia:cc35 -Minfo=accel,inline,intensity ${ECCODESI} -D__SWAPDIM -I${NETCDFF_ROOT}/include"
#FCFLAGS="-g -O2 -xavx -mtune=haswell -fopenmp ${ECCODESI} -D__SWAPDIM -I${NETCDFF_ROOT}/include"
#FCFLAGS=" -g -O2 -xCORE-AVX2 -mtune=haswell -fopenmp ${ECCODESI} -D__SWAPDIM -I${NETCDFF_ROOT}/include"
flag_set=opt
case $flag_set in
  default)
     FCFLAGS="-g -O2 -xCORE-AVX2 -mtune=haswell -fopenmp ${ECCODESI} -D__SWAPDIM -I${NETCDFF_ROOT}/include"
    ;;
  opt)
     FCFLAGS=" -qopt-report3 -align array64byte -g -O3 -xCORE-AVX2 -mtune=haswell -fopenmp ${ECCODESI} -D__SWAPDIM -I${NETCDFF_ROOT}/include"
    ;;
  fast)
     FCFLAGS="-align array64byte -g -Ofast -xCORE-AVX2 -mtune=haswell -fopenmp ${ECCODESI} -D__SWAPDIM -I${NETCDFF_ROOT}/include"
    ;;
  levante)
     FCFLAGS="-O3 -ftz -qoverride-limits -assume realloc_lhs -align array64byte -fma -xCORE-AVX2 -mtune=haswell -fopenmp ${ECCODESI} -D__SWAPDIM -I${NETCDFF_ROOT}/include"
    ;;
  experimental)
     FCFLAGS="-O3 -no-prec-div  -fp-model fast=2 -qoverride-limits -assume realloc_lhs -align array64byte -fma  -xCORE-AVX2 -mtune=haswell -fopenmp ${ECCODESI} -D__SWAPDIM -I${NETCDFF_ROOT}/include"
    ;;
  *)
    echo "ERROR: unknown flag set '$flag_set'" >&2
    exit 1
    ;;
esac

#FCFLAGS=" -no-prec-div  -fp-model fast=2  -align array64byte -ftz -fpe0 -g -O2 -xCORE-AVX2 -mtune=haswell -fopenmp ${ECCODESI} -D__SWAPDIM -I${NETCDFF_ROOT}/include"
NVCC='nvcc'
NVCFLAGS='--std=c++11 -g -O3 -fopenmp'

#LDFLAGS="-L${GCC_PATH}/snos/lib64 -L${SERIALBOX2_ROOT}/lib -L${ECCODES_ROOT}/lib64 -L${XML2_ROOT}/lib"
#LDFLAGS="-L${ECCODES_ROOT}/lib64 -L${XML2_ROOT}/lib"
#VICLDFLAGS="-L${ECCODES_ROOT}/lib -L${XML2_ROOT}/lib -L${HDF5_ROOT}/lib -L${NETCDF_ROOT}/lib -L${NETCDFF_ROOT}/lib -L${ECCODES_ROOT}/lib -Wl,-rpath,/home/vittorio/MODULI/PMIX/NVHPC/lib"
LDFLAGS="-L${ECCODES_ROOT}/lib64 -L${XML2_ROOT}/lib -L${HDF5_ROOT}/lib -L${NETCDF_ROOT}/lib -L${NETCDFF_ROOT}/lib -L${ECCODES_ROOT}/lib64 -Wl,-rpath,/home/vittorio/MODULI/PMIX/NVHPC/lib"

# ICON executable will be linked to /opt/cray/pe/lib64/libmpichf90_pgi.so.3,
# which depends on libomptarget.so but doesn't have an RPATH to it. For this
# reason, it becomes impossible to run the executable without setting
# LD_LIBRARY_PATH in advance (e.g. by loading an environment module). To solve
# this issue, we overlink to libomptarget.so so that it can be found through
# RPATH entries of the executable, which are injected by the compiler.
#LIBS="-L/opt/pgi/20.1.1/linux86-64-llvm/20.1/lib/libomp -lomptarget -Wl,--as-needed ${XML2_LIBS} ${BLAS_LAPACK_LIBS} ${SERIALBOX2_LIBS} ${ECCODES_LIBS} ${STDCPP_LIBS}"
#LIBS="-L/opt/pgi/20.1.1/linux86-64-llvm/20.1/lib/libomp -lomptarget -Wl,--as-needed ${XML2_LIBS} ${BLAS_LAPACK_LIBS} ${ECCODES_LIBS} ${STDCPP_LIBS}"
LIBS="-Wl,--as-needed ${BLAS_LAPACK_LIBS} ${ECCODES_LIBS} ${STDCPP_LIBS}"

#MPI_LAUNCH='/apps/daint/UES/xalt/production/bin/srun -p debug -C gpu'
MPI_LAUNCH=false

#EXTRA_CONFIG_ARGS='--disable-loop-exchange --disable-art --enable-gpu --enable-rte-rrtmgp --enable-ecrad --without-external-yaxt'
########EXTRA_CONFIG_ARGS='--disable-loop-exchange --disable-art --enable-gpu --enable-rte-rrtmgp --enable-ecrad --without-external-yaxt --disable-jsbach'
#VIC-OK EXTRA_CONFIG_ARGS='--disable-loop-exchange --disable-art --enable-gpu --disable-ecrad --without-external-yaxt --disable-rte-rrtmgp --disable-yaxt --disable-coupling'
#VIC-OK EXTRA_CONFIG_ARGS='--disable-loop-exchange --disable-art --enable-gpu --enable-ecrad --without-external-yaxt --enable-rte-rrtmgp --disable-yaxt --disable-coupling'
###VICEXTRA_CONFIG_ARGS='--disable-loop-exchange --disable-art --enable-gpu --disable-rte-rrtmgp --enable-ecrad --without-external-yaxt --enable-grib2 --disable-rttov --disable-ocean'
#####EXTRA_CONFIG_ARGS=' --enable-mixed-precision --enable-openmp --disable-loop-exchange --disable-art --disable-gpu --disable-rte-rrtmgp --enable-ecrad --without-external-yaxt --enable-grib2 --disable-rttov --disable-ocean'
#########################
#VITTORIOEXTRA_CONFIG_ARGS='--enable-mixed-precision --enable-openmp --enable-loop-exchange --disable-art --disable-gpu --disable-rte-rrtmgp --enable-ecrad --without-external-yaxt --enable-grib2 --disable-rttov --disable-ocean'
EXTRA_CONFIG_ARGS='--enable-mixed-precision --enable-openmp --enable-loop-exchange --disable-art --disable-gpu --disable-rte-rrtmgp --enable-ecrad --without-external-yaxt --enable-grib2 --disable-rttov '

# Speed up the configuration by disabling MPI checks:
#VICEXTRA_CONFIG_ARGS+='--disable-mpi-checks --disable-silent-rules --disable-coupling  --disable-jsbach'
EXTRA_CONFIG_ARGS+='--disable-silent-rules --disable-coupling  --disable-jsbach'
EXTRA_CONFIG+='--disable-yaxt --disable-cdi-pio --enable-emvorado'
#########################
################################################################################

"${ICON_DIR}/configure" \
BUILD_ENV="$BUILD_ENV" \
CC="$CC" \
CFLAGS="$CFLAGS" \
CPPFLAGS="$CPPFLAGS" \
FC="$FC" \
FCFLAGS="$FCFLAGS" \
LDFLAGS="$LDFLAGS -L/home/share/nvidia/cuda-11.2_rh8/lib64" \
LIBS="$LIBS -lcudart_static -lnetcdff -lnetcdf" \
MPI_LAUNCH="$MPI_LAUNCH" \
NVCC="$NVCC" \
NVCFLAGS="$NVCFLAGS" \
${EXTRA_CONFIG_ARGS} \
"$@"

for arg in "$@"; do
  case $arg in
    -help | --help | --hel | --he | -h | -help=r* | --help=r* | --hel=r* | --he=r* | -hr* | -help=s* | --help=s* | --hel=s* | --he=s* | -hs*)
      test -n "${EXTRA_CONFIG_ARGS}" && echo '' && echo "This wrapper script ('$0') calls the configure script with the following extra arguments, which might override the default values listed above: ${EXTRA_CONFIG_ARGS}"
      exit 0 ;;
  esac
done

# Copy runscript-related files when building out-of-source:
if test $(pwd) != $(cd "${ICON_DIR}"; pwd); then
  echo "Copying runscript input files from the source directory..."
  rsync -uavz ${ICON_DIR}/run . --exclude='*.in' --exclude='.*' --exclude='standard_*'
  ln -sf -t run/ ${ICON_DIR}/run/standard_*
  ln -sf set-up.info run/SETUP.config
  rsync -uavz ${ICON_DIR}/externals . --exclude='.git' --exclude='*.f90' --exclude='*.F90' --exclude='*.c' --exclude='*.h' --exclude='*.Po' --exclude='tests' --exclude='*.mod' --exclude='*.o'
  rsync -uavz ${ICON_DIR}/make_runscripts .
  ln -sf ${ICON_DIR}/data
  ln -sf ${ICON_DIR}/vertical_coord_tables
fi

