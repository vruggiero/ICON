# ICON
#
# ---------------------------------------------------------------
# Copyright (C) 2004-2024, DWD, MPI-M, DKRZ, KIT, ETH, MeteoSwiss
# Contact information: icon-model.org
#
# See AUTHORS.TXT for a list of authors
# See LICENSES/ for license information
# SPDX-License-Identifier: BSD-3-Clause
# ---------------------------------------------------------------

# Generalized builder for DWD NEC
# Usage: build_dwd <dwd_builder>
# - dwd_builder: Name suffix of the config wrapper in config/dwd, e.g.
#   dwd_nec_hybrid for config/dwd/rcl.V[EH].bb-dwd_nec_hybrid.
build_dwd() {

  : ${MY_DIR:?MY_DIR is not set}
  local DWD_BUILDER=${1:?no builder name provided}

  # set required environment variables
  export MODULESHOME="/usr/share/Modules"

  local ICON_DIR=$(cd "${MY_DIR}/../.."; pwd)

  # this wrapper needs to build two ICON binaries
  local BUILD_DIR_VE="${ICON_DIR}/vector"
  local BUILD_DIR_VH="${ICON_DIR}/host"
  local VECTOR_BINARY="${BUILD_DIR_VE}/bin/icon"
  local HOST_BINARY="${BUILD_DIR_VH}/bin/icon"

  local MAKE_PROCS=14

  # clean up
  if [[ "$USER" == buildbot ]] ; then
    (
      shopt -s nullglob
      local dirs=( /hpc/gtmp/buildbot/.jtmp.rcnl* )
      if (( ${#dirs[@]} > 0 )); then
        "${ICON_DIR}/scripts/buildbot_scripts/keeplatestn" --verbose 50 "${dirs[@]}"
      fi
    )
  fi

  # create vector and host binaries in parallel using make
  make --no-print-directory --output-sync=line --jobs="${MAKE_PROCS}" -f - <<_EOF
.PHONY: all host vector
all: host vector
host:
	@mkdir -p ${BUILD_DIR_VH}
	# configuring host
	cd ${BUILD_DIR_VH} && ${ICON_DIR}/config/dwd/rcl.VH.bb-${DWD_BUILDER}
	\$(MAKE) -C ${BUILD_DIR_VH}
vector:
	@mkdir -p ${BUILD_DIR_VE}
	# configuring vector
	cd ${BUILD_DIR_VE} && ${ICON_DIR}/config/dwd/rcl.VE.bb-${DWD_BUILDER}
	\$(MAKE) -C ${BUILD_DIR_VE}
_EOF

  # Post-processing

  cd "${ICON_DIR}"

  file "$VECTOR_BINARY" "$HOST_BINARY"

  # Restore the _vector_ info file as it is required for create_target_header.
  cp -v "${BUILD_DIR_VE}"/run/set-up.info "${ICON_DIR}"/run/set-up.info

  # Link a temporary directory with lots of space into the experiments subdir. Reruns
  # /etc/profile to get a new directory
  echo "Link a temporary directory with lots of space into the experiments subdir"
  ksh -c '. /etc/profile && echo "TMPDIR: $TMPDIR" && chmod -R go+rx "$TMPDIR" &&
	  ln -s "$TMPDIR" '"'${BUILD_DIR_VE}/experiments'"

  # The icon-dev.checksuite driver expects the experiments dir in the source tree, the run-scripts
  # generated by make_experiment put results inside vector/experiments.
  ln -s "$(readlink -e "${BUILD_DIR_VE}/experiments")" "${ICON_DIR}/experiments"

  ls -l "${BUILD_DIR_VE}/experiments" "${ICON_DIR}/experiments"
}

