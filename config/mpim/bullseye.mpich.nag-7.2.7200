#!/bin/bash

# ICON
#
# ------------------------------------------
# Copyright (C) 2004-2024, DWD, MPI-M, DKRZ, KIT, ETH, MeteoSwiss
# Contact information: icon-model.org
# See AUTHORS.TXT for a list of authors
# See LICENSES/ for license information
# SPDX-License-Identifier: BSD-3-Clause
# ------------------------------------------

set -eu
unset CDPATH

script_dir=$(cd "$(dirname "$0")"; pwd)
icon_dir=$(cd "${script_dir}/../.."; pwd)

sw_root='/sw/bullseye-x64/views/icon/mpich/nag-7.2.7200'

if test -r "${sw_root}/lib/librttov_main.a"; then
  RTTOV_LIBS='-lrttov_other -lrttov_emis_atlas -lrttov_brdf_atlas -lrttov_parallel -lrttov_coef_io -lrttov_hdf -lrttov_main'
else
  # The RTTOV license does not allow for a public installation. Therefore, only
  # members of the 'buildbot' group (40001) have read access to the RTTOV files
  # in ${sw_root}. To make the configure wrapper work for other users, we have
  # to set RTTOV_LIBS to an empty string. That, of course, means that other
  # users cannot use the wrapper as-is to build ICON with RTTOV. They need to
  # download (implies accepting the license) and install RTTOV themselves.
  RTTOV_LIBS=
  # Uncomment the following lines and set RTTOV_ROOT to the path to your
  # installation of RTTOV if you want to build ICON with it but do not have read
  # access to the installation in ${sw_root}:
  # RTTOV_ROOT='/path/to/rttov'
  # RTTOV_FCFLAGS="-I${RTTOV_ROOT}/mod -I${RTTOV_ROOT}/include"
  # RTTOV_LDFLAGS="-L${RTTOV_ROOT}/lib"
  # RTTOV_LIBS='-lrttov_other -lrttov_emis_atlas -lrttov_brdf_atlas -lrttov_parallel -lrttov_coef_io -lrttov_hdf -lrttov_main'
fi

################################################################################

BUILD_ENV="export PATH=\"${sw_root}/bin:\${PATH-}\"; export LD_LIBRARY_PATH=\"${sw_root}/lib:\${LD_LIBRARY_PATH-}\"; export PYTHONPATH=\"${sw_root}/python/pp_ser:\${PYTHONPATH-}\";"

CC='mpicc'
CFLAGS='-g -march=native -mpc64'
ICON_CFLAGS='-O3'
ICON_BUNDLED_CFLAGS='-O2'

CXX=$(eval "${BUILD_ENV}" >/dev/null; mpicxx -show | sed 's: .*$::')
CXXFLAGS='-g -march=native -mpc64 -O2'

CPPFLAGS="-I${sw_root}/include -I${sw_root}/include/libxml2"

FC='mpif90'
FCFLAGS="${RTTOV_FCFLAGS-} -I${sw_root}/include -f2008 -colour -w=uep -g -gline -O0 -float-store -nan"

# Fortran compiler flags that cannot be handled by vanilla libtool scripts:
non_libtool_FCFLAGS='-Wc,-g -Wc,-pipe -Wc,--param,max-vartrack-size=200000000 -Wc,-mno-fma'

# Fortran compiler flags allowing for acceptable argument mismatches when
# calling the MPI API:
selective_mismatch_FCFLAGS='-wmismatch=mpi_allgather,mpi_allgatherv,mpi_allreduce,mpi_alltoall,mpi_alltoallv,mpi_bcast,mpi_free_mem,mpi_gather,mpi_gatherv,mpi_get,mpi_get_address,mpi_ibcast,mpi_irecv,mpi_isend,mpi_pack,mpi_recv,mpi_reduce,mpi_rget,mpi_scatter,mpi_scatterv,mpi_send,mpi_sendrecv,mpi_unpack,mpi_win_create -C=all'

# The selective mismatch flags above are not enough in some cases:
global_mismatch_FCFLAGS='-mismatch -C=alias -C=array -C=bits -C=dangling -C=do -C=intovf -C=present -C=pointer -C=recursion'

ICON_FCFLAGS="${non_libtool_FCFLAGS} ${selective_mismatch_FCFLAGS}"

# MPICH 4.1.1 declares MPI_Alloc_mem in the MPI module but not for TYPE(c_ptr)
# argument:
ICON_WORKAROUND1_FCFLAGS="${non_libtool_FCFLAGS} ${global_mismatch_FCFLAGS}"
ICON_WORKAROUND1_PATH='src/io/restart/mo_async_restart_comm_data.f90:src/io/restart/mo_multifile_restart_collector.f90:src/io/shared/mo_name_list_output_init.f90:src/io/shared/mo_name_list_output_metadata.f90'

# NAG detects a number of inconsistencies in the interface declarations of the
# p_bcast_derivedtype subroutine:
ICON_DACE_FCFLAGS="${non_libtool_FCFLAGS} ${global_mismatch_FCFLAGS}"
ICON_DACE_PATH='externals/dace_icon'

# The following files a victims of the inconsistent calls of the nf_get_att_real
# function in externals/dace_icon/src_for_icon/mo_iratlas.f90:
ICON_DACE_PATH+=':src/atm_dyn_iconam/mo_nh_stepping.f90:src/data_assimilation/interfaces/mo_icon2dace.f90:src/drivers/icon.f90:src/drivers/mo_atmo_model.f90:src/drivers/mo_atmo_nonhydrostatic.f90'

# Enable recognition of non-standard double precision complex intrinsic
# functions (DCMPLX and DCONJG):
ICON_EMVORADO_FCFLAGS="${ICON_FCFLAGS} -dcfuns"
ICON_EMVORADO_PATH='externals/emvorado'

# Compile the bundled libraries with no tolerance to argument mismatches:
ICON_BUNDLED_FCFLAGS="${non_libtool_FCFLAGS} -C=all"

# Do not pass Fortran compiler flags that cannot be handled by the libtool
# script of the bundled SCT:
ICON_SCT_FCFLAGS='-C=all'

LDFLAGS="${RTTOV_LDFLAGS-} -L${sw_root}/lib"
# We put '-Wl,-Wl,,--disable-new-dtags' not to LDFLAGS or LIBS, which are used
# by both Fortran and C compilers (the latter is used for linking by the bundled
# libraries) but to ICON_LDFLAGS. We also do not add '-Wl,-Wl,,--as-needed'
# because NAG puts it before the '-l' flags when calling GCC and the workaround
# that we usually use, which is to prepend each '-l' flag with '-Wl,', does not
# work with the Debian-provided GCC (e.g. the building of the CDI tests fails):
ICON_LDFLAGS='-Wl,-Wl,,--disable-new-dtags'

LIBS="-lxml2 -lfyaml -lSerialboxFortran -leccodes_f90 -leccodes ${RTTOV_LIBS-} -llapack -lblas -lnetcdff -lnetcdf -lhdf5_hl_fortran -lhdf5_fortran -lhdf5 -lz"

MPI_LAUNCH='mpiexec'

EXTRA_CONFIG_ARGS='--enable-loop-exchange --enable-grib2 --enable-fcgroup-WORKAROUND1 --enable-fcgroup-DACE --enable-fcgroup-EMVORADO'

################################################################################

"${icon_dir}/configure" \
BUILD_ENV="${BUILD_ENV}" \
CC="${CC}" \
CFLAGS="${CFLAGS}" \
CPPFLAGS="${CPPFLAGS}" \
CXX="${CXX}" \
CXXFLAGS="${CXXFLAGS}" \
FC="${FC}" \
FCFLAGS="${FCFLAGS}" \
ICON_BUNDLED_CFLAGS="${ICON_BUNDLED_CFLAGS}" \
ICON_BUNDLED_FCFLAGS="${ICON_BUNDLED_FCFLAGS}" \
ICON_CFLAGS="${ICON_CFLAGS}" \
ICON_DACE_FCFLAGS="${ICON_DACE_FCFLAGS}" \
ICON_DACE_PATH="${ICON_DACE_PATH}" \
ICON_EMVORADO_FCFLAGS="${ICON_EMVORADO_FCFLAGS}" \
ICON_EMVORADO_PATH="${ICON_EMVORADO_PATH}" \
ICON_FCFLAGS="${ICON_FCFLAGS}" \
ICON_LDFLAGS="${ICON_LDFLAGS}" \
ICON_SCT_FCFLAGS="${ICON_SCT_FCFLAGS}" \
ICON_WORKAROUND1_FCFLAGS="${ICON_WORKAROUND1_FCFLAGS}" \
ICON_WORKAROUND1_PATH="${ICON_WORKAROUND1_PATH}" \
LDFLAGS="${LDFLAGS}" \
LIBS="${LIBS}" \
MPI_LAUNCH="${MPI_LAUNCH}" \
${EXTRA_CONFIG_ARGS} \
"$@"

for arg in "$@"; do
  case $arg in
    -help | --help | --hel | --he | -h | -help=r* | --help=r* | --hel=r* | --he=r* | -hr* | -help=s* | --help=s* | --hel=s* | --he=s* | -hs*)
      test -n "${EXTRA_CONFIG_ARGS}" && echo '' && echo "This wrapper script ('$0') calls the configure script with the following extra arguments, which might override the default values listed above: ${EXTRA_CONFIG_ARGS}"
      exit 0 ;;
  esac
done

# Copy runscript-related files when building out-of-source:
if test $(pwd) != $(cd "${icon_dir}"; pwd); then
  echo "Copying runscript input files from the source directory..."
  rsync -uavz ${icon_dir}/run . --exclude='*.in' --exclude='.*' --exclude='standard_*'
  ln -sf -t run/ ${icon_dir}/run/standard_*
  rsync -uavz ${icon_dir}/externals . --exclude='.git' --exclude='*.f90' --exclude='*.F90' --exclude='*.c' --exclude='*.h' --exclude='*.Po' --exclude='tests' --exclude='*.mod' --exclude='*.o'
  rsync -uavz ${icon_dir}/make_runscripts .
  ln -sf ${icon_dir}/data
  ln -sf ${icon_dir}/vertical_coord_tables
fi

