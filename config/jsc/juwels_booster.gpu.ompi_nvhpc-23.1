#!/bin/bash

# ICON
#
# ------------------------------------------
# Copyright (C) 2004-2024, DWD, MPI-M, DKRZ, KIT, ETH, MeteoSwiss
# Contact information: icon-model.org
# See AUTHORS.TXT for a list of authors
# See LICENSES/ for license information
# SPDX-License-Identifier: BSD-3-Clause
# ------------------------------------------

############################################################################
###                  Configure wrapper for JUWELS                        ###
###                  Atmosphere-setup with OpenMPI                       ###
############################################################################

set -eu

SCRIPT_DIR=$(cd "$(dirname "$0")"; pwd)
ICON_DIR=$(cd "${SCRIPT_DIR}/../.."; pwd)

# clear all modules and load Stage and modules for all dependencies
MODULES='Stages/2023 NVHPC/23.1 CMake OpenMPI netCDF-Fortran ecCodes libfyaml' 
BUILD_ENV="module --force purge; export USERINSTALLATIONS=/p/usersoftware/slmet/easybuild/stages/2023/; module load ${MODULES}; module list;"

SOFTWAREROOT="/p/software/juwelsbooster"

### Libraries ##################################################################
ROOT_ECCODES="${SOFTWAREROOT}/stages/2023/software/ecCodes/2.27.0-nvompic-2022a"
ROOT_HDF5="${SOFTWAREROOT}/stages/2023/software/HDF5/1.12.2-nvompic-2022a"
ROOT_LIBFYAML="/p/usersoftware/slmet/easybuild/stages/2023/easybuild/juwelsbooster/software/libfyaml/0.8-GCCcore-11.3.0"
ROOT_LIBXML2="${SOFTWAREROOT}/stages/2023/software/libxml2/2.9.13-GCCcore-11.3.0"
ROOT_NETCDF="${SOFTWAREROOT}/stages/2023/software/netCDF/4.9.0-nvompic-2022a"
ROOT_NETCDFMINFORTRAN="${SOFTWAREROOT}/stages/2023/software/netCDF-Fortran/4.6.0-nvompic-2022a"
ROOT_OPENMPI="${SOFTWAREROOT}/stages/2023/software/OpenMPI/4.1.4-NVHPC-23.1"
ROOT_PNETCDF="${SOFTWAREROOT}/stages/2023/software/PnetCDF/1.12.3-nvompic-2022a"

ECCODES_LIBS='-leccodes'
HDF5_LIBS='-lhdf5'
NETCDFF_LIBS='-lnetcdff'
NETCDF_LIBS='-lnetcdf'
PNETCDF_LIBS='-lpnetcdf'
XML2_LIBS='-lxml2'
FYAML_LIBS='-lfyaml'
BLAS_LAPACK_LIBS='-llapack -lblas'

################################################################################

CC="${ROOT_OPENMPI}/bin/mpicc"
CFLAGS='-g -O2' 
CPPFLAGS="-I${ROOT_HDF5}/include -I${ROOT_NETCDF}/include -I${ROOT_ECCODES}/include -I${ROOT_LIBFYAML}/include -I${ROOT_LIBXML2}/include/libxml2/libxml"

FC="${ROOT_OPENMPI}/bin/mpif90"
FCFLAGS="-I${ROOT_NETCDFMINFORTRAN}/include -g -O2 -Mrecursive -Mallocatable=03 -Mstack_arrays -Minfo=accel,inline -acc=verystrict,gpu -gpu=cc80"

LDFLAGS="-c++libs -cuda -L${ROOT_HDF5}/lib -L${ROOT_NETCDF}/lib -L${ROOT_PNETCDF}/lib -L${ROOT_NETCDFMINFORTRAN}/lib -L${ROOT_ECCODES}/lib -L${ROOT_LIBXML2}/lib64"  

LIBS="${XML2_LIBS} ${FYAML_LIBS} ${ECCODES_LIBS} ${BLAS_LAPACK_LIBS} ${NETCDFF_LIBS} ${NETCDF_LIBS} ${HDF5_LIBS}"

CUDACXX="${SOFTWAREROOT}/stages/2023/software/NVHPC/23.1/Linux_x86_64/23.1/compilers/bin/nvcc"
CUDAFLAGS='-arch=sm_80 -g -O3'

# We use srun for MPI launch, for which a active project is needed. So disable MPI checks
MPI_LAUNCH=""

EXTRA_CONFIG_ARGS='--enable-grib2 --enable-gpu --enable-coupling --enable-mpi-gpu'

# Speed up the configuration by disabling MPI checks:
EXTRA_CONFIG_ARGS+=' --disable-mpi-checks '

# Workaround for YAC on NVHPC 23.1
ICON_YAC_CFLAGS='-fortranlibs'
EXTRA_CONFIG_ARGS+=' yac_cv_fc_is_contiguous_works=yes'
ICON_YAC_FCFLAGS="-D'is_contiguous(arg)=.TRUE.'"
################################################################################

"${ICON_DIR}/configure" \
BUILD_ENV="$BUILD_ENV" \
CC="$CC" \
CFLAGS="$CFLAGS" \
CPPFLAGS="$CPPFLAGS" \
FC="$FC" \
FCFLAGS="$FCFLAGS" \
LDFLAGS="$LDFLAGS" \
LIBS="$LIBS" \
ICON_YAC_CFLAGS="$ICON_YAC_CFLAGS" \
ICON_YAC_FCFLAGS="$ICON_YAC_FCFLAGS" \
MPI_LAUNCH="$MPI_LAUNCH" \
CUDACXX="$CUDACXX" \
CUDAFLAGS="$CUDAFLAGS" \
${EXTRA_CONFIG_ARGS} \
"$@"

for arg in "$@"; do
  case $arg in
    -help | --help | --hel | --he | -h | -help=r* | --help=r* | --hel=r* | --he=r* | -hr* | -help=s* | --help=s* | --hel=s* | --he=s* | -hs*)
      test -n "${EXTRA_CONFIG_ARGS}" && echo '' && echo "This wrapper script ('$0') calls the configure script with the following extra arguments, which might override the default values listed above: ${EXTRA_CONFIG_ARGS}"
      exit 0 ;;
  esac
done

# Copy runscript-related files when building out-of-source:
if test $(pwd) != $(cd "${ICON_DIR}"; pwd); then
  echo "Copying runscript input files from the source directory..."
  rsync -uavz ${ICON_DIR}/run . --exclude='*.in' --exclude='.*' --exclude='standard_*' --exclude='*.log'
  ln -sf -t run/ ${ICON_DIR}/run/standard_*
  rsync -uavz ${ICON_DIR}/externals . --exclude='.git' --exclude='*.f90' --exclude='*.F90' --exclude='*.c' --exclude='*.h' --exclude='*.Po' --exclude='tests' --exclude='*.mod' --exclude='*.o'
  rsync -uavz ${ICON_DIR}/make_runscripts .
  ln -sf ${ICON_DIR}/data
  ln -sf ${ICON_DIR}/vertical_coord_tables
fi

