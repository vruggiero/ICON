#!/bin/bash

# ICON
#
# ------------------------------------------
# Copyright (C) 2004-2024, DWD, MPI-M, DKRZ, KIT, ETH, MeteoSwiss
# Contact information: icon-model.org
# See AUTHORS.TXT for a list of authors
# See LICENSES/ for license information
# SPDX-License-Identifier: BSD-3-Clause
# ------------------------------------------

if [ "${#}" -lt 1 ]
then
  cat >&2 <<_EOF
ERROR: expected at least one argument

this is NOT a configure but a CONTAINER wrapper
_EOF
  exit 1
fi

if ${ICON_CONTAINER_IMAGE+:} false; then :
  container=${ICON_CONTAINER_IMAGE}
else
  container=${ICON_SW_PREFIX-'/project/project_465000454/icon/sw'}
  container="${container}/cpe/ccpe-rocm-5.4.1-16.0.1.1.sif"
fi

echo "Using container image ${container}"

sw=${ICON_SW_PREFIX-'/appl/local/climatedt/sw'}
pool='/appl/local/climatedt/pool'

module --force purge

export ICON_SW_PREFIX=${sw}

current_dir=$(pwd)
current_script="$(unset CDPATH; cd "$(dirname "${0}")" && pwd)/$(basename "${0}")"
script_dir=$(unset CDPATH; cd "$(dirname "${current_script}")" && pwd)
icon_dir=$(unset CDPATH; cd "${script_dir}/../.." && pwd)

export ICON_CONTAINER_WRAPPER=${current_script}

SINGULARITY_BINDPATH="${current_dir},${sw},${pool}"

# Bind ${icon_dir} for out-of-source builds only:
if [ "${icon_dir}" != "${current_dir}" ]
then
  SINGULARITY_BINDPATH="${icon_dir},${SINGULARITY_BINDPATH}"
fi

# Libfabric within the container lacks functionality, so it, together with the
# cxi provider, is also used from host:
SINGULARITY_BINDPATH="/opt/cray/libfabric/1.15.2.0,/usr/lib64/libcxi.so.1,${SINGULARITY_BINDPATH}"

# At the runtime, one needs slurmd and munge from host (munge is needed for
# internode communication):
if [ -d '/var/spool/slurmd/mpi_cray_shasta' ]
then
  SINGULARITY_BINDPATH="/var/spool/slurmd/mpi_cray_shasta,/var/run/munge,${SINGULARITY_BINDPATH}"
fi

export SINGULARITY_BINDPATH

exec singularity exec --rocm "${container}" "$@"
