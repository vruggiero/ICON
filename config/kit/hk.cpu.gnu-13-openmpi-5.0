#!/bin/bash

# ICON
#
# ------------------------------------------
# Copyright (C) 2004-2024, DWD, MPI-M, DKRZ, KIT, ETH, MeteoSwiss
# Contact information: icon-model.org
# See AUTHORS.TXT for a list of authors
# See LICENSES/ for license information
# SPDX-License-Identifier: BSD-3-Clause
# ------------------------------------------

set -eu
unset CDPATH
ulimit -c 0

SCRIPT_DIR=$(cd "$(dirname "$0")"; pwd)
ICON_DIR=$(cd "${SCRIPT_DIR}/../.."; pwd)

GCC_ROOT='/opt/gcc/13'
CC="${GCC_ROOT}/bin/gcc"
FC="${GCC_ROOT}/bin/gfortran"
AR="${GCC_ROOT}/bin/gcc-ar"

MPI_ROOT='/software/all/mpi/openmpi/5.0_gnu_13'
MPI_LIBS='-lmpi_usempif08 -lmpi_usempi_ignore_tkr -lmpi_mpifh -lmpi'
MPI_FORTRAN_MOD_DIR="${MPI_ROOT}/lib64"

CUDA_ROOT='/software/all/devel/cuda/12.2'

HDF5_ROOT='/software/all/lib/hdf5/1.12_gnu_13_serial'
HDF5_LIBS='-lhdf5_hl_fortran -lhdf5_fortran -lhdf5'

NETCDF_ROOT='/software/all/lib/netcdf/4.9_serial_gnu_13'
NETCDF_LIBS='-lnetcdf'

NETCDFF_ROOT='/software/all/lib/netcdf-fortran/4.6_serial_gnu_13'
NETCDFF_LIBS='-lnetcdff'

BLAS_LAPACK_ROOT='/software/all/numlib/OpenBLAS/0.3.26_gnu_13'
BLAS_LAPACK_LIB_DIR="${BLAS_LAPACK_ROOT}/lib"
BLAS_LAPACK_LIBS='-lopenblas'
# BLAS_LAPACK_ROOT='/software/all/toolkit/Intel_OneAPI/mkl/2024.0'
# BLAS_LAPACK_LIB_DIR="${BLAS_LAPACK_ROOT}/lib/intel64"
# BLAS_LAPACK_LIBS='-lmkl_gf_lp64 -lmkl_sequential -lmkl_core'

ECCODES_ROOT='/software/all/lib/eccodes/2.32.0_gnu_13'
ECCODES_LIBS='-leccodes_f90 -leccodes'

FYAML_ROOT='/software/all/lib/libfyaml/0.9'
FYAML_LIBS='-lfyaml'

# Libraries in /usr/lib{,64}
XML2_INCLUDE_DIR='/usr/include/libxml2'
XML2_LIBS='-lxml2'
ZLIB_LIBS='-lz'

################################################################################

BUILD_ENV="export LD_LIBRARY_PATH=\"${GCC_ROOT}/lib64:${MPI_ROOT}/lib64:${CUDA_ROOT}/lib64:${HDF5_ROOT}/lib:${NETCDF_ROOT}/lib:${NETCDFF_ROOT}/lib:${ECCODES_ROOT}/lib64:${FYAML_ROOT}/lib:${BLAS_LAPACK_LIB_DIR}:/usr/lib64\"; export PATH=\"${GCC_ROOT}/bin:${HDF5_ROOT}/bin:${NETCDF_ROOT}/bin/:/usr/bin\"; unset CPATH C_INCLUDE_PATH CPLUS_INCLUDE_PATH INCLUDE LIBRARY_PATH;"

LDFLAGS="-L${GCC_ROOT}/lib64 -L${MPI_ROOT}/lib64 -L${CUDA_ROOT}/lib64 -L${HDF5_ROOT}/lib -L${NETCDF_ROOT}/lib -L${NETCDFF_ROOT}/lib -L${ECCODES_ROOT}/lib64 -L${FYAML_ROOT}/lib -L${BLAS_LAPACK_LIB_DIR}"
LIBS="-Wl,--disable-new-dtags -Wl,--as-needed ${MPI_LIBS} ${XML2_LIBS} ${ZLIB_LIBS} ${ECCODES_LIBS} ${FYAML_LIBS} ${BLAS_LAPACK_LIBS} ${NETCDFF_LIBS} ${NETCDF_LIBS} ${HDF5_LIBS}"

FCFLAGS="-I${MPI_ROOT}/include -I${MPI_FORTRAN_MOD_DIR} -I${HDF5_ROOT}/include -I${NETCDFF_ROOT}/include -I${ECCODES_ROOT}/include -ffree-line-length-none -fmodule-private -fimplicit-none -fmax-identifier-length=63 -Wall -Wcharacter-truncation -Wconversion -Wunderflow -Wunused-parameter -Wno-surprising -fall-intrinsics -g1 -march=native -mpc64"
CFLAGS="-g1 -gdwarf-4 -march=native -mpc64 -I${FYAML_ROOT}/include"
CPPFLAGS="-I${GCC_ROOT}/include -I${MPI_ROOT}/include -I${HDF5_ROOT}/include -I${NETCDF_ROOT}/include -I${ECCODES_ROOT}/include -I${XML2_INCLUDE_DIR}"

ICON_COMMON_FCFLAGS='-fbacktrace -fbounds-check -fstack-protector-all -finit-real=nan -finit-integer=-2147483648 -finit-character=127 -O2'
ICON_FCFLAGS="${ICON_COMMON_FCFLAGS} -std=f2008 -DDO_NOT_COMBINE_PUT_AND_NOCHECK"
ICON_CFLAGS='-O3'
ICON_BUNDLED_CFLAGS='-O2'
ICON_OCEAN_FCFLAGS='-O3 -fno-tree-loop-vectorize -std=f2008'
ICON_BUNDLED_FCFLAGS="${ICON_COMMON_FCFLAGS} -std=f2008"
ICON_ECRAD_FCFLAGS="${ICON_COMMON_FCFLAGS} -fallow-invalid-boz"
ICON_DACE_FCFLAGS="${ICON_COMMON_FCFLAGS} -fallow-argument-mismatch"
ICON_DACE_PATH='externals/dace_icon'

MPI_LAUNCH="${MPI_ROOT}/bin/mpiexec"

EXTRA_CONFIG_ARGS='--enable-ecrad --enable-art --enable-grib2 --enable-emvorado --enable-dace --enable-coupling'
EXTRA_CONFIG_ARGS="${EXTRA_CONFIG_ARGS} --disable-mpi-checks --enable-fcgroup-DACE"

################################################################################

"${ICON_DIR}/configure" \
BUILD_ENV="${BUILD_ENV}" \
AR="${AR}" \
CC="${CC}" \
CFLAGS="${CFLAGS}" \
CPPFLAGS="${CPPFLAGS}" \
FC="${FC}" \
FCFLAGS="${FCFLAGS}" \
ICON_BUNDLED_CFLAGS="${ICON_BUNDLED_CFLAGS}" \
ICON_BUNDLED_FCFLAGS="${ICON_BUNDLED_FCFLAGS}" \
ICON_CFLAGS="${ICON_CFLAGS}" \
ICON_ECRAD_FCFLAGS="${ICON_ECRAD_FCFLAGS}" \
ICON_FCFLAGS="${ICON_FCFLAGS}" \
ICON_OCEAN_FCFLAGS="${ICON_OCEAN_FCFLAGS}" \
ICON_DACE_FCFLAGS="${ICON_DACE_FCFLAGS}" \
ICON_DACE_PATH="${ICON_DACE_PATH}" \
LDFLAGS="${LDFLAGS}" \
LIBS="${LIBS}" \
MPI_LAUNCH="${MPI_LAUNCH}" \
${EXTRA_CONFIG_ARGS} \
"$@"

for arg in "$@"; do
  case $arg in
    -help | --help | --hel | --he | -h | -help=r* | --help=r* | --hel=r* | --he=r* | -hr* | -help=s* | --help=s* | --hel=s* | --he=s* | -hs*)
      test -n "${EXTRA_CONFIG_ARGS}" && echo '' && echo "This wrapper script ('$0') calls the configure script with the following extra arguments, which might override the default values listed above: ${EXTRA_CONFIG_ARGS}"
      exit 0 ;;
  esac
done

# Copy runscript-related files when building out-of-source:
if test $(pwd) != $(cd "${ICON_DIR}"; pwd); then
  echo "Copying runscript input files from the source directory..."
  rsync -uavz ${ICON_DIR}/run . --exclude='*.in' --exclude='.*' --exclude='standard_*'
  ln -sf -t run/ ${ICON_DIR}/run/standard_*
  rsync -uavz ${ICON_DIR}/externals . --exclude='.git' --exclude='*.f90' --exclude='*.F90' --exclude='*.c' --exclude='*.h' --exclude='*.Po' --exclude='tests' --exclude='*.mod' --exclude='*.o'
  rsync -uavz ${ICON_DIR}/make_runscripts .
  ln -sf ${ICON_DIR}/data
  ln -sf ${ICON_DIR}/vertical_coord_tables
fi
